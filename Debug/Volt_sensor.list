
Volt_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a54  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008bdc  08008bdc  00018bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bf8  08008bf8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08008bf8  08008bf8  00018bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c00  08008c00  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c00  08008c00  00018c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c04  08008c04  00018c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008c08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000988  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a04  20000a04  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015a29  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003aab  00000000  00000000  00035b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001210  00000000  00000000  000395c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000dc4  00000000  00000000  0003a7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024a60  00000000  00000000  0003b59c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001951c  00000000  00000000  0005fffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d793d  00000000  00000000  00079518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004f68  00000000  00000000  00150e58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  00155dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008bc4 	.word	0x08008bc4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08008bc4 	.word	0x08008bc4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b970 	b.w	8000cfc <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9e08      	ldr	r6, [sp, #32]
 8000a3a:	460d      	mov	r5, r1
 8000a3c:	4604      	mov	r4, r0
 8000a3e:	460f      	mov	r7, r1
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d14a      	bne.n	8000ada <__udivmoddi4+0xa6>
 8000a44:	428a      	cmp	r2, r1
 8000a46:	4694      	mov	ip, r2
 8000a48:	d965      	bls.n	8000b16 <__udivmoddi4+0xe2>
 8000a4a:	fab2 f382 	clz	r3, r2
 8000a4e:	b143      	cbz	r3, 8000a62 <__udivmoddi4+0x2e>
 8000a50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a54:	f1c3 0220 	rsb	r2, r3, #32
 8000a58:	409f      	lsls	r7, r3
 8000a5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a5e:	4317      	orrs	r7, r2
 8000a60:	409c      	lsls	r4, r3
 8000a62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a66:	fa1f f58c 	uxth.w	r5, ip
 8000a6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a6e:	0c22      	lsrs	r2, r4, #16
 8000a70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a78:	fb01 f005 	mul.w	r0, r1, r5
 8000a7c:	4290      	cmp	r0, r2
 8000a7e:	d90a      	bls.n	8000a96 <__udivmoddi4+0x62>
 8000a80:	eb1c 0202 	adds.w	r2, ip, r2
 8000a84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a88:	f080 811c 	bcs.w	8000cc4 <__udivmoddi4+0x290>
 8000a8c:	4290      	cmp	r0, r2
 8000a8e:	f240 8119 	bls.w	8000cc4 <__udivmoddi4+0x290>
 8000a92:	3902      	subs	r1, #2
 8000a94:	4462      	add	r2, ip
 8000a96:	1a12      	subs	r2, r2, r0
 8000a98:	b2a4      	uxth	r4, r4
 8000a9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aa2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000aa6:	fb00 f505 	mul.w	r5, r0, r5
 8000aaa:	42a5      	cmp	r5, r4
 8000aac:	d90a      	bls.n	8000ac4 <__udivmoddi4+0x90>
 8000aae:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ab6:	f080 8107 	bcs.w	8000cc8 <__udivmoddi4+0x294>
 8000aba:	42a5      	cmp	r5, r4
 8000abc:	f240 8104 	bls.w	8000cc8 <__udivmoddi4+0x294>
 8000ac0:	4464      	add	r4, ip
 8000ac2:	3802      	subs	r0, #2
 8000ac4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ac8:	1b64      	subs	r4, r4, r5
 8000aca:	2100      	movs	r1, #0
 8000acc:	b11e      	cbz	r6, 8000ad6 <__udivmoddi4+0xa2>
 8000ace:	40dc      	lsrs	r4, r3
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d908      	bls.n	8000af0 <__udivmoddi4+0xbc>
 8000ade:	2e00      	cmp	r6, #0
 8000ae0:	f000 80ed 	beq.w	8000cbe <__udivmoddi4+0x28a>
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	e9c6 0500 	strd	r0, r5, [r6]
 8000aea:	4608      	mov	r0, r1
 8000aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af0:	fab3 f183 	clz	r1, r3
 8000af4:	2900      	cmp	r1, #0
 8000af6:	d149      	bne.n	8000b8c <__udivmoddi4+0x158>
 8000af8:	42ab      	cmp	r3, r5
 8000afa:	d302      	bcc.n	8000b02 <__udivmoddi4+0xce>
 8000afc:	4282      	cmp	r2, r0
 8000afe:	f200 80f8 	bhi.w	8000cf2 <__udivmoddi4+0x2be>
 8000b02:	1a84      	subs	r4, r0, r2
 8000b04:	eb65 0203 	sbc.w	r2, r5, r3
 8000b08:	2001      	movs	r0, #1
 8000b0a:	4617      	mov	r7, r2
 8000b0c:	2e00      	cmp	r6, #0
 8000b0e:	d0e2      	beq.n	8000ad6 <__udivmoddi4+0xa2>
 8000b10:	e9c6 4700 	strd	r4, r7, [r6]
 8000b14:	e7df      	b.n	8000ad6 <__udivmoddi4+0xa2>
 8000b16:	b902      	cbnz	r2, 8000b1a <__udivmoddi4+0xe6>
 8000b18:	deff      	udf	#255	; 0xff
 8000b1a:	fab2 f382 	clz	r3, r2
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	f040 8090 	bne.w	8000c44 <__udivmoddi4+0x210>
 8000b24:	1a8a      	subs	r2, r1, r2
 8000b26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b2a:	fa1f fe8c 	uxth.w	lr, ip
 8000b2e:	2101      	movs	r1, #1
 8000b30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b34:	fb07 2015 	mls	r0, r7, r5, r2
 8000b38:	0c22      	lsrs	r2, r4, #16
 8000b3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b3e:	fb0e f005 	mul.w	r0, lr, r5
 8000b42:	4290      	cmp	r0, r2
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0x124>
 8000b46:	eb1c 0202 	adds.w	r2, ip, r2
 8000b4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0x122>
 8000b50:	4290      	cmp	r0, r2
 8000b52:	f200 80cb 	bhi.w	8000cec <__udivmoddi4+0x2b8>
 8000b56:	4645      	mov	r5, r8
 8000b58:	1a12      	subs	r2, r2, r0
 8000b5a:	b2a4      	uxth	r4, r4
 8000b5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b60:	fb07 2210 	mls	r2, r7, r0, r2
 8000b64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b68:	fb0e fe00 	mul.w	lr, lr, r0
 8000b6c:	45a6      	cmp	lr, r4
 8000b6e:	d908      	bls.n	8000b82 <__udivmoddi4+0x14e>
 8000b70:	eb1c 0404 	adds.w	r4, ip, r4
 8000b74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b78:	d202      	bcs.n	8000b80 <__udivmoddi4+0x14c>
 8000b7a:	45a6      	cmp	lr, r4
 8000b7c:	f200 80bb 	bhi.w	8000cf6 <__udivmoddi4+0x2c2>
 8000b80:	4610      	mov	r0, r2
 8000b82:	eba4 040e 	sub.w	r4, r4, lr
 8000b86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b8a:	e79f      	b.n	8000acc <__udivmoddi4+0x98>
 8000b8c:	f1c1 0720 	rsb	r7, r1, #32
 8000b90:	408b      	lsls	r3, r1
 8000b92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ba2:	40fd      	lsrs	r5, r7
 8000ba4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ba8:	4323      	orrs	r3, r4
 8000baa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bae:	fa1f fe8c 	uxth.w	lr, ip
 8000bb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000bb6:	0c1c      	lsrs	r4, r3, #16
 8000bb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bbc:	fb08 f50e 	mul.w	r5, r8, lr
 8000bc0:	42a5      	cmp	r5, r4
 8000bc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bc6:	fa00 f001 	lsl.w	r0, r0, r1
 8000bca:	d90b      	bls.n	8000be4 <__udivmoddi4+0x1b0>
 8000bcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bd4:	f080 8088 	bcs.w	8000ce8 <__udivmoddi4+0x2b4>
 8000bd8:	42a5      	cmp	r5, r4
 8000bda:	f240 8085 	bls.w	8000ce8 <__udivmoddi4+0x2b4>
 8000bde:	f1a8 0802 	sub.w	r8, r8, #2
 8000be2:	4464      	add	r4, ip
 8000be4:	1b64      	subs	r4, r4, r5
 8000be6:	b29d      	uxth	r5, r3
 8000be8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bec:	fb09 4413 	mls	r4, r9, r3, r4
 8000bf0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bf4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000bf8:	45a6      	cmp	lr, r4
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x1da>
 8000bfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000c00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c04:	d26c      	bcs.n	8000ce0 <__udivmoddi4+0x2ac>
 8000c06:	45a6      	cmp	lr, r4
 8000c08:	d96a      	bls.n	8000ce0 <__udivmoddi4+0x2ac>
 8000c0a:	3b02      	subs	r3, #2
 8000c0c:	4464      	add	r4, ip
 8000c0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c12:	fba3 9502 	umull	r9, r5, r3, r2
 8000c16:	eba4 040e 	sub.w	r4, r4, lr
 8000c1a:	42ac      	cmp	r4, r5
 8000c1c:	46c8      	mov	r8, r9
 8000c1e:	46ae      	mov	lr, r5
 8000c20:	d356      	bcc.n	8000cd0 <__udivmoddi4+0x29c>
 8000c22:	d053      	beq.n	8000ccc <__udivmoddi4+0x298>
 8000c24:	b156      	cbz	r6, 8000c3c <__udivmoddi4+0x208>
 8000c26:	ebb0 0208 	subs.w	r2, r0, r8
 8000c2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c32:	40ca      	lsrs	r2, r1
 8000c34:	40cc      	lsrs	r4, r1
 8000c36:	4317      	orrs	r7, r2
 8000c38:	e9c6 7400 	strd	r7, r4, [r6]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	2100      	movs	r1, #0
 8000c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c44:	f1c3 0120 	rsb	r1, r3, #32
 8000c48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c50:	fa25 f101 	lsr.w	r1, r5, r1
 8000c54:	409d      	lsls	r5, r3
 8000c56:	432a      	orrs	r2, r5
 8000c58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5c:	fa1f fe8c 	uxth.w	lr, ip
 8000c60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c64:	fb07 1510 	mls	r5, r7, r0, r1
 8000c68:	0c11      	lsrs	r1, r2, #16
 8000c6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c72:	428d      	cmp	r5, r1
 8000c74:	fa04 f403 	lsl.w	r4, r4, r3
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x258>
 8000c7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c82:	d22f      	bcs.n	8000ce4 <__udivmoddi4+0x2b0>
 8000c84:	428d      	cmp	r5, r1
 8000c86:	d92d      	bls.n	8000ce4 <__udivmoddi4+0x2b0>
 8000c88:	3802      	subs	r0, #2
 8000c8a:	4461      	add	r1, ip
 8000c8c:	1b49      	subs	r1, r1, r5
 8000c8e:	b292      	uxth	r2, r2
 8000c90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c94:	fb07 1115 	mls	r1, r7, r5, r1
 8000c98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000ca0:	4291      	cmp	r1, r2
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x282>
 8000ca4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cac:	d216      	bcs.n	8000cdc <__udivmoddi4+0x2a8>
 8000cae:	4291      	cmp	r1, r2
 8000cb0:	d914      	bls.n	8000cdc <__udivmoddi4+0x2a8>
 8000cb2:	3d02      	subs	r5, #2
 8000cb4:	4462      	add	r2, ip
 8000cb6:	1a52      	subs	r2, r2, r1
 8000cb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cbc:	e738      	b.n	8000b30 <__udivmoddi4+0xfc>
 8000cbe:	4631      	mov	r1, r6
 8000cc0:	4630      	mov	r0, r6
 8000cc2:	e708      	b.n	8000ad6 <__udivmoddi4+0xa2>
 8000cc4:	4639      	mov	r1, r7
 8000cc6:	e6e6      	b.n	8000a96 <__udivmoddi4+0x62>
 8000cc8:	4610      	mov	r0, r2
 8000cca:	e6fb      	b.n	8000ac4 <__udivmoddi4+0x90>
 8000ccc:	4548      	cmp	r0, r9
 8000cce:	d2a9      	bcs.n	8000c24 <__udivmoddi4+0x1f0>
 8000cd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	e7a3      	b.n	8000c24 <__udivmoddi4+0x1f0>
 8000cdc:	4645      	mov	r5, r8
 8000cde:	e7ea      	b.n	8000cb6 <__udivmoddi4+0x282>
 8000ce0:	462b      	mov	r3, r5
 8000ce2:	e794      	b.n	8000c0e <__udivmoddi4+0x1da>
 8000ce4:	4640      	mov	r0, r8
 8000ce6:	e7d1      	b.n	8000c8c <__udivmoddi4+0x258>
 8000ce8:	46d0      	mov	r8, sl
 8000cea:	e77b      	b.n	8000be4 <__udivmoddi4+0x1b0>
 8000cec:	3d02      	subs	r5, #2
 8000cee:	4462      	add	r2, ip
 8000cf0:	e732      	b.n	8000b58 <__udivmoddi4+0x124>
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e70a      	b.n	8000b0c <__udivmoddi4+0xd8>
 8000cf6:	4464      	add	r4, ip
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	e742      	b.n	8000b82 <__udivmoddi4+0x14e>

08000cfc <__aeabi_idiv0>:
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop

08000d00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d06:	f000 fd39 	bl	800177c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d0a:	f000 f8af 	bl	8000e6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d0e:	f000 f9fd 	bl	800110c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d12:	f000 f967 	bl	8000fe4 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000d16:	f000 f993 	bl	8001040 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000d1a:	f000 f9c1 	bl	80010a0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000d1e:	f007 fafd 	bl	800831c <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000d22:	f000 f90d 	bl	8000f40 <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000d26:	f007 fb1f 	bl	8008368 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    volatile int data;
    volatile float volt;
      	//float volt, angle;
    RCC->APB2ENR |= 1<<8; //Enable ADC1 clock
 8000d2a:	4b4b      	ldr	r3, [pc, #300]	; (8000e58 <main+0x158>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	4a4a      	ldr	r2, [pc, #296]	; (8000e58 <main+0x158>)
 8000d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d34:	6453      	str	r3, [r2, #68]	; 0x44
    RCC->AHB1ENR |= 1<<0; //GPIOA CLOCK
 8000d36:	4b48      	ldr	r3, [pc, #288]	; (8000e58 <main+0x158>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a47      	ldr	r2, [pc, #284]	; (8000e58 <main+0x158>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30

    ADC->CCR &= ~(3<<8); //PRE SCALER
 8000d42:	4b46      	ldr	r3, [pc, #280]	; (8000e5c <main+0x15c>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	4a45      	ldr	r2, [pc, #276]	; (8000e5c <main+0x15c>)
 8000d48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d4c:	6053      	str	r3, [r2, #4]

    ADC1->CR1 |= 1<<8; //scan mode in CR1
 8000d4e:	4b44      	ldr	r3, [pc, #272]	; (8000e60 <main+0x160>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	4a43      	ldr	r2, [pc, #268]	; (8000e60 <main+0x160>)
 8000d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d58:	6053      	str	r3, [r2, #4]
    ADC1->CR1 &= ~(3<<24); //12 bit resolution in CR1 Reg
 8000d5a:	4b41      	ldr	r3, [pc, #260]	; (8000e60 <main+0x160>)
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	4a40      	ldr	r2, [pc, #256]	; (8000e60 <main+0x160>)
 8000d60:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000d64:	6053      	str	r3, [r2, #4]

    ADC1->CR2 |= 1<<1; // cont convertion ON
 8000d66:	4b3e      	ldr	r3, [pc, #248]	; (8000e60 <main+0x160>)
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	4a3d      	ldr	r2, [pc, #244]	; (8000e60 <main+0x160>)
 8000d6c:	f043 0302 	orr.w	r3, r3, #2
 8000d70:	6093      	str	r3, [r2, #8]
    ADC1->CR2 |= 1<<10; //EOC flag is set
 8000d72:	4b3b      	ldr	r3, [pc, #236]	; (8000e60 <main+0x160>)
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	4a3a      	ldr	r2, [pc, #232]	; (8000e60 <main+0x160>)
 8000d78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d7c:	6093      	str	r3, [r2, #8]
    ADC1->CR2 &= ~(1<<11); //data alignment right
 8000d7e:	4b38      	ldr	r3, [pc, #224]	; (8000e60 <main+0x160>)
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	4a37      	ldr	r2, [pc, #220]	; (8000e60 <main+0x160>)
 8000d84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000d88:	6093      	str	r3, [r2, #8]


    ADC1->SMPR2 &= ~(7<<3); //sampling time 3 ms
 8000d8a:	4b35      	ldr	r3, [pc, #212]	; (8000e60 <main+0x160>)
 8000d8c:	691b      	ldr	r3, [r3, #16]
 8000d8e:	4a34      	ldr	r2, [pc, #208]	; (8000e60 <main+0x160>)
 8000d90:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8000d94:	6113      	str	r3, [r2, #16]
    GPIOA->MODER |= (3<<2); //PA1 pin set to analog Mode
 8000d96:	4b33      	ldr	r3, [pc, #204]	; (8000e64 <main+0x164>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a32      	ldr	r2, [pc, #200]	; (8000e64 <main+0x164>)
 8000d9c:	f043 030c 	orr.w	r3, r3, #12
 8000da0:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1<<0); //PA0 pin set to output mode
 8000da2:	4b30      	ldr	r3, [pc, #192]	; (8000e64 <main+0x164>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a2f      	ldr	r2, [pc, #188]	; (8000e64 <main+0x164>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6013      	str	r3, [r2, #0]
    ADC1->CR2 |= 1<<0; //switching on ADC1
 8000dae:	4b2c      	ldr	r3, [pc, #176]	; (8000e60 <main+0x160>)
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	4a2b      	ldr	r2, [pc, #172]	; (8000e60 <main+0x160>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6093      	str	r3, [r2, #8]

    while(1){
    	ADC1->SQR3 = 0; //clearing sqr3 reg
 8000dba:	4b29      	ldr	r3, [pc, #164]	; (8000e60 <main+0x160>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	635a      	str	r2, [r3, #52]	; 0x34

    	ADC1->SQR3 |= (1<<0); //channel one first to be done
 8000dc0:	4b27      	ldr	r3, [pc, #156]	; (8000e60 <main+0x160>)
 8000dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dc4:	4a26      	ldr	r2, [pc, #152]	; (8000e60 <main+0x160>)
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	6353      	str	r3, [r2, #52]	; 0x34

    	ADC1->SR = 0; //clear SR
 8000dcc:	4b24      	ldr	r3, [pc, #144]	; (8000e60 <main+0x160>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
    	ADC1->CR2 |= (1<<30); //SWSTART BIT in CR2 reg
 8000dd2:	4b23      	ldr	r3, [pc, #140]	; (8000e60 <main+0x160>)
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	4a22      	ldr	r2, [pc, #136]	; (8000e60 <main+0x160>)
 8000dd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000ddc:	6093      	str	r3, [r2, #8]

    	while(!(ADC1->SR && 1<<1));// Wait for convertion
 8000dde:	bf00      	nop
 8000de0:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <main+0x160>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d0fb      	beq.n	8000de0 <main+0xe0>

    	data = ADC1->DR;
 8000de8:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <main+0x160>)
 8000dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dec:	607b      	str	r3, [r7, #4]

    	volt = (double)data/4096 * 3.3;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fb3b 	bl	800046c <__aeabi_i2d>
 8000df6:	f04f 0200 	mov.w	r2, #0
 8000dfa:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <main+0x168>)
 8000dfc:	f7ff fcca 	bl	8000794 <__aeabi_ddiv>
 8000e00:	4602      	mov	r2, r0
 8000e02:	460b      	mov	r3, r1
 8000e04:	4610      	mov	r0, r2
 8000e06:	4619      	mov	r1, r3
 8000e08:	a311      	add	r3, pc, #68	; (adr r3, 8000e50 <main+0x150>)
 8000e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e0e:	f7ff fb97 	bl	8000540 <__aeabi_dmul>
 8000e12:	4602      	mov	r2, r0
 8000e14:	460b      	mov	r3, r1
 8000e16:	4610      	mov	r0, r2
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f7ff fda3 	bl	8000964 <__aeabi_d2f>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	603b      	str	r3, [r7, #0]

    	if(volt > 3.0){
 8000e22:	edd7 7a00 	vldr	s15, [r7]
 8000e26:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000e2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e32:	dd06      	ble.n	8000e42 <main+0x142>
    		GPIOA->ODR |= 1<<0; // ODR bit of pin 1 set high
 8000e34:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <main+0x164>)
 8000e36:	695b      	ldr	r3, [r3, #20]
 8000e38:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <main+0x164>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	6153      	str	r3, [r2, #20]
 8000e40:	e7bb      	b.n	8000dba <main+0xba>
    	}else GPIOA->ODR &= ~(1<<0);
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <main+0x164>)
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	4a07      	ldr	r2, [pc, #28]	; (8000e64 <main+0x164>)
 8000e48:	f023 0301 	bic.w	r3, r3, #1
 8000e4c:	6153      	str	r3, [r2, #20]
    	ADC1->SQR3 = 0; //clearing sqr3 reg
 8000e4e:	e7b4      	b.n	8000dba <main+0xba>
 8000e50:	66666666 	.word	0x66666666
 8000e54:	400a6666 	.word	0x400a6666
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40012300 	.word	0x40012300
 8000e60:	40012000 	.word	0x40012000
 8000e64:	40020000 	.word	0x40020000
 8000e68:	40b00000 	.word	0x40b00000

08000e6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b094      	sub	sp, #80	; 0x50
 8000e70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e72:	f107 0320 	add.w	r3, r7, #32
 8000e76:	2230      	movs	r2, #48	; 0x30
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f007 fe12 	bl	8008aa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e90:	2300      	movs	r3, #0
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	4b28      	ldr	r3, [pc, #160]	; (8000f38 <SystemClock_Config+0xcc>)
 8000e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e98:	4a27      	ldr	r2, [pc, #156]	; (8000f38 <SystemClock_Config+0xcc>)
 8000e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea0:	4b25      	ldr	r3, [pc, #148]	; (8000f38 <SystemClock_Config+0xcc>)
 8000ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eac:	2300      	movs	r3, #0
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	4b22      	ldr	r3, [pc, #136]	; (8000f3c <SystemClock_Config+0xd0>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a21      	ldr	r2, [pc, #132]	; (8000f3c <SystemClock_Config+0xd0>)
 8000eb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eba:	6013      	str	r3, [r2, #0]
 8000ebc:	4b1f      	ldr	r3, [pc, #124]	; (8000f3c <SystemClock_Config+0xd0>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ecc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ed6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000eda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000edc:	2308      	movs	r3, #8
 8000ede:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ee0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ee4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000eea:	2307      	movs	r3, #7
 8000eec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eee:	f107 0320 	add.w	r3, r7, #32
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f003 fbf0 	bl	80046d8 <HAL_RCC_OscConfig>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000efe:	f000 fa15 	bl	800132c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f02:	230f      	movs	r3, #15
 8000f04:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f06:	2302      	movs	r3, #2
 8000f08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f0e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f1a:	f107 030c 	add.w	r3, r7, #12
 8000f1e:	2105      	movs	r1, #5
 8000f20:	4618      	mov	r0, r3
 8000f22:	f003 fe51 	bl	8004bc8 <HAL_RCC_ClockConfig>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f2c:	f000 f9fe 	bl	800132c <Error_Handler>
  }
}
 8000f30:	bf00      	nop
 8000f32:	3750      	adds	r7, #80	; 0x50
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40007000 	.word	0x40007000

08000f40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f46:	463b      	mov	r3, r7
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f52:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000f54:	4a21      	ldr	r2, [pc, #132]	; (8000fdc <MX_ADC1_Init+0x9c>)
 8000f56:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f58:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000f5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f5e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f60:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f66:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f6c:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f72:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f7a:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f80:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000f82:	4a17      	ldr	r2, [pc, #92]	; (8000fe0 <MX_ADC1_Init+0xa0>)
 8000f84:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f86:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fa0:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000fa2:	f000 fc81 	bl	80018a8 <HAL_ADC_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fac:	f000 f9be 	bl	800132c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fbc:	463b      	mov	r3, r7
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <MX_ADC1_Init+0x98>)
 8000fc2:	f000 fcb5 	bl	8001930 <HAL_ADC_ConfigChannel>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fcc:	f000 f9ae 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fd0:	bf00      	nop
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000098 	.word	0x20000098
 8000fdc:	40012000 	.word	0x40012000
 8000fe0:	0f000001 	.word	0x0f000001

08000fe4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <MX_I2C1_Init+0x50>)
 8000fea:	4a13      	ldr	r2, [pc, #76]	; (8001038 <MX_I2C1_Init+0x54>)
 8000fec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <MX_I2C1_Init+0x50>)
 8000ff0:	4a12      	ldr	r2, [pc, #72]	; (800103c <MX_I2C1_Init+0x58>)
 8000ff2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <MX_I2C1_Init+0x50>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <MX_I2C1_Init+0x50>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <MX_I2C1_Init+0x50>)
 8001002:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001006:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001008:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <MX_I2C1_Init+0x50>)
 800100a:	2200      	movs	r2, #0
 800100c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <MX_I2C1_Init+0x50>)
 8001010:	2200      	movs	r2, #0
 8001012:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001014:	4b07      	ldr	r3, [pc, #28]	; (8001034 <MX_I2C1_Init+0x50>)
 8001016:	2200      	movs	r2, #0
 8001018:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <MX_I2C1_Init+0x50>)
 800101c:	2200      	movs	r2, #0
 800101e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001020:	4804      	ldr	r0, [pc, #16]	; (8001034 <MX_I2C1_Init+0x50>)
 8001022:	f002 fd75 	bl	8003b10 <HAL_I2C_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800102c:	f000 f97e 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200000e0 	.word	0x200000e0
 8001038:	40005400 	.word	0x40005400
 800103c:	000186a0 	.word	0x000186a0

08001040 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001044:	4b13      	ldr	r3, [pc, #76]	; (8001094 <MX_I2S3_Init+0x54>)
 8001046:	4a14      	ldr	r2, [pc, #80]	; (8001098 <MX_I2S3_Init+0x58>)
 8001048:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MX_I2S3_Init+0x54>)
 800104c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001050:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <MX_I2S3_Init+0x54>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001058:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <MX_I2S3_Init+0x54>)
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800105e:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <MX_I2S3_Init+0x54>)
 8001060:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001064:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001066:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <MX_I2S3_Init+0x54>)
 8001068:	4a0c      	ldr	r2, [pc, #48]	; (800109c <MX_I2S3_Init+0x5c>)
 800106a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800106c:	4b09      	ldr	r3, [pc, #36]	; (8001094 <MX_I2S3_Init+0x54>)
 800106e:	2200      	movs	r2, #0
 8001070:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001072:	4b08      	ldr	r3, [pc, #32]	; (8001094 <MX_I2S3_Init+0x54>)
 8001074:	2200      	movs	r2, #0
 8001076:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <MX_I2S3_Init+0x54>)
 800107a:	2200      	movs	r2, #0
 800107c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800107e:	4805      	ldr	r0, [pc, #20]	; (8001094 <MX_I2S3_Init+0x54>)
 8001080:	f002 fe8a 	bl	8003d98 <HAL_I2S_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800108a:	f000 f94f 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000134 	.word	0x20000134
 8001098:	40003c00 	.word	0x40003c00
 800109c:	00017700 	.word	0x00017700

080010a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010a4:	4b17      	ldr	r3, [pc, #92]	; (8001104 <MX_SPI1_Init+0x64>)
 80010a6:	4a18      	ldr	r2, [pc, #96]	; (8001108 <MX_SPI1_Init+0x68>)
 80010a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010aa:	4b16      	ldr	r3, [pc, #88]	; (8001104 <MX_SPI1_Init+0x64>)
 80010ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010b2:	4b14      	ldr	r3, [pc, #80]	; (8001104 <MX_SPI1_Init+0x64>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <MX_SPI1_Init+0x64>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <MX_SPI1_Init+0x64>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010c4:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <MX_SPI1_Init+0x64>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <MX_SPI1_Init+0x64>)
 80010cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010d2:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <MX_SPI1_Init+0x64>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010d8:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <MX_SPI1_Init+0x64>)
 80010da:	2200      	movs	r2, #0
 80010dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <MX_SPI1_Init+0x64>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010e4:	4b07      	ldr	r3, [pc, #28]	; (8001104 <MX_SPI1_Init+0x64>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <MX_SPI1_Init+0x64>)
 80010ec:	220a      	movs	r2, #10
 80010ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010f0:	4804      	ldr	r0, [pc, #16]	; (8001104 <MX_SPI1_Init+0x64>)
 80010f2:	f004 f8b5 	bl	8005260 <HAL_SPI_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010fc:	f000 f916 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	2000017c 	.word	0x2000017c
 8001108:	40013000 	.word	0x40013000

0800110c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08c      	sub	sp, #48	; 0x30
 8001110:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001112:	f107 031c 	add.w	r3, r7, #28
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
 8001120:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	61bb      	str	r3, [r7, #24]
 8001126:	4b7b      	ldr	r3, [pc, #492]	; (8001314 <MX_GPIO_Init+0x208>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a7a      	ldr	r2, [pc, #488]	; (8001314 <MX_GPIO_Init+0x208>)
 800112c:	f043 0310 	orr.w	r3, r3, #16
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b78      	ldr	r3, [pc, #480]	; (8001314 <MX_GPIO_Init+0x208>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0310 	and.w	r3, r3, #16
 800113a:	61bb      	str	r3, [r7, #24]
 800113c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	4b74      	ldr	r3, [pc, #464]	; (8001314 <MX_GPIO_Init+0x208>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a73      	ldr	r2, [pc, #460]	; (8001314 <MX_GPIO_Init+0x208>)
 8001148:	f043 0304 	orr.w	r3, r3, #4
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b71      	ldr	r3, [pc, #452]	; (8001314 <MX_GPIO_Init+0x208>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0304 	and.w	r3, r3, #4
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	4b6d      	ldr	r3, [pc, #436]	; (8001314 <MX_GPIO_Init+0x208>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a6c      	ldr	r2, [pc, #432]	; (8001314 <MX_GPIO_Init+0x208>)
 8001164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b6a      	ldr	r3, [pc, #424]	; (8001314 <MX_GPIO_Init+0x208>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	4b66      	ldr	r3, [pc, #408]	; (8001314 <MX_GPIO_Init+0x208>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a65      	ldr	r2, [pc, #404]	; (8001314 <MX_GPIO_Init+0x208>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b63      	ldr	r3, [pc, #396]	; (8001314 <MX_GPIO_Init+0x208>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	4b5f      	ldr	r3, [pc, #380]	; (8001314 <MX_GPIO_Init+0x208>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a5e      	ldr	r2, [pc, #376]	; (8001314 <MX_GPIO_Init+0x208>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b5c      	ldr	r3, [pc, #368]	; (8001314 <MX_GPIO_Init+0x208>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	4b58      	ldr	r3, [pc, #352]	; (8001314 <MX_GPIO_Init+0x208>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a57      	ldr	r2, [pc, #348]	; (8001314 <MX_GPIO_Init+0x208>)
 80011b8:	f043 0308 	orr.w	r3, r3, #8
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b55      	ldr	r3, [pc, #340]	; (8001314 <MX_GPIO_Init+0x208>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0308 	and.w	r3, r3, #8
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2108      	movs	r1, #8
 80011ce:	4852      	ldr	r0, [pc, #328]	; (8001318 <MX_GPIO_Init+0x20c>)
 80011d0:	f001 f87a 	bl	80022c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80011d4:	2201      	movs	r2, #1
 80011d6:	2101      	movs	r1, #1
 80011d8:	4850      	ldr	r0, [pc, #320]	; (800131c <MX_GPIO_Init+0x210>)
 80011da:	f001 f875 	bl	80022c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	2104      	movs	r1, #4
 80011e2:	484f      	ldr	r0, [pc, #316]	; (8001320 <MX_GPIO_Init+0x214>)
 80011e4:	f001 f870 	bl	80022c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80011e8:	2200      	movs	r2, #0
 80011ea:	f24f 0110 	movw	r1, #61456	; 0xf010
 80011ee:	484d      	ldr	r0, [pc, #308]	; (8001324 <MX_GPIO_Init+0x218>)
 80011f0:	f001 f86a 	bl	80022c8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80011f4:	2308      	movs	r3, #8
 80011f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f8:	2301      	movs	r3, #1
 80011fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001204:	f107 031c 	add.w	r3, r7, #28
 8001208:	4619      	mov	r1, r3
 800120a:	4843      	ldr	r0, [pc, #268]	; (8001318 <MX_GPIO_Init+0x20c>)
 800120c:	f000 fec0 	bl	8001f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001210:	2301      	movs	r3, #1
 8001212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001214:	2301      	movs	r3, #1
 8001216:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	2300      	movs	r3, #0
 800121e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001220:	f107 031c 	add.w	r3, r7, #28
 8001224:	4619      	mov	r1, r3
 8001226:	483d      	ldr	r0, [pc, #244]	; (800131c <MX_GPIO_Init+0x210>)
 8001228:	f000 feb2 	bl	8001f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800122c:	2308      	movs	r3, #8
 800122e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800123c:	2305      	movs	r3, #5
 800123e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001240:	f107 031c 	add.w	r3, r7, #28
 8001244:	4619      	mov	r1, r3
 8001246:	4835      	ldr	r0, [pc, #212]	; (800131c <MX_GPIO_Init+0x210>)
 8001248:	f000 fea2 	bl	8001f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800124c:	2301      	movs	r3, #1
 800124e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001250:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001254:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800125a:	f107 031c 	add.w	r3, r7, #28
 800125e:	4619      	mov	r1, r3
 8001260:	482f      	ldr	r0, [pc, #188]	; (8001320 <MX_GPIO_Init+0x214>)
 8001262:	f000 fe95 	bl	8001f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001266:	2304      	movs	r3, #4
 8001268:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126a:	2301      	movs	r3, #1
 800126c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001272:	2300      	movs	r3, #0
 8001274:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001276:	f107 031c 	add.w	r3, r7, #28
 800127a:	4619      	mov	r1, r3
 800127c:	4828      	ldr	r0, [pc, #160]	; (8001320 <MX_GPIO_Init+0x214>)
 800127e:	f000 fe87 	bl	8001f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001282:	2304      	movs	r3, #4
 8001284:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001286:	2300      	movs	r3, #0
 8001288:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800128e:	f107 031c 	add.w	r3, r7, #28
 8001292:	4619      	mov	r1, r3
 8001294:	4824      	ldr	r0, [pc, #144]	; (8001328 <MX_GPIO_Init+0x21c>)
 8001296:	f000 fe7b 	bl	8001f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800129a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800129e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	2302      	movs	r3, #2
 80012a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a8:	2300      	movs	r3, #0
 80012aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012ac:	2305      	movs	r3, #5
 80012ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80012b0:	f107 031c 	add.w	r3, r7, #28
 80012b4:	4619      	mov	r1, r3
 80012b6:	481c      	ldr	r0, [pc, #112]	; (8001328 <MX_GPIO_Init+0x21c>)
 80012b8:	f000 fe6a 	bl	8001f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80012bc:	f24f 0310 	movw	r3, #61456	; 0xf010
 80012c0:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c2:	2301      	movs	r3, #1
 80012c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	4619      	mov	r1, r3
 80012d4:	4813      	ldr	r0, [pc, #76]	; (8001324 <MX_GPIO_Init+0x218>)
 80012d6:	f000 fe5b 	bl	8001f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80012da:	2320      	movs	r3, #32
 80012dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012e6:	f107 031c 	add.w	r3, r7, #28
 80012ea:	4619      	mov	r1, r3
 80012ec:	480d      	ldr	r0, [pc, #52]	; (8001324 <MX_GPIO_Init+0x218>)
 80012ee:	f000 fe4f 	bl	8001f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80012f2:	2302      	movs	r3, #2
 80012f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012f6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80012fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001300:	f107 031c 	add.w	r3, r7, #28
 8001304:	4619      	mov	r1, r3
 8001306:	4804      	ldr	r0, [pc, #16]	; (8001318 <MX_GPIO_Init+0x20c>)
 8001308:	f000 fe42 	bl	8001f90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800130c:	bf00      	nop
 800130e:	3730      	adds	r7, #48	; 0x30
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40023800 	.word	0x40023800
 8001318:	40021000 	.word	0x40021000
 800131c:	40020800 	.word	0x40020800
 8001320:	40020000 	.word	0x40020000
 8001324:	40020c00 	.word	0x40020c00
 8001328:	40020400 	.word	0x40020400

0800132c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001330:	b672      	cpsid	i
}
 8001332:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001334:	e7fe      	b.n	8001334 <Error_Handler+0x8>
	...

08001338 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	4b10      	ldr	r3, [pc, #64]	; (8001384 <HAL_MspInit+0x4c>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	4a0f      	ldr	r2, [pc, #60]	; (8001384 <HAL_MspInit+0x4c>)
 8001348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800134c:	6453      	str	r3, [r2, #68]	; 0x44
 800134e:	4b0d      	ldr	r3, [pc, #52]	; (8001384 <HAL_MspInit+0x4c>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	603b      	str	r3, [r7, #0]
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <HAL_MspInit+0x4c>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	4a08      	ldr	r2, [pc, #32]	; (8001384 <HAL_MspInit+0x4c>)
 8001364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001368:	6413      	str	r3, [r2, #64]	; 0x40
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_MspInit+0x4c>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001372:	603b      	str	r3, [r7, #0]
 8001374:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001376:	2007      	movs	r0, #7
 8001378:	f000 fdc8 	bl	8001f0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40023800 	.word	0x40023800

08001388 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	; 0x28
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a17      	ldr	r2, [pc, #92]	; (8001404 <HAL_ADC_MspInit+0x7c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d127      	bne.n	80013fa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	4b16      	ldr	r3, [pc, #88]	; (8001408 <HAL_ADC_MspInit+0x80>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	4a15      	ldr	r2, [pc, #84]	; (8001408 <HAL_ADC_MspInit+0x80>)
 80013b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ba:	4b13      	ldr	r3, [pc, #76]	; (8001408 <HAL_ADC_MspInit+0x80>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <HAL_ADC_MspInit+0x80>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a0e      	ldr	r2, [pc, #56]	; (8001408 <HAL_ADC_MspInit+0x80>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <HAL_ADC_MspInit+0x80>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013e2:	2302      	movs	r3, #2
 80013e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013e6:	2303      	movs	r3, #3
 80013e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4619      	mov	r1, r3
 80013f4:	4805      	ldr	r0, [pc, #20]	; (800140c <HAL_ADC_MspInit+0x84>)
 80013f6:	f000 fdcb 	bl	8001f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013fa:	bf00      	nop
 80013fc:	3728      	adds	r7, #40	; 0x28
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40012000 	.word	0x40012000
 8001408:	40023800 	.word	0x40023800
 800140c:	40020000 	.word	0x40020000

08001410 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	; 0x28
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a19      	ldr	r2, [pc, #100]	; (8001494 <HAL_I2C_MspInit+0x84>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d12c      	bne.n	800148c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	4b18      	ldr	r3, [pc, #96]	; (8001498 <HAL_I2C_MspInit+0x88>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a17      	ldr	r2, [pc, #92]	; (8001498 <HAL_I2C_MspInit+0x88>)
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_I2C_MspInit+0x88>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800144e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001454:	2312      	movs	r3, #18
 8001456:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001458:	2301      	movs	r3, #1
 800145a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001460:	2304      	movs	r3, #4
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	4619      	mov	r1, r3
 800146a:	480c      	ldr	r0, [pc, #48]	; (800149c <HAL_I2C_MspInit+0x8c>)
 800146c:	f000 fd90 	bl	8001f90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001470:	2300      	movs	r3, #0
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	4b08      	ldr	r3, [pc, #32]	; (8001498 <HAL_I2C_MspInit+0x88>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	4a07      	ldr	r2, [pc, #28]	; (8001498 <HAL_I2C_MspInit+0x88>)
 800147a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800147e:	6413      	str	r3, [r2, #64]	; 0x40
 8001480:	4b05      	ldr	r3, [pc, #20]	; (8001498 <HAL_I2C_MspInit+0x88>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800148c:	bf00      	nop
 800148e:	3728      	adds	r7, #40	; 0x28
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40005400 	.word	0x40005400
 8001498:	40023800 	.word	0x40023800
 800149c:	40020400 	.word	0x40020400

080014a0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08e      	sub	sp, #56	; 0x38
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a31      	ldr	r2, [pc, #196]	; (8001590 <HAL_I2S_MspInit+0xf0>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d15a      	bne.n	8001586 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80014d0:	2301      	movs	r3, #1
 80014d2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80014d4:	23c0      	movs	r3, #192	; 0xc0
 80014d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80014d8:	2302      	movs	r3, #2
 80014da:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4618      	mov	r0, r3
 80014e2:	f003 fd7d 	bl	8004fe0 <HAL_RCCEx_PeriphCLKConfig>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80014ec:	f7ff ff1e 	bl	800132c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80014f0:	2300      	movs	r3, #0
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	4b27      	ldr	r3, [pc, #156]	; (8001594 <HAL_I2S_MspInit+0xf4>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	4a26      	ldr	r2, [pc, #152]	; (8001594 <HAL_I2S_MspInit+0xf4>)
 80014fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001500:	4b24      	ldr	r3, [pc, #144]	; (8001594 <HAL_I2S_MspInit+0xf4>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001508:	613b      	str	r3, [r7, #16]
 800150a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150c:	2300      	movs	r3, #0
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	4b20      	ldr	r3, [pc, #128]	; (8001594 <HAL_I2S_MspInit+0xf4>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001514:	4a1f      	ldr	r2, [pc, #124]	; (8001594 <HAL_I2S_MspInit+0xf4>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6313      	str	r3, [r2, #48]	; 0x30
 800151c:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <HAL_I2S_MspInit+0xf4>)
 800151e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001528:	2300      	movs	r3, #0
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	4b19      	ldr	r3, [pc, #100]	; (8001594 <HAL_I2S_MspInit+0xf4>)
 800152e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001530:	4a18      	ldr	r2, [pc, #96]	; (8001594 <HAL_I2S_MspInit+0xf4>)
 8001532:	f043 0304 	orr.w	r3, r3, #4
 8001536:	6313      	str	r3, [r2, #48]	; 0x30
 8001538:	4b16      	ldr	r3, [pc, #88]	; (8001594 <HAL_I2S_MspInit+0xf4>)
 800153a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153c:	f003 0304 	and.w	r3, r3, #4
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001544:	2310      	movs	r3, #16
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	2302      	movs	r3, #2
 800154a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001554:	2306      	movs	r3, #6
 8001556:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800155c:	4619      	mov	r1, r3
 800155e:	480e      	ldr	r0, [pc, #56]	; (8001598 <HAL_I2S_MspInit+0xf8>)
 8001560:	f000 fd16 	bl	8001f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001564:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001576:	2306      	movs	r3, #6
 8001578:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800157a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157e:	4619      	mov	r1, r3
 8001580:	4806      	ldr	r0, [pc, #24]	; (800159c <HAL_I2S_MspInit+0xfc>)
 8001582:	f000 fd05 	bl	8001f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001586:	bf00      	nop
 8001588:	3738      	adds	r7, #56	; 0x38
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40003c00 	.word	0x40003c00
 8001594:	40023800 	.word	0x40023800
 8001598:	40020000 	.word	0x40020000
 800159c:	40020800 	.word	0x40020800

080015a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08a      	sub	sp, #40	; 0x28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a19      	ldr	r2, [pc, #100]	; (8001624 <HAL_SPI_MspInit+0x84>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d12b      	bne.n	800161a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	613b      	str	r3, [r7, #16]
 80015c6:	4b18      	ldr	r3, [pc, #96]	; (8001628 <HAL_SPI_MspInit+0x88>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	4a17      	ldr	r2, [pc, #92]	; (8001628 <HAL_SPI_MspInit+0x88>)
 80015cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015d0:	6453      	str	r3, [r2, #68]	; 0x44
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <HAL_SPI_MspInit+0x88>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	4b11      	ldr	r3, [pc, #68]	; (8001628 <HAL_SPI_MspInit+0x88>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a10      	ldr	r2, [pc, #64]	; (8001628 <HAL_SPI_MspInit+0x88>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <HAL_SPI_MspInit+0x88>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80015fa:	23e0      	movs	r3, #224	; 0xe0
 80015fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fe:	2302      	movs	r3, #2
 8001600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2300      	movs	r3, #0
 8001608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800160a:	2305      	movs	r3, #5
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	4619      	mov	r1, r3
 8001614:	4805      	ldr	r0, [pc, #20]	; (800162c <HAL_SPI_MspInit+0x8c>)
 8001616:	f000 fcbb 	bl	8001f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800161a:	bf00      	nop
 800161c:	3728      	adds	r7, #40	; 0x28
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40013000 	.word	0x40013000
 8001628:	40023800 	.word	0x40023800
 800162c:	40020000 	.word	0x40020000

08001630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001634:	e7fe      	b.n	8001634 <NMI_Handler+0x4>

08001636 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800163a:	e7fe      	b.n	800163a <HardFault_Handler+0x4>

0800163c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001640:	e7fe      	b.n	8001640 <MemManage_Handler+0x4>

08001642 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001646:	e7fe      	b.n	8001646 <BusFault_Handler+0x4>

08001648 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800164c:	e7fe      	b.n	800164c <UsageFault_Handler+0x4>

0800164e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800167c:	f000 f8d0 	bl	8001820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}

08001684 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001688:	4802      	ldr	r0, [pc, #8]	; (8001694 <OTG_FS_IRQHandler+0x10>)
 800168a:	f001 f8a1 	bl	80027d0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	200005b8 	.word	0x200005b8

08001698 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016a0:	4a14      	ldr	r2, [pc, #80]	; (80016f4 <_sbrk+0x5c>)
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <_sbrk+0x60>)
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016ac:	4b13      	ldr	r3, [pc, #76]	; (80016fc <_sbrk+0x64>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d102      	bne.n	80016ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016b4:	4b11      	ldr	r3, [pc, #68]	; (80016fc <_sbrk+0x64>)
 80016b6:	4a12      	ldr	r2, [pc, #72]	; (8001700 <_sbrk+0x68>)
 80016b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ba:	4b10      	ldr	r3, [pc, #64]	; (80016fc <_sbrk+0x64>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d207      	bcs.n	80016d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016c8:	f007 fa04 	bl	8008ad4 <__errno>
 80016cc:	4603      	mov	r3, r0
 80016ce:	220c      	movs	r2, #12
 80016d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016d2:	f04f 33ff 	mov.w	r3, #4294967295
 80016d6:	e009      	b.n	80016ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016d8:	4b08      	ldr	r3, [pc, #32]	; (80016fc <_sbrk+0x64>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016de:	4b07      	ldr	r3, [pc, #28]	; (80016fc <_sbrk+0x64>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4413      	add	r3, r2
 80016e6:	4a05      	ldr	r2, [pc, #20]	; (80016fc <_sbrk+0x64>)
 80016e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ea:	68fb      	ldr	r3, [r7, #12]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3718      	adds	r7, #24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20020000 	.word	0x20020000
 80016f8:	00000400 	.word	0x00000400
 80016fc:	200001d4 	.word	0x200001d4
 8001700:	20000a08 	.word	0x20000a08

08001704 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <SystemInit+0x20>)
 800170a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800170e:	4a05      	ldr	r2, [pc, #20]	; (8001724 <SystemInit+0x20>)
 8001710:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001714:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8001728:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001760 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800172c:	480d      	ldr	r0, [pc, #52]	; (8001764 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800172e:	490e      	ldr	r1, [pc, #56]	; (8001768 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001730:	4a0e      	ldr	r2, [pc, #56]	; (800176c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001734:	e002      	b.n	800173c <LoopCopyDataInit>

08001736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800173a:	3304      	adds	r3, #4

0800173c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800173c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800173e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001740:	d3f9      	bcc.n	8001736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001742:	4a0b      	ldr	r2, [pc, #44]	; (8001770 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001744:	4c0b      	ldr	r4, [pc, #44]	; (8001774 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001748:	e001      	b.n	800174e <LoopFillZerobss>

0800174a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800174a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800174c:	3204      	adds	r2, #4

0800174e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800174e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001750:	d3fb      	bcc.n	800174a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001752:	f7ff ffd7 	bl	8001704 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001756:	f007 f9c3 	bl	8008ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800175a:	f7ff fad1 	bl	8000d00 <main>
  bx  lr    
 800175e:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8001760:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001768:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800176c:	08008c08 	.word	0x08008c08
  ldr r2, =_sbss
 8001770:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001774:	20000a04 	.word	0x20000a04

08001778 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001778:	e7fe      	b.n	8001778 <ADC_IRQHandler>
	...

0800177c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001780:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <HAL_Init+0x40>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a0d      	ldr	r2, [pc, #52]	; (80017bc <HAL_Init+0x40>)
 8001786:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800178a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800178c:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <HAL_Init+0x40>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <HAL_Init+0x40>)
 8001792:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001796:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <HAL_Init+0x40>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a07      	ldr	r2, [pc, #28]	; (80017bc <HAL_Init+0x40>)
 800179e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a4:	2003      	movs	r0, #3
 80017a6:	f000 fbb1 	bl	8001f0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017aa:	2000      	movs	r0, #0
 80017ac:	f000 f808 	bl	80017c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b0:	f7ff fdc2 	bl	8001338 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40023c00 	.word	0x40023c00

080017c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <HAL_InitTick+0x54>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <HAL_InitTick+0x58>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	4619      	mov	r1, r3
 80017d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017da:	fbb2 f3f3 	udiv	r3, r2, r3
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 fbc9 	bl	8001f76 <HAL_SYSTICK_Config>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e00e      	b.n	800180c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b0f      	cmp	r3, #15
 80017f2:	d80a      	bhi.n	800180a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f4:	2200      	movs	r2, #0
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295
 80017fc:	f000 fb91 	bl	8001f22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001800:	4a06      	ldr	r2, [pc, #24]	; (800181c <HAL_InitTick+0x5c>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001806:	2300      	movs	r3, #0
 8001808:	e000      	b.n	800180c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
}
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000000 	.word	0x20000000
 8001818:	20000008 	.word	0x20000008
 800181c:	20000004 	.word	0x20000004

08001820 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_IncTick+0x20>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_IncTick+0x24>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4413      	add	r3, r2
 8001830:	4a04      	ldr	r2, [pc, #16]	; (8001844 <HAL_IncTick+0x24>)
 8001832:	6013      	str	r3, [r2, #0]
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	20000008 	.word	0x20000008
 8001844:	200001d8 	.word	0x200001d8

08001848 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return uwTick;
 800184c:	4b03      	ldr	r3, [pc, #12]	; (800185c <HAL_GetTick+0x14>)
 800184e:	681b      	ldr	r3, [r3, #0]
}
 8001850:	4618      	mov	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	200001d8 	.word	0x200001d8

08001860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001868:	f7ff ffee 	bl	8001848 <HAL_GetTick>
 800186c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001878:	d005      	beq.n	8001886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800187a:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <HAL_Delay+0x44>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4413      	add	r3, r2
 8001884:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001886:	bf00      	nop
 8001888:	f7ff ffde 	bl	8001848 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	429a      	cmp	r2, r3
 8001896:	d8f7      	bhi.n	8001888 <HAL_Delay+0x28>
  {
  }
}
 8001898:	bf00      	nop
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000008 	.word	0x20000008

080018a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018b0:	2300      	movs	r3, #0
 80018b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e033      	b.n	8001926 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d109      	bne.n	80018da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff fd5e 	bl	8001388 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f003 0310 	and.w	r3, r3, #16
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d118      	bne.n	8001918 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018ee:	f023 0302 	bic.w	r3, r3, #2
 80018f2:	f043 0202 	orr.w	r2, r3, #2
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 f93a 	bl	8001b74 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f023 0303 	bic.w	r3, r3, #3
 800190e:	f043 0201 	orr.w	r2, r3, #1
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	641a      	str	r2, [r3, #64]	; 0x40
 8001916:	e001      	b.n	800191c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001924:	7bfb      	ldrb	r3, [r7, #15]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800193a:	2300      	movs	r3, #0
 800193c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001944:	2b01      	cmp	r3, #1
 8001946:	d101      	bne.n	800194c <HAL_ADC_ConfigChannel+0x1c>
 8001948:	2302      	movs	r3, #2
 800194a:	e105      	b.n	8001b58 <HAL_ADC_ConfigChannel+0x228>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b09      	cmp	r3, #9
 800195a:	d925      	bls.n	80019a8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	68d9      	ldr	r1, [r3, #12]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	b29b      	uxth	r3, r3
 8001968:	461a      	mov	r2, r3
 800196a:	4613      	mov	r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	4413      	add	r3, r2
 8001970:	3b1e      	subs	r3, #30
 8001972:	2207      	movs	r2, #7
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43da      	mvns	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	400a      	ands	r2, r1
 8001980:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	68d9      	ldr	r1, [r3, #12]
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	b29b      	uxth	r3, r3
 8001992:	4618      	mov	r0, r3
 8001994:	4603      	mov	r3, r0
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	4403      	add	r3, r0
 800199a:	3b1e      	subs	r3, #30
 800199c:	409a      	lsls	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	e022      	b.n	80019ee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6919      	ldr	r1, [r3, #16]
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	461a      	mov	r2, r3
 80019b6:	4613      	mov	r3, r2
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	4413      	add	r3, r2
 80019bc:	2207      	movs	r2, #7
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43da      	mvns	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	400a      	ands	r2, r1
 80019ca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6919      	ldr	r1, [r3, #16]
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	689a      	ldr	r2, [r3, #8]
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	4618      	mov	r0, r3
 80019de:	4603      	mov	r3, r0
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	4403      	add	r3, r0
 80019e4:	409a      	lsls	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b06      	cmp	r3, #6
 80019f4:	d824      	bhi.n	8001a40 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	3b05      	subs	r3, #5
 8001a08:	221f      	movs	r2, #31
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	400a      	ands	r2, r1
 8001a16:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	4618      	mov	r0, r3
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	3b05      	subs	r3, #5
 8001a32:	fa00 f203 	lsl.w	r2, r0, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	635a      	str	r2, [r3, #52]	; 0x34
 8001a3e:	e04c      	b.n	8001ada <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b0c      	cmp	r3, #12
 8001a46:	d824      	bhi.n	8001a92 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	4613      	mov	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	3b23      	subs	r3, #35	; 0x23
 8001a5a:	221f      	movs	r2, #31
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43da      	mvns	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	400a      	ands	r2, r1
 8001a68:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	4618      	mov	r0, r3
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	3b23      	subs	r3, #35	; 0x23
 8001a84:	fa00 f203 	lsl.w	r2, r0, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	631a      	str	r2, [r3, #48]	; 0x30
 8001a90:	e023      	b.n	8001ada <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	3b41      	subs	r3, #65	; 0x41
 8001aa4:	221f      	movs	r2, #31
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43da      	mvns	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	400a      	ands	r2, r1
 8001ab2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	3b41      	subs	r3, #65	; 0x41
 8001ace:	fa00 f203 	lsl.w	r2, r0, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ada:	4b22      	ldr	r3, [pc, #136]	; (8001b64 <HAL_ADC_ConfigChannel+0x234>)
 8001adc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a21      	ldr	r2, [pc, #132]	; (8001b68 <HAL_ADC_ConfigChannel+0x238>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d109      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x1cc>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b12      	cmp	r3, #18
 8001aee:	d105      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a19      	ldr	r2, [pc, #100]	; (8001b68 <HAL_ADC_ConfigChannel+0x238>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d123      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x21e>
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2b10      	cmp	r3, #16
 8001b0c:	d003      	beq.n	8001b16 <HAL_ADC_ConfigChannel+0x1e6>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b11      	cmp	r3, #17
 8001b14:	d11b      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2b10      	cmp	r3, #16
 8001b28:	d111      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b2a:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <HAL_ADC_ConfigChannel+0x23c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a10      	ldr	r2, [pc, #64]	; (8001b70 <HAL_ADC_ConfigChannel+0x240>)
 8001b30:	fba2 2303 	umull	r2, r3, r2, r3
 8001b34:	0c9a      	lsrs	r2, r3, #18
 8001b36:	4613      	mov	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b40:	e002      	b.n	8001b48 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	3b01      	subs	r3, #1
 8001b46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f9      	bne.n	8001b42 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	40012300 	.word	0x40012300
 8001b68:	40012000 	.word	0x40012000
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	431bde83 	.word	0x431bde83

08001b74 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b7c:	4b79      	ldr	r3, [pc, #484]	; (8001d64 <ADC_Init+0x1f0>)
 8001b7e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	431a      	orrs	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ba8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6859      	ldr	r1, [r3, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	021a      	lsls	r2, r3, #8
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001bcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6859      	ldr	r1, [r3, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6899      	ldr	r1, [r3, #8]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68da      	ldr	r2, [r3, #12]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c06:	4a58      	ldr	r2, [pc, #352]	; (8001d68 <ADC_Init+0x1f4>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d022      	beq.n	8001c52 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6899      	ldr	r1, [r3, #8]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6899      	ldr	r1, [r3, #8]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	e00f      	b.n	8001c72 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c70:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 0202 	bic.w	r2, r2, #2
 8001c80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6899      	ldr	r1, [r3, #8]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	7e1b      	ldrb	r3, [r3, #24]
 8001c8c:	005a      	lsls	r2, r3, #1
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d01b      	beq.n	8001cd8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	685a      	ldr	r2, [r3, #4]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001cbe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6859      	ldr	r1, [r3, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	035a      	lsls	r2, r3, #13
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	e007      	b.n	8001ce8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ce6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001cf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	051a      	lsls	r2, r3, #20
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6899      	ldr	r1, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d2a:	025a      	lsls	r2, r3, #9
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	430a      	orrs	r2, r1
 8001d32:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689a      	ldr	r2, [r3, #8]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6899      	ldr	r1, [r3, #8]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	029a      	lsls	r2, r3, #10
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	609a      	str	r2, [r3, #8]
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	40012300 	.word	0x40012300
 8001d68:	0f000001 	.word	0x0f000001

08001d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d88:	4013      	ands	r3, r2
 8001d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d9e:	4a04      	ldr	r2, [pc, #16]	; (8001db0 <__NVIC_SetPriorityGrouping+0x44>)
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	60d3      	str	r3, [r2, #12]
}
 8001da4:	bf00      	nop
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db8:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <__NVIC_GetPriorityGrouping+0x18>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	0a1b      	lsrs	r3, r3, #8
 8001dbe:	f003 0307 	and.w	r3, r3, #7
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	db0b      	blt.n	8001dfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	f003 021f 	and.w	r2, r3, #31
 8001de8:	4907      	ldr	r1, [pc, #28]	; (8001e08 <__NVIC_EnableIRQ+0x38>)
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	095b      	lsrs	r3, r3, #5
 8001df0:	2001      	movs	r0, #1
 8001df2:	fa00 f202 	lsl.w	r2, r0, r2
 8001df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	e000e100 	.word	0xe000e100

08001e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	6039      	str	r1, [r7, #0]
 8001e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	db0a      	blt.n	8001e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	490c      	ldr	r1, [pc, #48]	; (8001e58 <__NVIC_SetPriority+0x4c>)
 8001e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2a:	0112      	lsls	r2, r2, #4
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	440b      	add	r3, r1
 8001e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e34:	e00a      	b.n	8001e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	4908      	ldr	r1, [pc, #32]	; (8001e5c <__NVIC_SetPriority+0x50>)
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	3b04      	subs	r3, #4
 8001e44:	0112      	lsls	r2, r2, #4
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	440b      	add	r3, r1
 8001e4a:	761a      	strb	r2, [r3, #24]
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	e000e100 	.word	0xe000e100
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b089      	sub	sp, #36	; 0x24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f1c3 0307 	rsb	r3, r3, #7
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	bf28      	it	cs
 8001e7e:	2304      	movcs	r3, #4
 8001e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3304      	adds	r3, #4
 8001e86:	2b06      	cmp	r3, #6
 8001e88:	d902      	bls.n	8001e90 <NVIC_EncodePriority+0x30>
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3b03      	subs	r3, #3
 8001e8e:	e000      	b.n	8001e92 <NVIC_EncodePriority+0x32>
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e94:	f04f 32ff 	mov.w	r2, #4294967295
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43da      	mvns	r2, r3
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	401a      	ands	r2, r3
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb2:	43d9      	mvns	r1, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb8:	4313      	orrs	r3, r2
         );
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3724      	adds	r7, #36	; 0x24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ed8:	d301      	bcc.n	8001ede <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eda:	2301      	movs	r3, #1
 8001edc:	e00f      	b.n	8001efe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ede:	4a0a      	ldr	r2, [pc, #40]	; (8001f08 <SysTick_Config+0x40>)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ee6:	210f      	movs	r1, #15
 8001ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eec:	f7ff ff8e 	bl	8001e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <SysTick_Config+0x40>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ef6:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <SysTick_Config+0x40>)
 8001ef8:	2207      	movs	r2, #7
 8001efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	e000e010 	.word	0xe000e010

08001f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff ff29 	bl	8001d6c <__NVIC_SetPriorityGrouping>
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b086      	sub	sp, #24
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	4603      	mov	r3, r0
 8001f2a:	60b9      	str	r1, [r7, #8]
 8001f2c:	607a      	str	r2, [r7, #4]
 8001f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f34:	f7ff ff3e 	bl	8001db4 <__NVIC_GetPriorityGrouping>
 8001f38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	68b9      	ldr	r1, [r7, #8]
 8001f3e:	6978      	ldr	r0, [r7, #20]
 8001f40:	f7ff ff8e 	bl	8001e60 <NVIC_EncodePriority>
 8001f44:	4602      	mov	r2, r0
 8001f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff ff5d 	bl	8001e0c <__NVIC_SetPriority>
}
 8001f52:	bf00      	nop
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	4603      	mov	r3, r0
 8001f62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ff31 	bl	8001dd0 <__NVIC_EnableIRQ>
}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff ffa2 	bl	8001ec8 <SysTick_Config>
 8001f84:	4603      	mov	r3, r0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
	...

08001f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b089      	sub	sp, #36	; 0x24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
 8001faa:	e16b      	b.n	8002284 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fac:	2201      	movs	r2, #1
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	f040 815a 	bne.w	800227e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d005      	beq.n	8001fe2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d130      	bne.n	8002044 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	2203      	movs	r2, #3
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4313      	orrs	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002018:	2201      	movs	r2, #1
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	091b      	lsrs	r3, r3, #4
 800202e:	f003 0201 	and.w	r2, r3, #1
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	2b03      	cmp	r3, #3
 800204e:	d017      	beq.n	8002080 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	2203      	movs	r2, #3
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d123      	bne.n	80020d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	08da      	lsrs	r2, r3, #3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3208      	adds	r2, #8
 8002094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002098:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	220f      	movs	r2, #15
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	691a      	ldr	r2, [r3, #16]
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	08da      	lsrs	r2, r3, #3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3208      	adds	r2, #8
 80020ce:	69b9      	ldr	r1, [r7, #24]
 80020d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	2203      	movs	r2, #3
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0203 	and.w	r2, r3, #3
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 80b4 	beq.w	800227e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	4b60      	ldr	r3, [pc, #384]	; (800229c <HAL_GPIO_Init+0x30c>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211e:	4a5f      	ldr	r2, [pc, #380]	; (800229c <HAL_GPIO_Init+0x30c>)
 8002120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002124:	6453      	str	r3, [r2, #68]	; 0x44
 8002126:	4b5d      	ldr	r3, [pc, #372]	; (800229c <HAL_GPIO_Init+0x30c>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002132:	4a5b      	ldr	r2, [pc, #364]	; (80022a0 <HAL_GPIO_Init+0x310>)
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	089b      	lsrs	r3, r3, #2
 8002138:	3302      	adds	r3, #2
 800213a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f003 0303 	and.w	r3, r3, #3
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	220f      	movs	r2, #15
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4013      	ands	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a52      	ldr	r2, [pc, #328]	; (80022a4 <HAL_GPIO_Init+0x314>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d02b      	beq.n	80021b6 <HAL_GPIO_Init+0x226>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a51      	ldr	r2, [pc, #324]	; (80022a8 <HAL_GPIO_Init+0x318>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d025      	beq.n	80021b2 <HAL_GPIO_Init+0x222>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a50      	ldr	r2, [pc, #320]	; (80022ac <HAL_GPIO_Init+0x31c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d01f      	beq.n	80021ae <HAL_GPIO_Init+0x21e>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a4f      	ldr	r2, [pc, #316]	; (80022b0 <HAL_GPIO_Init+0x320>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d019      	beq.n	80021aa <HAL_GPIO_Init+0x21a>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a4e      	ldr	r2, [pc, #312]	; (80022b4 <HAL_GPIO_Init+0x324>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d013      	beq.n	80021a6 <HAL_GPIO_Init+0x216>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a4d      	ldr	r2, [pc, #308]	; (80022b8 <HAL_GPIO_Init+0x328>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d00d      	beq.n	80021a2 <HAL_GPIO_Init+0x212>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a4c      	ldr	r2, [pc, #304]	; (80022bc <HAL_GPIO_Init+0x32c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d007      	beq.n	800219e <HAL_GPIO_Init+0x20e>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a4b      	ldr	r2, [pc, #300]	; (80022c0 <HAL_GPIO_Init+0x330>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d101      	bne.n	800219a <HAL_GPIO_Init+0x20a>
 8002196:	2307      	movs	r3, #7
 8002198:	e00e      	b.n	80021b8 <HAL_GPIO_Init+0x228>
 800219a:	2308      	movs	r3, #8
 800219c:	e00c      	b.n	80021b8 <HAL_GPIO_Init+0x228>
 800219e:	2306      	movs	r3, #6
 80021a0:	e00a      	b.n	80021b8 <HAL_GPIO_Init+0x228>
 80021a2:	2305      	movs	r3, #5
 80021a4:	e008      	b.n	80021b8 <HAL_GPIO_Init+0x228>
 80021a6:	2304      	movs	r3, #4
 80021a8:	e006      	b.n	80021b8 <HAL_GPIO_Init+0x228>
 80021aa:	2303      	movs	r3, #3
 80021ac:	e004      	b.n	80021b8 <HAL_GPIO_Init+0x228>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e002      	b.n	80021b8 <HAL_GPIO_Init+0x228>
 80021b2:	2301      	movs	r3, #1
 80021b4:	e000      	b.n	80021b8 <HAL_GPIO_Init+0x228>
 80021b6:	2300      	movs	r3, #0
 80021b8:	69fa      	ldr	r2, [r7, #28]
 80021ba:	f002 0203 	and.w	r2, r2, #3
 80021be:	0092      	lsls	r2, r2, #2
 80021c0:	4093      	lsls	r3, r2
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021c8:	4935      	ldr	r1, [pc, #212]	; (80022a0 <HAL_GPIO_Init+0x310>)
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	089b      	lsrs	r3, r3, #2
 80021ce:	3302      	adds	r3, #2
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021d6:	4b3b      	ldr	r3, [pc, #236]	; (80022c4 <HAL_GPIO_Init+0x334>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	43db      	mvns	r3, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4013      	ands	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021fa:	4a32      	ldr	r2, [pc, #200]	; (80022c4 <HAL_GPIO_Init+0x334>)
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002200:	4b30      	ldr	r3, [pc, #192]	; (80022c4 <HAL_GPIO_Init+0x334>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002224:	4a27      	ldr	r2, [pc, #156]	; (80022c4 <HAL_GPIO_Init+0x334>)
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800222a:	4b26      	ldr	r3, [pc, #152]	; (80022c4 <HAL_GPIO_Init+0x334>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	43db      	mvns	r3, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4013      	ands	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800224e:	4a1d      	ldr	r2, [pc, #116]	; (80022c4 <HAL_GPIO_Init+0x334>)
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002254:	4b1b      	ldr	r3, [pc, #108]	; (80022c4 <HAL_GPIO_Init+0x334>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4313      	orrs	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002278:	4a12      	ldr	r2, [pc, #72]	; (80022c4 <HAL_GPIO_Init+0x334>)
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3301      	adds	r3, #1
 8002282:	61fb      	str	r3, [r7, #28]
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	2b0f      	cmp	r3, #15
 8002288:	f67f ae90 	bls.w	8001fac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800228c:	bf00      	nop
 800228e:	bf00      	nop
 8002290:	3724      	adds	r7, #36	; 0x24
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40023800 	.word	0x40023800
 80022a0:	40013800 	.word	0x40013800
 80022a4:	40020000 	.word	0x40020000
 80022a8:	40020400 	.word	0x40020400
 80022ac:	40020800 	.word	0x40020800
 80022b0:	40020c00 	.word	0x40020c00
 80022b4:	40021000 	.word	0x40021000
 80022b8:	40021400 	.word	0x40021400
 80022bc:	40021800 	.word	0x40021800
 80022c0:	40021c00 	.word	0x40021c00
 80022c4:	40013c00 	.word	0x40013c00

080022c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	807b      	strh	r3, [r7, #2]
 80022d4:	4613      	mov	r3, r2
 80022d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022d8:	787b      	ldrb	r3, [r7, #1]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022de:	887a      	ldrh	r2, [r7, #2]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022e4:	e003      	b.n	80022ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022e6:	887b      	ldrh	r3, [r7, #2]
 80022e8:	041a      	lsls	r2, r3, #16
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	619a      	str	r2, [r3, #24]
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80022fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022fc:	b08f      	sub	sp, #60	; 0x3c
 80022fe:	af0a      	add	r7, sp, #40	; 0x28
 8002300:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e054      	b.n	80023b6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d106      	bne.n	800232c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f006 f856 	bl	80083d8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2203      	movs	r2, #3
 8002330:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233c:	2b00      	cmp	r3, #0
 800233e:	d102      	bne.n	8002346 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f003 f883 	bl	8005456 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	603b      	str	r3, [r7, #0]
 8002356:	687e      	ldr	r6, [r7, #4]
 8002358:	466d      	mov	r5, sp
 800235a:	f106 0410 	add.w	r4, r6, #16
 800235e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002360:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002362:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002364:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002366:	e894 0003 	ldmia.w	r4, {r0, r1}
 800236a:	e885 0003 	stmia.w	r5, {r0, r1}
 800236e:	1d33      	adds	r3, r6, #4
 8002370:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002372:	6838      	ldr	r0, [r7, #0]
 8002374:	f002 fffd 	bl	8005372 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2101      	movs	r1, #1
 800237e:	4618      	mov	r0, r3
 8002380:	f003 f87a 	bl	8005478 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	603b      	str	r3, [r7, #0]
 800238a:	687e      	ldr	r6, [r7, #4]
 800238c:	466d      	mov	r5, sp
 800238e:	f106 0410 	add.w	r4, r6, #16
 8002392:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002394:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002396:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002398:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800239a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800239e:	e885 0003 	stmia.w	r5, {r0, r1}
 80023a2:	1d33      	adds	r3, r6, #4
 80023a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023a6:	6838      	ldr	r0, [r7, #0]
 80023a8:	f003 fa02 	bl	80057b0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023be <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80023be:	b590      	push	{r4, r7, lr}
 80023c0:	b089      	sub	sp, #36	; 0x24
 80023c2:	af04      	add	r7, sp, #16
 80023c4:	6078      	str	r0, [r7, #4]
 80023c6:	4608      	mov	r0, r1
 80023c8:	4611      	mov	r1, r2
 80023ca:	461a      	mov	r2, r3
 80023cc:	4603      	mov	r3, r0
 80023ce:	70fb      	strb	r3, [r7, #3]
 80023d0:	460b      	mov	r3, r1
 80023d2:	70bb      	strb	r3, [r7, #2]
 80023d4:	4613      	mov	r3, r2
 80023d6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d101      	bne.n	80023e6 <HAL_HCD_HC_Init+0x28>
 80023e2:	2302      	movs	r3, #2
 80023e4:	e076      	b.n	80024d4 <HAL_HCD_HC_Init+0x116>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80023ee:	78fb      	ldrb	r3, [r7, #3]
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	212c      	movs	r1, #44	; 0x2c
 80023f4:	fb01 f303 	mul.w	r3, r1, r3
 80023f8:	4413      	add	r3, r2
 80023fa:	333d      	adds	r3, #61	; 0x3d
 80023fc:	2200      	movs	r2, #0
 80023fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002400:	78fb      	ldrb	r3, [r7, #3]
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	212c      	movs	r1, #44	; 0x2c
 8002406:	fb01 f303 	mul.w	r3, r1, r3
 800240a:	4413      	add	r3, r2
 800240c:	3338      	adds	r3, #56	; 0x38
 800240e:	787a      	ldrb	r2, [r7, #1]
 8002410:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002412:	78fb      	ldrb	r3, [r7, #3]
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	212c      	movs	r1, #44	; 0x2c
 8002418:	fb01 f303 	mul.w	r3, r1, r3
 800241c:	4413      	add	r3, r2
 800241e:	3340      	adds	r3, #64	; 0x40
 8002420:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002422:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002424:	78fb      	ldrb	r3, [r7, #3]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	212c      	movs	r1, #44	; 0x2c
 800242a:	fb01 f303 	mul.w	r3, r1, r3
 800242e:	4413      	add	r3, r2
 8002430:	3339      	adds	r3, #57	; 0x39
 8002432:	78fa      	ldrb	r2, [r7, #3]
 8002434:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002436:	78fb      	ldrb	r3, [r7, #3]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	212c      	movs	r1, #44	; 0x2c
 800243c:	fb01 f303 	mul.w	r3, r1, r3
 8002440:	4413      	add	r3, r2
 8002442:	333f      	adds	r3, #63	; 0x3f
 8002444:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002448:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800244a:	78fb      	ldrb	r3, [r7, #3]
 800244c:	78ba      	ldrb	r2, [r7, #2]
 800244e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002452:	b2d0      	uxtb	r0, r2
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	212c      	movs	r1, #44	; 0x2c
 8002458:	fb01 f303 	mul.w	r3, r1, r3
 800245c:	4413      	add	r3, r2
 800245e:	333a      	adds	r3, #58	; 0x3a
 8002460:	4602      	mov	r2, r0
 8002462:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002464:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002468:	2b00      	cmp	r3, #0
 800246a:	da09      	bge.n	8002480 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800246c:	78fb      	ldrb	r3, [r7, #3]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	212c      	movs	r1, #44	; 0x2c
 8002472:	fb01 f303 	mul.w	r3, r1, r3
 8002476:	4413      	add	r3, r2
 8002478:	333b      	adds	r3, #59	; 0x3b
 800247a:	2201      	movs	r2, #1
 800247c:	701a      	strb	r2, [r3, #0]
 800247e:	e008      	b.n	8002492 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002480:	78fb      	ldrb	r3, [r7, #3]
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	212c      	movs	r1, #44	; 0x2c
 8002486:	fb01 f303 	mul.w	r3, r1, r3
 800248a:	4413      	add	r3, r2
 800248c:	333b      	adds	r3, #59	; 0x3b
 800248e:	2200      	movs	r2, #0
 8002490:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002492:	78fb      	ldrb	r3, [r7, #3]
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	212c      	movs	r1, #44	; 0x2c
 8002498:	fb01 f303 	mul.w	r3, r1, r3
 800249c:	4413      	add	r3, r2
 800249e:	333c      	adds	r3, #60	; 0x3c
 80024a0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80024a4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6818      	ldr	r0, [r3, #0]
 80024aa:	787c      	ldrb	r4, [r7, #1]
 80024ac:	78ba      	ldrb	r2, [r7, #2]
 80024ae:	78f9      	ldrb	r1, [r7, #3]
 80024b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80024b2:	9302      	str	r3, [sp, #8]
 80024b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80024b8:	9301      	str	r3, [sp, #4]
 80024ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	4623      	mov	r3, r4
 80024c2:	f003 fafb 	bl	8005abc <USB_HC_Init>
 80024c6:	4603      	mov	r3, r0
 80024c8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd90      	pop	{r4, r7, pc}

080024dc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d101      	bne.n	80024fa <HAL_HCD_HC_Halt+0x1e>
 80024f6:	2302      	movs	r3, #2
 80024f8:	e00f      	b.n	800251a <HAL_HCD_HC_Halt+0x3e>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	78fa      	ldrb	r2, [r7, #3]
 8002508:	4611      	mov	r1, r2
 800250a:	4618      	mov	r0, r3
 800250c:	f003 fd4b 	bl	8005fa6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002518:	7bfb      	ldrb	r3, [r7, #15]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
	...

08002524 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	4608      	mov	r0, r1
 800252e:	4611      	mov	r1, r2
 8002530:	461a      	mov	r2, r3
 8002532:	4603      	mov	r3, r0
 8002534:	70fb      	strb	r3, [r7, #3]
 8002536:	460b      	mov	r3, r1
 8002538:	70bb      	strb	r3, [r7, #2]
 800253a:	4613      	mov	r3, r2
 800253c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800253e:	78fb      	ldrb	r3, [r7, #3]
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	212c      	movs	r1, #44	; 0x2c
 8002544:	fb01 f303 	mul.w	r3, r1, r3
 8002548:	4413      	add	r3, r2
 800254a:	333b      	adds	r3, #59	; 0x3b
 800254c:	78ba      	ldrb	r2, [r7, #2]
 800254e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002550:	78fb      	ldrb	r3, [r7, #3]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	212c      	movs	r1, #44	; 0x2c
 8002556:	fb01 f303 	mul.w	r3, r1, r3
 800255a:	4413      	add	r3, r2
 800255c:	333f      	adds	r3, #63	; 0x3f
 800255e:	787a      	ldrb	r2, [r7, #1]
 8002560:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002562:	7c3b      	ldrb	r3, [r7, #16]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d112      	bne.n	800258e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002568:	78fb      	ldrb	r3, [r7, #3]
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	212c      	movs	r1, #44	; 0x2c
 800256e:	fb01 f303 	mul.w	r3, r1, r3
 8002572:	4413      	add	r3, r2
 8002574:	3342      	adds	r3, #66	; 0x42
 8002576:	2203      	movs	r2, #3
 8002578:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800257a:	78fb      	ldrb	r3, [r7, #3]
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	212c      	movs	r1, #44	; 0x2c
 8002580:	fb01 f303 	mul.w	r3, r1, r3
 8002584:	4413      	add	r3, r2
 8002586:	333d      	adds	r3, #61	; 0x3d
 8002588:	7f3a      	ldrb	r2, [r7, #28]
 800258a:	701a      	strb	r2, [r3, #0]
 800258c:	e008      	b.n	80025a0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800258e:	78fb      	ldrb	r3, [r7, #3]
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	212c      	movs	r1, #44	; 0x2c
 8002594:	fb01 f303 	mul.w	r3, r1, r3
 8002598:	4413      	add	r3, r2
 800259a:	3342      	adds	r3, #66	; 0x42
 800259c:	2202      	movs	r2, #2
 800259e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80025a0:	787b      	ldrb	r3, [r7, #1]
 80025a2:	2b03      	cmp	r3, #3
 80025a4:	f200 80c6 	bhi.w	8002734 <HAL_HCD_HC_SubmitRequest+0x210>
 80025a8:	a201      	add	r2, pc, #4	; (adr r2, 80025b0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80025aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ae:	bf00      	nop
 80025b0:	080025c1 	.word	0x080025c1
 80025b4:	08002721 	.word	0x08002721
 80025b8:	08002625 	.word	0x08002625
 80025bc:	080026a3 	.word	0x080026a3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80025c0:	7c3b      	ldrb	r3, [r7, #16]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	f040 80b8 	bne.w	8002738 <HAL_HCD_HC_SubmitRequest+0x214>
 80025c8:	78bb      	ldrb	r3, [r7, #2]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f040 80b4 	bne.w	8002738 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80025d0:	8b3b      	ldrh	r3, [r7, #24]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d108      	bne.n	80025e8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80025d6:	78fb      	ldrb	r3, [r7, #3]
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	212c      	movs	r1, #44	; 0x2c
 80025dc:	fb01 f303 	mul.w	r3, r1, r3
 80025e0:	4413      	add	r3, r2
 80025e2:	3355      	adds	r3, #85	; 0x55
 80025e4:	2201      	movs	r2, #1
 80025e6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80025e8:	78fb      	ldrb	r3, [r7, #3]
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	212c      	movs	r1, #44	; 0x2c
 80025ee:	fb01 f303 	mul.w	r3, r1, r3
 80025f2:	4413      	add	r3, r2
 80025f4:	3355      	adds	r3, #85	; 0x55
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d109      	bne.n	8002610 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025fc:	78fb      	ldrb	r3, [r7, #3]
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	212c      	movs	r1, #44	; 0x2c
 8002602:	fb01 f303 	mul.w	r3, r1, r3
 8002606:	4413      	add	r3, r2
 8002608:	3342      	adds	r3, #66	; 0x42
 800260a:	2200      	movs	r2, #0
 800260c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800260e:	e093      	b.n	8002738 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002610:	78fb      	ldrb	r3, [r7, #3]
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	212c      	movs	r1, #44	; 0x2c
 8002616:	fb01 f303 	mul.w	r3, r1, r3
 800261a:	4413      	add	r3, r2
 800261c:	3342      	adds	r3, #66	; 0x42
 800261e:	2202      	movs	r2, #2
 8002620:	701a      	strb	r2, [r3, #0]
      break;
 8002622:	e089      	b.n	8002738 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002624:	78bb      	ldrb	r3, [r7, #2]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d11d      	bne.n	8002666 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800262a:	78fb      	ldrb	r3, [r7, #3]
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	212c      	movs	r1, #44	; 0x2c
 8002630:	fb01 f303 	mul.w	r3, r1, r3
 8002634:	4413      	add	r3, r2
 8002636:	3355      	adds	r3, #85	; 0x55
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d109      	bne.n	8002652 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800263e:	78fb      	ldrb	r3, [r7, #3]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	212c      	movs	r1, #44	; 0x2c
 8002644:	fb01 f303 	mul.w	r3, r1, r3
 8002648:	4413      	add	r3, r2
 800264a:	3342      	adds	r3, #66	; 0x42
 800264c:	2200      	movs	r2, #0
 800264e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002650:	e073      	b.n	800273a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002652:	78fb      	ldrb	r3, [r7, #3]
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	212c      	movs	r1, #44	; 0x2c
 8002658:	fb01 f303 	mul.w	r3, r1, r3
 800265c:	4413      	add	r3, r2
 800265e:	3342      	adds	r3, #66	; 0x42
 8002660:	2202      	movs	r2, #2
 8002662:	701a      	strb	r2, [r3, #0]
      break;
 8002664:	e069      	b.n	800273a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002666:	78fb      	ldrb	r3, [r7, #3]
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	212c      	movs	r1, #44	; 0x2c
 800266c:	fb01 f303 	mul.w	r3, r1, r3
 8002670:	4413      	add	r3, r2
 8002672:	3354      	adds	r3, #84	; 0x54
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d109      	bne.n	800268e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800267a:	78fb      	ldrb	r3, [r7, #3]
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	212c      	movs	r1, #44	; 0x2c
 8002680:	fb01 f303 	mul.w	r3, r1, r3
 8002684:	4413      	add	r3, r2
 8002686:	3342      	adds	r3, #66	; 0x42
 8002688:	2200      	movs	r2, #0
 800268a:	701a      	strb	r2, [r3, #0]
      break;
 800268c:	e055      	b.n	800273a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800268e:	78fb      	ldrb	r3, [r7, #3]
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	212c      	movs	r1, #44	; 0x2c
 8002694:	fb01 f303 	mul.w	r3, r1, r3
 8002698:	4413      	add	r3, r2
 800269a:	3342      	adds	r3, #66	; 0x42
 800269c:	2202      	movs	r2, #2
 800269e:	701a      	strb	r2, [r3, #0]
      break;
 80026a0:	e04b      	b.n	800273a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80026a2:	78bb      	ldrb	r3, [r7, #2]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d11d      	bne.n	80026e4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80026a8:	78fb      	ldrb	r3, [r7, #3]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	212c      	movs	r1, #44	; 0x2c
 80026ae:	fb01 f303 	mul.w	r3, r1, r3
 80026b2:	4413      	add	r3, r2
 80026b4:	3355      	adds	r3, #85	; 0x55
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d109      	bne.n	80026d0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026bc:	78fb      	ldrb	r3, [r7, #3]
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	212c      	movs	r1, #44	; 0x2c
 80026c2:	fb01 f303 	mul.w	r3, r1, r3
 80026c6:	4413      	add	r3, r2
 80026c8:	3342      	adds	r3, #66	; 0x42
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80026ce:	e034      	b.n	800273a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026d0:	78fb      	ldrb	r3, [r7, #3]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	212c      	movs	r1, #44	; 0x2c
 80026d6:	fb01 f303 	mul.w	r3, r1, r3
 80026da:	4413      	add	r3, r2
 80026dc:	3342      	adds	r3, #66	; 0x42
 80026de:	2202      	movs	r2, #2
 80026e0:	701a      	strb	r2, [r3, #0]
      break;
 80026e2:	e02a      	b.n	800273a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	212c      	movs	r1, #44	; 0x2c
 80026ea:	fb01 f303 	mul.w	r3, r1, r3
 80026ee:	4413      	add	r3, r2
 80026f0:	3354      	adds	r3, #84	; 0x54
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d109      	bne.n	800270c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026f8:	78fb      	ldrb	r3, [r7, #3]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	212c      	movs	r1, #44	; 0x2c
 80026fe:	fb01 f303 	mul.w	r3, r1, r3
 8002702:	4413      	add	r3, r2
 8002704:	3342      	adds	r3, #66	; 0x42
 8002706:	2200      	movs	r2, #0
 8002708:	701a      	strb	r2, [r3, #0]
      break;
 800270a:	e016      	b.n	800273a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800270c:	78fb      	ldrb	r3, [r7, #3]
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	212c      	movs	r1, #44	; 0x2c
 8002712:	fb01 f303 	mul.w	r3, r1, r3
 8002716:	4413      	add	r3, r2
 8002718:	3342      	adds	r3, #66	; 0x42
 800271a:	2202      	movs	r2, #2
 800271c:	701a      	strb	r2, [r3, #0]
      break;
 800271e:	e00c      	b.n	800273a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	212c      	movs	r1, #44	; 0x2c
 8002726:	fb01 f303 	mul.w	r3, r1, r3
 800272a:	4413      	add	r3, r2
 800272c:	3342      	adds	r3, #66	; 0x42
 800272e:	2200      	movs	r2, #0
 8002730:	701a      	strb	r2, [r3, #0]
      break;
 8002732:	e002      	b.n	800273a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002734:	bf00      	nop
 8002736:	e000      	b.n	800273a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002738:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800273a:	78fb      	ldrb	r3, [r7, #3]
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	212c      	movs	r1, #44	; 0x2c
 8002740:	fb01 f303 	mul.w	r3, r1, r3
 8002744:	4413      	add	r3, r2
 8002746:	3344      	adds	r3, #68	; 0x44
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800274c:	78fb      	ldrb	r3, [r7, #3]
 800274e:	8b3a      	ldrh	r2, [r7, #24]
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	202c      	movs	r0, #44	; 0x2c
 8002754:	fb00 f303 	mul.w	r3, r0, r3
 8002758:	440b      	add	r3, r1
 800275a:	334c      	adds	r3, #76	; 0x4c
 800275c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800275e:	78fb      	ldrb	r3, [r7, #3]
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	212c      	movs	r1, #44	; 0x2c
 8002764:	fb01 f303 	mul.w	r3, r1, r3
 8002768:	4413      	add	r3, r2
 800276a:	3360      	adds	r3, #96	; 0x60
 800276c:	2200      	movs	r2, #0
 800276e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002770:	78fb      	ldrb	r3, [r7, #3]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	212c      	movs	r1, #44	; 0x2c
 8002776:	fb01 f303 	mul.w	r3, r1, r3
 800277a:	4413      	add	r3, r2
 800277c:	3350      	adds	r3, #80	; 0x50
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002782:	78fb      	ldrb	r3, [r7, #3]
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	212c      	movs	r1, #44	; 0x2c
 8002788:	fb01 f303 	mul.w	r3, r1, r3
 800278c:	4413      	add	r3, r2
 800278e:	3339      	adds	r3, #57	; 0x39
 8002790:	78fa      	ldrb	r2, [r7, #3]
 8002792:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002794:	78fb      	ldrb	r3, [r7, #3]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	212c      	movs	r1, #44	; 0x2c
 800279a:	fb01 f303 	mul.w	r3, r1, r3
 800279e:	4413      	add	r3, r2
 80027a0:	3361      	adds	r3, #97	; 0x61
 80027a2:	2200      	movs	r2, #0
 80027a4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6818      	ldr	r0, [r3, #0]
 80027aa:	78fb      	ldrb	r3, [r7, #3]
 80027ac:	222c      	movs	r2, #44	; 0x2c
 80027ae:	fb02 f303 	mul.w	r3, r2, r3
 80027b2:	3338      	adds	r3, #56	; 0x38
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	18d1      	adds	r1, r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	461a      	mov	r2, r3
 80027c0:	f003 fa9e 	bl	8005d00 <USB_HC_StartXfer>
 80027c4:	4603      	mov	r3, r0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop

080027d0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f002 ff9f 	bl	800572a <USB_GetMode>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	f040 80f6 	bne.w	80029e0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f002 ff83 	bl	8005704 <USB_ReadInterrupts>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 80ec 	beq.w	80029de <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f002 ff7a 	bl	8005704 <USB_ReadInterrupts>
 8002810:	4603      	mov	r3, r0
 8002812:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002816:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800281a:	d104      	bne.n	8002826 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002824:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f002 ff6a 	bl	8005704 <USB_ReadInterrupts>
 8002830:	4603      	mov	r3, r0
 8002832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800283a:	d104      	bne.n	8002846 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002844:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f002 ff5a 	bl	8005704 <USB_ReadInterrupts>
 8002850:	4603      	mov	r3, r0
 8002852:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002856:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800285a:	d104      	bne.n	8002866 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002864:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f002 ff4a 	bl	8005704 <USB_ReadInterrupts>
 8002870:	4603      	mov	r3, r0
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b02      	cmp	r3, #2
 8002878:	d103      	bne.n	8002882 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2202      	movs	r2, #2
 8002880:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f002 ff3c 	bl	8005704 <USB_ReadInterrupts>
 800288c:	4603      	mov	r3, r0
 800288e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002892:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002896:	d11c      	bne.n	80028d2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80028a0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10f      	bne.n	80028d2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80028b2:	2110      	movs	r1, #16
 80028b4:	6938      	ldr	r0, [r7, #16]
 80028b6:	f002 fe2b 	bl	8005510 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80028ba:	6938      	ldr	r0, [r7, #16]
 80028bc:	f002 fe5c 	bl	8005578 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2101      	movs	r1, #1
 80028c6:	4618      	mov	r0, r3
 80028c8:	f003 f832 	bl	8005930 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f005 fe01 	bl	80084d4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f002 ff14 	bl	8005704 <USB_ReadInterrupts>
 80028dc:	4603      	mov	r3, r0
 80028de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028e6:	d102      	bne.n	80028ee <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f001 f89e 	bl	8003a2a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f002 ff06 	bl	8005704 <USB_ReadInterrupts>
 80028f8:	4603      	mov	r3, r0
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d106      	bne.n	8002910 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f005 fdca 	bl	800849c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2208      	movs	r2, #8
 800290e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f002 fef5 	bl	8005704 <USB_ReadInterrupts>
 800291a:	4603      	mov	r3, r0
 800291c:	f003 0310 	and.w	r3, r3, #16
 8002920:	2b10      	cmp	r3, #16
 8002922:	d101      	bne.n	8002928 <HAL_HCD_IRQHandler+0x158>
 8002924:	2301      	movs	r3, #1
 8002926:	e000      	b.n	800292a <HAL_HCD_IRQHandler+0x15a>
 8002928:	2300      	movs	r3, #0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d012      	beq.n	8002954 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	699a      	ldr	r2, [r3, #24]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0210 	bic.w	r2, r2, #16
 800293c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 ffa1 	bl	8003886 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699a      	ldr	r2, [r3, #24]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0210 	orr.w	r2, r2, #16
 8002952:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f002 fed3 	bl	8005704 <USB_ReadInterrupts>
 800295e:	4603      	mov	r3, r0
 8002960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002964:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002968:	d13a      	bne.n	80029e0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f003 fb08 	bl	8005f84 <USB_HC_ReadInterrupt>
 8002974:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002976:	2300      	movs	r3, #0
 8002978:	617b      	str	r3, [r7, #20]
 800297a:	e025      	b.n	80029c8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	fa22 f303 	lsr.w	r3, r2, r3
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	d018      	beq.n	80029c2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4413      	add	r3, r2
 8002998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029a6:	d106      	bne.n	80029b6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	4619      	mov	r1, r3
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f8ab 	bl	8002b0a <HCD_HC_IN_IRQHandler>
 80029b4:	e005      	b.n	80029c2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	4619      	mov	r1, r3
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 fbf9 	bl	80031b4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	3301      	adds	r3, #1
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d3d4      	bcc.n	800297c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029da:	615a      	str	r2, [r3, #20]
 80029dc:	e000      	b.n	80029e0 <HAL_HCD_IRQHandler+0x210>
      return;
 80029de:	bf00      	nop
    }
  }
}
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d101      	bne.n	80029fc <HAL_HCD_Start+0x16>
 80029f8:	2302      	movs	r3, #2
 80029fa:	e013      	b.n	8002a24 <HAL_HCD_Start+0x3e>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2101      	movs	r1, #1
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f002 fff4 	bl	80059f8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f002 fd0d 	bl	8005434 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d101      	bne.n	8002a42 <HAL_HCD_Stop+0x16>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e00d      	b.n	8002a5e <HAL_HCD_Stop+0x32>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f003 fbe2 	bl	8006218 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b082      	sub	sp, #8
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f002 ff96 	bl	80059a4 <USB_ResetPort>
 8002a78:	4603      	mov	r3, r0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002a8e:	78fb      	ldrb	r3, [r7, #3]
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	212c      	movs	r1, #44	; 0x2c
 8002a94:	fb01 f303 	mul.w	r3, r1, r3
 8002a98:	4413      	add	r3, r2
 8002a9a:	3360      	adds	r3, #96	; 0x60
 8002a9c:	781b      	ldrb	r3, [r3, #0]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002ab6:	78fb      	ldrb	r3, [r7, #3]
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	212c      	movs	r1, #44	; 0x2c
 8002abc:	fb01 f303 	mul.w	r3, r1, r3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	3350      	adds	r3, #80	; 0x50
 8002ac4:	681b      	ldr	r3, [r3, #0]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f002 ffda 	bl	8005a98 <USB_GetCurrentFrame>
 8002ae4:	4603      	mov	r3, r0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b082      	sub	sp, #8
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f002 ffb5 	bl	8005a6a <USB_GetHostSpeed>
 8002b00:	4603      	mov	r3, r0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b086      	sub	sp, #24
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	460b      	mov	r3, r1
 8002b14:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002b20:	78fb      	ldrb	r3, [r7, #3]
 8002b22:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	015a      	lsls	r2, r3, #5
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d11a      	bne.n	8002b70 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	015a      	lsls	r2, r3, #5
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	4413      	add	r3, r2
 8002b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b46:	461a      	mov	r2, r3
 8002b48:	2304      	movs	r3, #4
 8002b4a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	212c      	movs	r1, #44	; 0x2c
 8002b52:	fb01 f303 	mul.w	r3, r1, r3
 8002b56:	4413      	add	r3, r2
 8002b58:	3361      	adds	r3, #97	; 0x61
 8002b5a:	2206      	movs	r2, #6
 8002b5c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	4611      	mov	r1, r2
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f003 fa1c 	bl	8005fa6 <USB_HC_Halt>
 8002b6e:	e0af      	b.n	8002cd0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	015a      	lsls	r2, r3, #5
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	4413      	add	r3, r2
 8002b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b86:	d11b      	bne.n	8002bc0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	015a      	lsls	r2, r3, #5
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	4413      	add	r3, r2
 8002b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b94:	461a      	mov	r2, r3
 8002b96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	212c      	movs	r1, #44	; 0x2c
 8002ba2:	fb01 f303 	mul.w	r3, r1, r3
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3361      	adds	r3, #97	; 0x61
 8002baa:	2207      	movs	r2, #7
 8002bac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f003 f9f4 	bl	8005fa6 <USB_HC_Halt>
 8002bbe:	e087      	b.n	8002cd0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	015a      	lsls	r2, r3, #5
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 0320 	and.w	r3, r3, #32
 8002bd2:	2b20      	cmp	r3, #32
 8002bd4:	d109      	bne.n	8002bea <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	015a      	lsls	r2, r3, #5
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	4413      	add	r3, r2
 8002bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be2:	461a      	mov	r2, r3
 8002be4:	2320      	movs	r3, #32
 8002be6:	6093      	str	r3, [r2, #8]
 8002be8:	e072      	b.n	8002cd0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	015a      	lsls	r2, r3, #5
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 0308 	and.w	r3, r3, #8
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d11a      	bne.n	8002c36 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	015a      	lsls	r2, r3, #5
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	4413      	add	r3, r2
 8002c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	2308      	movs	r3, #8
 8002c10:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	212c      	movs	r1, #44	; 0x2c
 8002c18:	fb01 f303 	mul.w	r3, r1, r3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	3361      	adds	r3, #97	; 0x61
 8002c20:	2205      	movs	r2, #5
 8002c22:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	4611      	mov	r1, r2
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f003 f9b9 	bl	8005fa6 <USB_HC_Halt>
 8002c34:	e04c      	b.n	8002cd0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	015a      	lsls	r2, r3, #5
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c4c:	d11b      	bne.n	8002c86 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	015a      	lsls	r2, r3, #5
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	4413      	add	r3, r2
 8002c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c60:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	212c      	movs	r1, #44	; 0x2c
 8002c68:	fb01 f303 	mul.w	r3, r1, r3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3361      	adds	r3, #97	; 0x61
 8002c70:	2208      	movs	r2, #8
 8002c72:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	4611      	mov	r1, r2
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f003 f991 	bl	8005fa6 <USB_HC_Halt>
 8002c84:	e024      	b.n	8002cd0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	015a      	lsls	r2, r3, #5
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c98:	2b80      	cmp	r3, #128	; 0x80
 8002c9a:	d119      	bne.n	8002cd0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	015a      	lsls	r2, r3, #5
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca8:	461a      	mov	r2, r3
 8002caa:	2380      	movs	r3, #128	; 0x80
 8002cac:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	212c      	movs	r1, #44	; 0x2c
 8002cb4:	fb01 f303 	mul.w	r3, r1, r3
 8002cb8:	4413      	add	r3, r2
 8002cba:	3361      	adds	r3, #97	; 0x61
 8002cbc:	2206      	movs	r2, #6
 8002cbe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	b2d2      	uxtb	r2, r2
 8002cc8:	4611      	mov	r1, r2
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f003 f96b 	bl	8005fa6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	015a      	lsls	r2, r3, #5
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ce2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ce6:	d112      	bne.n	8002d0e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	4611      	mov	r1, r2
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f003 f957 	bl	8005fa6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	015a      	lsls	r2, r3, #5
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	4413      	add	r3, r2
 8002d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d04:	461a      	mov	r2, r3
 8002d06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d0a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002d0c:	e24e      	b.n	80031ac <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	015a      	lsls	r2, r3, #5
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	4413      	add	r3, r2
 8002d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	f040 80df 	bne.w	8002ee4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d019      	beq.n	8002d62 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	212c      	movs	r1, #44	; 0x2c
 8002d34:	fb01 f303 	mul.w	r3, r1, r3
 8002d38:	4413      	add	r3, r2
 8002d3a:	3348      	adds	r3, #72	; 0x48
 8002d3c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	0159      	lsls	r1, r3, #5
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	440b      	add	r3, r1
 8002d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002d50:	1ad2      	subs	r2, r2, r3
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	202c      	movs	r0, #44	; 0x2c
 8002d58:	fb00 f303 	mul.w	r3, r0, r3
 8002d5c:	440b      	add	r3, r1
 8002d5e:	3350      	adds	r3, #80	; 0x50
 8002d60:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	212c      	movs	r1, #44	; 0x2c
 8002d68:	fb01 f303 	mul.w	r3, r1, r3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3361      	adds	r3, #97	; 0x61
 8002d70:	2201      	movs	r2, #1
 8002d72:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	212c      	movs	r1, #44	; 0x2c
 8002d7a:	fb01 f303 	mul.w	r3, r1, r3
 8002d7e:	4413      	add	r3, r2
 8002d80:	335c      	adds	r3, #92	; 0x5c
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	015a      	lsls	r2, r3, #5
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d92:	461a      	mov	r2, r3
 8002d94:	2301      	movs	r3, #1
 8002d96:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	212c      	movs	r1, #44	; 0x2c
 8002d9e:	fb01 f303 	mul.w	r3, r1, r3
 8002da2:	4413      	add	r3, r2
 8002da4:	333f      	adds	r3, #63	; 0x3f
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d009      	beq.n	8002dc0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	212c      	movs	r1, #44	; 0x2c
 8002db2:	fb01 f303 	mul.w	r3, r1, r3
 8002db6:	4413      	add	r3, r2
 8002db8:	333f      	adds	r3, #63	; 0x3f
 8002dba:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d111      	bne.n	8002de4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	4611      	mov	r1, r2
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f003 f8eb 	bl	8005fa6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	015a      	lsls	r2, r3, #5
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ddc:	461a      	mov	r2, r3
 8002dde:	2310      	movs	r3, #16
 8002de0:	6093      	str	r3, [r2, #8]
 8002de2:	e03a      	b.n	8002e5a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	212c      	movs	r1, #44	; 0x2c
 8002dea:	fb01 f303 	mul.w	r3, r1, r3
 8002dee:	4413      	add	r3, r2
 8002df0:	333f      	adds	r3, #63	; 0x3f
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b03      	cmp	r3, #3
 8002df6:	d009      	beq.n	8002e0c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	212c      	movs	r1, #44	; 0x2c
 8002dfe:	fb01 f303 	mul.w	r3, r1, r3
 8002e02:	4413      	add	r3, r2
 8002e04:	333f      	adds	r3, #63	; 0x3f
 8002e06:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d126      	bne.n	8002e5a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	015a      	lsls	r2, r3, #5
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	4413      	add	r3, r2
 8002e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	0151      	lsls	r1, r2, #5
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	440a      	add	r2, r1
 8002e22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e2a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	212c      	movs	r1, #44	; 0x2c
 8002e32:	fb01 f303 	mul.w	r3, r1, r3
 8002e36:	4413      	add	r3, r2
 8002e38:	3360      	adds	r3, #96	; 0x60
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	b2d9      	uxtb	r1, r3
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	202c      	movs	r0, #44	; 0x2c
 8002e48:	fb00 f303 	mul.w	r3, r0, r3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	3360      	adds	r3, #96	; 0x60
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	461a      	mov	r2, r3
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f005 fb4b 	bl	80084f0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d12b      	bne.n	8002eba <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	212c      	movs	r1, #44	; 0x2c
 8002e68:	fb01 f303 	mul.w	r3, r1, r3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	3348      	adds	r3, #72	; 0x48
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	202c      	movs	r0, #44	; 0x2c
 8002e78:	fb00 f202 	mul.w	r2, r0, r2
 8002e7c:	440a      	add	r2, r1
 8002e7e:	3240      	adds	r2, #64	; 0x40
 8002e80:	8812      	ldrh	r2, [r2, #0]
 8002e82:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 818e 	beq.w	80031ac <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	212c      	movs	r1, #44	; 0x2c
 8002e96:	fb01 f303 	mul.w	r3, r1, r3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3354      	adds	r3, #84	; 0x54
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	f083 0301 	eor.w	r3, r3, #1
 8002ea4:	b2d8      	uxtb	r0, r3
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	212c      	movs	r1, #44	; 0x2c
 8002eac:	fb01 f303 	mul.w	r3, r1, r3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	3354      	adds	r3, #84	; 0x54
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	701a      	strb	r2, [r3, #0]
}
 8002eb8:	e178      	b.n	80031ac <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	212c      	movs	r1, #44	; 0x2c
 8002ec0:	fb01 f303 	mul.w	r3, r1, r3
 8002ec4:	4413      	add	r3, r2
 8002ec6:	3354      	adds	r3, #84	; 0x54
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	f083 0301 	eor.w	r3, r3, #1
 8002ece:	b2d8      	uxtb	r0, r3
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	212c      	movs	r1, #44	; 0x2c
 8002ed6:	fb01 f303 	mul.w	r3, r1, r3
 8002eda:	4413      	add	r3, r2
 8002edc:	3354      	adds	r3, #84	; 0x54
 8002ede:	4602      	mov	r2, r0
 8002ee0:	701a      	strb	r2, [r3, #0]
}
 8002ee2:	e163      	b.n	80031ac <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	015a      	lsls	r2, r3, #5
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	4413      	add	r3, r2
 8002eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	f040 80f6 	bne.w	80030e8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	212c      	movs	r1, #44	; 0x2c
 8002f02:	fb01 f303 	mul.w	r3, r1, r3
 8002f06:	4413      	add	r3, r2
 8002f08:	3361      	adds	r3, #97	; 0x61
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d109      	bne.n	8002f24 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	212c      	movs	r1, #44	; 0x2c
 8002f16:	fb01 f303 	mul.w	r3, r1, r3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3360      	adds	r3, #96	; 0x60
 8002f1e:	2201      	movs	r2, #1
 8002f20:	701a      	strb	r2, [r3, #0]
 8002f22:	e0c9      	b.n	80030b8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	212c      	movs	r1, #44	; 0x2c
 8002f2a:	fb01 f303 	mul.w	r3, r1, r3
 8002f2e:	4413      	add	r3, r2
 8002f30:	3361      	adds	r3, #97	; 0x61
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b05      	cmp	r3, #5
 8002f36:	d109      	bne.n	8002f4c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	212c      	movs	r1, #44	; 0x2c
 8002f3e:	fb01 f303 	mul.w	r3, r1, r3
 8002f42:	4413      	add	r3, r2
 8002f44:	3360      	adds	r3, #96	; 0x60
 8002f46:	2205      	movs	r2, #5
 8002f48:	701a      	strb	r2, [r3, #0]
 8002f4a:	e0b5      	b.n	80030b8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	212c      	movs	r1, #44	; 0x2c
 8002f52:	fb01 f303 	mul.w	r3, r1, r3
 8002f56:	4413      	add	r3, r2
 8002f58:	3361      	adds	r3, #97	; 0x61
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b06      	cmp	r3, #6
 8002f5e:	d009      	beq.n	8002f74 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	212c      	movs	r1, #44	; 0x2c
 8002f66:	fb01 f303 	mul.w	r3, r1, r3
 8002f6a:	4413      	add	r3, r2
 8002f6c:	3361      	adds	r3, #97	; 0x61
 8002f6e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d150      	bne.n	8003016 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	212c      	movs	r1, #44	; 0x2c
 8002f7a:	fb01 f303 	mul.w	r3, r1, r3
 8002f7e:	4413      	add	r3, r2
 8002f80:	335c      	adds	r3, #92	; 0x5c
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	1c5a      	adds	r2, r3, #1
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	202c      	movs	r0, #44	; 0x2c
 8002f8c:	fb00 f303 	mul.w	r3, r0, r3
 8002f90:	440b      	add	r3, r1
 8002f92:	335c      	adds	r3, #92	; 0x5c
 8002f94:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	212c      	movs	r1, #44	; 0x2c
 8002f9c:	fb01 f303 	mul.w	r3, r1, r3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	335c      	adds	r3, #92	; 0x5c
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d912      	bls.n	8002fd0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	212c      	movs	r1, #44	; 0x2c
 8002fb0:	fb01 f303 	mul.w	r3, r1, r3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	335c      	adds	r3, #92	; 0x5c
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	212c      	movs	r1, #44	; 0x2c
 8002fc2:	fb01 f303 	mul.w	r3, r1, r3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	3360      	adds	r3, #96	; 0x60
 8002fca:	2204      	movs	r2, #4
 8002fcc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002fce:	e073      	b.n	80030b8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	212c      	movs	r1, #44	; 0x2c
 8002fd6:	fb01 f303 	mul.w	r3, r1, r3
 8002fda:	4413      	add	r3, r2
 8002fdc:	3360      	adds	r3, #96	; 0x60
 8002fde:	2202      	movs	r2, #2
 8002fe0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	015a      	lsls	r2, r3, #5
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	4413      	add	r3, r2
 8002fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ff8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003000:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	015a      	lsls	r2, r3, #5
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4413      	add	r3, r2
 800300a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300e:	461a      	mov	r2, r3
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003014:	e050      	b.n	80030b8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	212c      	movs	r1, #44	; 0x2c
 800301c:	fb01 f303 	mul.w	r3, r1, r3
 8003020:	4413      	add	r3, r2
 8003022:	3361      	adds	r3, #97	; 0x61
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	2b03      	cmp	r3, #3
 8003028:	d122      	bne.n	8003070 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	212c      	movs	r1, #44	; 0x2c
 8003030:	fb01 f303 	mul.w	r3, r1, r3
 8003034:	4413      	add	r3, r2
 8003036:	3360      	adds	r3, #96	; 0x60
 8003038:	2202      	movs	r2, #2
 800303a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	015a      	lsls	r2, r3, #5
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	4413      	add	r3, r2
 8003044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003052:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800305a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	015a      	lsls	r2, r3, #5
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	4413      	add	r3, r2
 8003064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003068:	461a      	mov	r2, r3
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	6013      	str	r3, [r2, #0]
 800306e:	e023      	b.n	80030b8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	212c      	movs	r1, #44	; 0x2c
 8003076:	fb01 f303 	mul.w	r3, r1, r3
 800307a:	4413      	add	r3, r2
 800307c:	3361      	adds	r3, #97	; 0x61
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	2b07      	cmp	r3, #7
 8003082:	d119      	bne.n	80030b8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	212c      	movs	r1, #44	; 0x2c
 800308a:	fb01 f303 	mul.w	r3, r1, r3
 800308e:	4413      	add	r3, r2
 8003090:	335c      	adds	r3, #92	; 0x5c
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	1c5a      	adds	r2, r3, #1
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	202c      	movs	r0, #44	; 0x2c
 800309c:	fb00 f303 	mul.w	r3, r0, r3
 80030a0:	440b      	add	r3, r1
 80030a2:	335c      	adds	r3, #92	; 0x5c
 80030a4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	212c      	movs	r1, #44	; 0x2c
 80030ac:	fb01 f303 	mul.w	r3, r1, r3
 80030b0:	4413      	add	r3, r2
 80030b2:	3360      	adds	r3, #96	; 0x60
 80030b4:	2204      	movs	r2, #4
 80030b6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	015a      	lsls	r2, r3, #5
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c4:	461a      	mov	r2, r3
 80030c6:	2302      	movs	r3, #2
 80030c8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	b2d9      	uxtb	r1, r3
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	202c      	movs	r0, #44	; 0x2c
 80030d4:	fb00 f303 	mul.w	r3, r0, r3
 80030d8:	4413      	add	r3, r2
 80030da:	3360      	adds	r3, #96	; 0x60
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f005 fa05 	bl	80084f0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80030e6:	e061      	b.n	80031ac <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	015a      	lsls	r2, r3, #5
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	4413      	add	r3, r2
 80030f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 0310 	and.w	r3, r3, #16
 80030fa:	2b10      	cmp	r3, #16
 80030fc:	d156      	bne.n	80031ac <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	212c      	movs	r1, #44	; 0x2c
 8003104:	fb01 f303 	mul.w	r3, r1, r3
 8003108:	4413      	add	r3, r2
 800310a:	333f      	adds	r3, #63	; 0x3f
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b03      	cmp	r3, #3
 8003110:	d111      	bne.n	8003136 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	212c      	movs	r1, #44	; 0x2c
 8003118:	fb01 f303 	mul.w	r3, r1, r3
 800311c:	4413      	add	r3, r2
 800311e:	335c      	adds	r3, #92	; 0x5c
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	4611      	mov	r1, r2
 800312e:	4618      	mov	r0, r3
 8003130:	f002 ff39 	bl	8005fa6 <USB_HC_Halt>
 8003134:	e031      	b.n	800319a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	212c      	movs	r1, #44	; 0x2c
 800313c:	fb01 f303 	mul.w	r3, r1, r3
 8003140:	4413      	add	r3, r2
 8003142:	333f      	adds	r3, #63	; 0x3f
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d009      	beq.n	800315e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	212c      	movs	r1, #44	; 0x2c
 8003150:	fb01 f303 	mul.w	r3, r1, r3
 8003154:	4413      	add	r3, r2
 8003156:	333f      	adds	r3, #63	; 0x3f
 8003158:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800315a:	2b02      	cmp	r3, #2
 800315c:	d11d      	bne.n	800319a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	212c      	movs	r1, #44	; 0x2c
 8003164:	fb01 f303 	mul.w	r3, r1, r3
 8003168:	4413      	add	r3, r2
 800316a:	335c      	adds	r3, #92	; 0x5c
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d110      	bne.n	800319a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	212c      	movs	r1, #44	; 0x2c
 800317e:	fb01 f303 	mul.w	r3, r1, r3
 8003182:	4413      	add	r3, r2
 8003184:	3361      	adds	r3, #97	; 0x61
 8003186:	2203      	movs	r2, #3
 8003188:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	4611      	mov	r1, r2
 8003194:	4618      	mov	r0, r3
 8003196:	f002 ff06 	bl	8005fa6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	015a      	lsls	r2, r3, #5
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4413      	add	r3, r2
 80031a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a6:	461a      	mov	r2, r3
 80031a8:	2310      	movs	r3, #16
 80031aa:	6093      	str	r3, [r2, #8]
}
 80031ac:	bf00      	nop
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b088      	sub	sp, #32
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	460b      	mov	r3, r1
 80031be:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80031ca:	78fb      	ldrb	r3, [r7, #3]
 80031cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	015a      	lsls	r2, r3, #5
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	4413      	add	r3, r2
 80031d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d11a      	bne.n	800321a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f0:	461a      	mov	r2, r3
 80031f2:	2304      	movs	r3, #4
 80031f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	212c      	movs	r1, #44	; 0x2c
 80031fc:	fb01 f303 	mul.w	r3, r1, r3
 8003200:	4413      	add	r3, r2
 8003202:	3361      	adds	r3, #97	; 0x61
 8003204:	2206      	movs	r2, #6
 8003206:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	b2d2      	uxtb	r2, r2
 8003210:	4611      	mov	r1, r2
 8003212:	4618      	mov	r0, r3
 8003214:	f002 fec7 	bl	8005fa6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003218:	e331      	b.n	800387e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	015a      	lsls	r2, r3, #5
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	4413      	add	r3, r2
 8003222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f003 0320 	and.w	r3, r3, #32
 800322c:	2b20      	cmp	r3, #32
 800322e:	d12e      	bne.n	800328e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	015a      	lsls	r2, r3, #5
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	4413      	add	r3, r2
 8003238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800323c:	461a      	mov	r2, r3
 800323e:	2320      	movs	r3, #32
 8003240:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	212c      	movs	r1, #44	; 0x2c
 8003248:	fb01 f303 	mul.w	r3, r1, r3
 800324c:	4413      	add	r3, r2
 800324e:	333d      	adds	r3, #61	; 0x3d
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b01      	cmp	r3, #1
 8003254:	f040 8313 	bne.w	800387e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	212c      	movs	r1, #44	; 0x2c
 800325e:	fb01 f303 	mul.w	r3, r1, r3
 8003262:	4413      	add	r3, r2
 8003264:	333d      	adds	r3, #61	; 0x3d
 8003266:	2200      	movs	r2, #0
 8003268:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	212c      	movs	r1, #44	; 0x2c
 8003270:	fb01 f303 	mul.w	r3, r1, r3
 8003274:	4413      	add	r3, r2
 8003276:	3360      	adds	r3, #96	; 0x60
 8003278:	2202      	movs	r2, #2
 800327a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	b2d2      	uxtb	r2, r2
 8003284:	4611      	mov	r1, r2
 8003286:	4618      	mov	r0, r3
 8003288:	f002 fe8d 	bl	8005fa6 <USB_HC_Halt>
}
 800328c:	e2f7      	b.n	800387e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	015a      	lsls	r2, r3, #5
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	4413      	add	r3, r2
 8003296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032a4:	d112      	bne.n	80032cc <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	015a      	lsls	r2, r3, #5
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	4413      	add	r3, r2
 80032ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b2:	461a      	mov	r2, r3
 80032b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032b8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	b2d2      	uxtb	r2, r2
 80032c2:	4611      	mov	r1, r2
 80032c4:	4618      	mov	r0, r3
 80032c6:	f002 fe6e 	bl	8005fa6 <USB_HC_Halt>
}
 80032ca:	e2d8      	b.n	800387e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	015a      	lsls	r2, r3, #5
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	4413      	add	r3, r2
 80032d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d140      	bne.n	8003364 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	212c      	movs	r1, #44	; 0x2c
 80032e8:	fb01 f303 	mul.w	r3, r1, r3
 80032ec:	4413      	add	r3, r2
 80032ee:	335c      	adds	r3, #92	; 0x5c
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	015a      	lsls	r2, r3, #5
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	4413      	add	r3, r2
 80032fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003306:	2b40      	cmp	r3, #64	; 0x40
 8003308:	d111      	bne.n	800332e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	212c      	movs	r1, #44	; 0x2c
 8003310:	fb01 f303 	mul.w	r3, r1, r3
 8003314:	4413      	add	r3, r2
 8003316:	333d      	adds	r3, #61	; 0x3d
 8003318:	2201      	movs	r2, #1
 800331a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	015a      	lsls	r2, r3, #5
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	4413      	add	r3, r2
 8003324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003328:	461a      	mov	r2, r3
 800332a:	2340      	movs	r3, #64	; 0x40
 800332c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	015a      	lsls	r2, r3, #5
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	4413      	add	r3, r2
 8003336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333a:	461a      	mov	r2, r3
 800333c:	2301      	movs	r3, #1
 800333e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	212c      	movs	r1, #44	; 0x2c
 8003346:	fb01 f303 	mul.w	r3, r1, r3
 800334a:	4413      	add	r3, r2
 800334c:	3361      	adds	r3, #97	; 0x61
 800334e:	2201      	movs	r2, #1
 8003350:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	4611      	mov	r1, r2
 800335c:	4618      	mov	r0, r3
 800335e:	f002 fe22 	bl	8005fa6 <USB_HC_Halt>
}
 8003362:	e28c      	b.n	800387e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	4413      	add	r3, r2
 800336c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003376:	2b40      	cmp	r3, #64	; 0x40
 8003378:	d12c      	bne.n	80033d4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	212c      	movs	r1, #44	; 0x2c
 8003380:	fb01 f303 	mul.w	r3, r1, r3
 8003384:	4413      	add	r3, r2
 8003386:	3361      	adds	r3, #97	; 0x61
 8003388:	2204      	movs	r2, #4
 800338a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	212c      	movs	r1, #44	; 0x2c
 8003392:	fb01 f303 	mul.w	r3, r1, r3
 8003396:	4413      	add	r3, r2
 8003398:	333d      	adds	r3, #61	; 0x3d
 800339a:	2201      	movs	r2, #1
 800339c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	212c      	movs	r1, #44	; 0x2c
 80033a4:	fb01 f303 	mul.w	r3, r1, r3
 80033a8:	4413      	add	r3, r2
 80033aa:	335c      	adds	r3, #92	; 0x5c
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	4611      	mov	r1, r2
 80033ba:	4618      	mov	r0, r3
 80033bc:	f002 fdf3 	bl	8005fa6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	015a      	lsls	r2, r3, #5
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033cc:	461a      	mov	r2, r3
 80033ce:	2340      	movs	r3, #64	; 0x40
 80033d0:	6093      	str	r3, [r2, #8]
}
 80033d2:	e254      	b.n	800387e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	015a      	lsls	r2, r3, #5
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	4413      	add	r3, r2
 80033dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d11a      	bne.n	8003420 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	015a      	lsls	r2, r3, #5
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f6:	461a      	mov	r2, r3
 80033f8:	2308      	movs	r3, #8
 80033fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	212c      	movs	r1, #44	; 0x2c
 8003402:	fb01 f303 	mul.w	r3, r1, r3
 8003406:	4413      	add	r3, r2
 8003408:	3361      	adds	r3, #97	; 0x61
 800340a:	2205      	movs	r2, #5
 800340c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	4611      	mov	r1, r2
 8003418:	4618      	mov	r0, r3
 800341a:	f002 fdc4 	bl	8005fa6 <USB_HC_Halt>
}
 800341e:	e22e      	b.n	800387e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	015a      	lsls	r2, r3, #5
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	4413      	add	r3, r2
 8003428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 0310 	and.w	r3, r3, #16
 8003432:	2b10      	cmp	r3, #16
 8003434:	d140      	bne.n	80034b8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	212c      	movs	r1, #44	; 0x2c
 800343c:	fb01 f303 	mul.w	r3, r1, r3
 8003440:	4413      	add	r3, r2
 8003442:	335c      	adds	r3, #92	; 0x5c
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	212c      	movs	r1, #44	; 0x2c
 800344e:	fb01 f303 	mul.w	r3, r1, r3
 8003452:	4413      	add	r3, r2
 8003454:	3361      	adds	r3, #97	; 0x61
 8003456:	2203      	movs	r2, #3
 8003458:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	212c      	movs	r1, #44	; 0x2c
 8003460:	fb01 f303 	mul.w	r3, r1, r3
 8003464:	4413      	add	r3, r2
 8003466:	333d      	adds	r3, #61	; 0x3d
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d112      	bne.n	8003494 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	212c      	movs	r1, #44	; 0x2c
 8003474:	fb01 f303 	mul.w	r3, r1, r3
 8003478:	4413      	add	r3, r2
 800347a:	333c      	adds	r3, #60	; 0x3c
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d108      	bne.n	8003494 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	212c      	movs	r1, #44	; 0x2c
 8003488:	fb01 f303 	mul.w	r3, r1, r3
 800348c:	4413      	add	r3, r2
 800348e:	333d      	adds	r3, #61	; 0x3d
 8003490:	2201      	movs	r2, #1
 8003492:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	4611      	mov	r1, r2
 800349e:	4618      	mov	r0, r3
 80034a0:	f002 fd81 	bl	8005fa6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	015a      	lsls	r2, r3, #5
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	4413      	add	r3, r2
 80034ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034b0:	461a      	mov	r2, r3
 80034b2:	2310      	movs	r3, #16
 80034b4:	6093      	str	r3, [r2, #8]
}
 80034b6:	e1e2      	b.n	800387e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ca:	2b80      	cmp	r3, #128	; 0x80
 80034cc:	d164      	bne.n	8003598 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d111      	bne.n	80034fa <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	212c      	movs	r1, #44	; 0x2c
 80034dc:	fb01 f303 	mul.w	r3, r1, r3
 80034e0:	4413      	add	r3, r2
 80034e2:	3361      	adds	r3, #97	; 0x61
 80034e4:	2206      	movs	r2, #6
 80034e6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	b2d2      	uxtb	r2, r2
 80034f0:	4611      	mov	r1, r2
 80034f2:	4618      	mov	r0, r3
 80034f4:	f002 fd57 	bl	8005fa6 <USB_HC_Halt>
 80034f8:	e044      	b.n	8003584 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	212c      	movs	r1, #44	; 0x2c
 8003500:	fb01 f303 	mul.w	r3, r1, r3
 8003504:	4413      	add	r3, r2
 8003506:	335c      	adds	r3, #92	; 0x5c
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	202c      	movs	r0, #44	; 0x2c
 8003512:	fb00 f303 	mul.w	r3, r0, r3
 8003516:	440b      	add	r3, r1
 8003518:	335c      	adds	r3, #92	; 0x5c
 800351a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	212c      	movs	r1, #44	; 0x2c
 8003522:	fb01 f303 	mul.w	r3, r1, r3
 8003526:	4413      	add	r3, r2
 8003528:	335c      	adds	r3, #92	; 0x5c
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b02      	cmp	r3, #2
 800352e:	d920      	bls.n	8003572 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	212c      	movs	r1, #44	; 0x2c
 8003536:	fb01 f303 	mul.w	r3, r1, r3
 800353a:	4413      	add	r3, r2
 800353c:	335c      	adds	r3, #92	; 0x5c
 800353e:	2200      	movs	r2, #0
 8003540:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	212c      	movs	r1, #44	; 0x2c
 8003548:	fb01 f303 	mul.w	r3, r1, r3
 800354c:	4413      	add	r3, r2
 800354e:	3360      	adds	r3, #96	; 0x60
 8003550:	2204      	movs	r2, #4
 8003552:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	b2d9      	uxtb	r1, r3
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	202c      	movs	r0, #44	; 0x2c
 800355e:	fb00 f303 	mul.w	r3, r0, r3
 8003562:	4413      	add	r3, r2
 8003564:	3360      	adds	r3, #96	; 0x60
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	461a      	mov	r2, r3
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f004 ffc0 	bl	80084f0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003570:	e008      	b.n	8003584 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	212c      	movs	r1, #44	; 0x2c
 8003578:	fb01 f303 	mul.w	r3, r1, r3
 800357c:	4413      	add	r3, r2
 800357e:	3360      	adds	r3, #96	; 0x60
 8003580:	2202      	movs	r2, #2
 8003582:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	4413      	add	r3, r2
 800358c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003590:	461a      	mov	r2, r3
 8003592:	2380      	movs	r3, #128	; 0x80
 8003594:	6093      	str	r3, [r2, #8]
}
 8003596:	e172      	b.n	800387e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ae:	d11b      	bne.n	80035e8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	212c      	movs	r1, #44	; 0x2c
 80035b6:	fb01 f303 	mul.w	r3, r1, r3
 80035ba:	4413      	add	r3, r2
 80035bc:	3361      	adds	r3, #97	; 0x61
 80035be:	2208      	movs	r2, #8
 80035c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	4611      	mov	r1, r2
 80035cc:	4618      	mov	r0, r3
 80035ce:	f002 fcea 	bl	8005fa6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	015a      	lsls	r2, r3, #5
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	4413      	add	r3, r2
 80035da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035de:	461a      	mov	r2, r3
 80035e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035e4:	6093      	str	r3, [r2, #8]
}
 80035e6:	e14a      	b.n	800387e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	f040 813f 	bne.w	800387e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	212c      	movs	r1, #44	; 0x2c
 8003606:	fb01 f303 	mul.w	r3, r1, r3
 800360a:	4413      	add	r3, r2
 800360c:	3361      	adds	r3, #97	; 0x61
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d17d      	bne.n	8003710 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	212c      	movs	r1, #44	; 0x2c
 800361a:	fb01 f303 	mul.w	r3, r1, r3
 800361e:	4413      	add	r3, r2
 8003620:	3360      	adds	r3, #96	; 0x60
 8003622:	2201      	movs	r2, #1
 8003624:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	212c      	movs	r1, #44	; 0x2c
 800362c:	fb01 f303 	mul.w	r3, r1, r3
 8003630:	4413      	add	r3, r2
 8003632:	333f      	adds	r3, #63	; 0x3f
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	2b02      	cmp	r3, #2
 8003638:	d00a      	beq.n	8003650 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	212c      	movs	r1, #44	; 0x2c
 8003640:	fb01 f303 	mul.w	r3, r1, r3
 8003644:	4413      	add	r3, r2
 8003646:	333f      	adds	r3, #63	; 0x3f
 8003648:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800364a:	2b03      	cmp	r3, #3
 800364c:	f040 8100 	bne.w	8003850 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d113      	bne.n	8003680 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	212c      	movs	r1, #44	; 0x2c
 800365e:	fb01 f303 	mul.w	r3, r1, r3
 8003662:	4413      	add	r3, r2
 8003664:	3355      	adds	r3, #85	; 0x55
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	f083 0301 	eor.w	r3, r3, #1
 800366c:	b2d8      	uxtb	r0, r3
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	212c      	movs	r1, #44	; 0x2c
 8003674:	fb01 f303 	mul.w	r3, r1, r3
 8003678:	4413      	add	r3, r2
 800367a:	3355      	adds	r3, #85	; 0x55
 800367c:	4602      	mov	r2, r0
 800367e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	2b01      	cmp	r3, #1
 8003686:	f040 80e3 	bne.w	8003850 <HCD_HC_OUT_IRQHandler+0x69c>
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	212c      	movs	r1, #44	; 0x2c
 8003690:	fb01 f303 	mul.w	r3, r1, r3
 8003694:	4413      	add	r3, r2
 8003696:	334c      	adds	r3, #76	; 0x4c
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 80d8 	beq.w	8003850 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	212c      	movs	r1, #44	; 0x2c
 80036a6:	fb01 f303 	mul.w	r3, r1, r3
 80036aa:	4413      	add	r3, r2
 80036ac:	334c      	adds	r3, #76	; 0x4c
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	202c      	movs	r0, #44	; 0x2c
 80036b6:	fb00 f202 	mul.w	r2, r0, r2
 80036ba:	440a      	add	r2, r1
 80036bc:	3240      	adds	r2, #64	; 0x40
 80036be:	8812      	ldrh	r2, [r2, #0]
 80036c0:	4413      	add	r3, r2
 80036c2:	3b01      	subs	r3, #1
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	202c      	movs	r0, #44	; 0x2c
 80036ca:	fb00 f202 	mul.w	r2, r0, r2
 80036ce:	440a      	add	r2, r1
 80036d0:	3240      	adds	r2, #64	; 0x40
 80036d2:	8812      	ldrh	r2, [r2, #0]
 80036d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80036d8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 80b5 	beq.w	8003850 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	212c      	movs	r1, #44	; 0x2c
 80036ec:	fb01 f303 	mul.w	r3, r1, r3
 80036f0:	4413      	add	r3, r2
 80036f2:	3355      	adds	r3, #85	; 0x55
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	f083 0301 	eor.w	r3, r3, #1
 80036fa:	b2d8      	uxtb	r0, r3
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	212c      	movs	r1, #44	; 0x2c
 8003702:	fb01 f303 	mul.w	r3, r1, r3
 8003706:	4413      	add	r3, r2
 8003708:	3355      	adds	r3, #85	; 0x55
 800370a:	4602      	mov	r2, r0
 800370c:	701a      	strb	r2, [r3, #0]
 800370e:	e09f      	b.n	8003850 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	212c      	movs	r1, #44	; 0x2c
 8003716:	fb01 f303 	mul.w	r3, r1, r3
 800371a:	4413      	add	r3, r2
 800371c:	3361      	adds	r3, #97	; 0x61
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	2b03      	cmp	r3, #3
 8003722:	d109      	bne.n	8003738 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	212c      	movs	r1, #44	; 0x2c
 800372a:	fb01 f303 	mul.w	r3, r1, r3
 800372e:	4413      	add	r3, r2
 8003730:	3360      	adds	r3, #96	; 0x60
 8003732:	2202      	movs	r2, #2
 8003734:	701a      	strb	r2, [r3, #0]
 8003736:	e08b      	b.n	8003850 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	212c      	movs	r1, #44	; 0x2c
 800373e:	fb01 f303 	mul.w	r3, r1, r3
 8003742:	4413      	add	r3, r2
 8003744:	3361      	adds	r3, #97	; 0x61
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	2b04      	cmp	r3, #4
 800374a:	d109      	bne.n	8003760 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	212c      	movs	r1, #44	; 0x2c
 8003752:	fb01 f303 	mul.w	r3, r1, r3
 8003756:	4413      	add	r3, r2
 8003758:	3360      	adds	r3, #96	; 0x60
 800375a:	2202      	movs	r2, #2
 800375c:	701a      	strb	r2, [r3, #0]
 800375e:	e077      	b.n	8003850 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	212c      	movs	r1, #44	; 0x2c
 8003766:	fb01 f303 	mul.w	r3, r1, r3
 800376a:	4413      	add	r3, r2
 800376c:	3361      	adds	r3, #97	; 0x61
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b05      	cmp	r3, #5
 8003772:	d109      	bne.n	8003788 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	212c      	movs	r1, #44	; 0x2c
 800377a:	fb01 f303 	mul.w	r3, r1, r3
 800377e:	4413      	add	r3, r2
 8003780:	3360      	adds	r3, #96	; 0x60
 8003782:	2205      	movs	r2, #5
 8003784:	701a      	strb	r2, [r3, #0]
 8003786:	e063      	b.n	8003850 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	212c      	movs	r1, #44	; 0x2c
 800378e:	fb01 f303 	mul.w	r3, r1, r3
 8003792:	4413      	add	r3, r2
 8003794:	3361      	adds	r3, #97	; 0x61
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	2b06      	cmp	r3, #6
 800379a:	d009      	beq.n	80037b0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	212c      	movs	r1, #44	; 0x2c
 80037a2:	fb01 f303 	mul.w	r3, r1, r3
 80037a6:	4413      	add	r3, r2
 80037a8:	3361      	adds	r3, #97	; 0x61
 80037aa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d14f      	bne.n	8003850 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	212c      	movs	r1, #44	; 0x2c
 80037b6:	fb01 f303 	mul.w	r3, r1, r3
 80037ba:	4413      	add	r3, r2
 80037bc:	335c      	adds	r3, #92	; 0x5c
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	1c5a      	adds	r2, r3, #1
 80037c2:	6879      	ldr	r1, [r7, #4]
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	202c      	movs	r0, #44	; 0x2c
 80037c8:	fb00 f303 	mul.w	r3, r0, r3
 80037cc:	440b      	add	r3, r1
 80037ce:	335c      	adds	r3, #92	; 0x5c
 80037d0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	212c      	movs	r1, #44	; 0x2c
 80037d8:	fb01 f303 	mul.w	r3, r1, r3
 80037dc:	4413      	add	r3, r2
 80037de:	335c      	adds	r3, #92	; 0x5c
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d912      	bls.n	800380c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	212c      	movs	r1, #44	; 0x2c
 80037ec:	fb01 f303 	mul.w	r3, r1, r3
 80037f0:	4413      	add	r3, r2
 80037f2:	335c      	adds	r3, #92	; 0x5c
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	212c      	movs	r1, #44	; 0x2c
 80037fe:	fb01 f303 	mul.w	r3, r1, r3
 8003802:	4413      	add	r3, r2
 8003804:	3360      	adds	r3, #96	; 0x60
 8003806:	2204      	movs	r2, #4
 8003808:	701a      	strb	r2, [r3, #0]
 800380a:	e021      	b.n	8003850 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	212c      	movs	r1, #44	; 0x2c
 8003812:	fb01 f303 	mul.w	r3, r1, r3
 8003816:	4413      	add	r3, r2
 8003818:	3360      	adds	r3, #96	; 0x60
 800381a:	2202      	movs	r2, #2
 800381c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	4413      	add	r3, r2
 8003826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003834:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800383c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	015a      	lsls	r2, r3, #5
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	4413      	add	r3, r2
 8003846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800384a:	461a      	mov	r2, r3
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	4413      	add	r3, r2
 8003858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800385c:	461a      	mov	r2, r3
 800385e:	2302      	movs	r3, #2
 8003860:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	b2d9      	uxtb	r1, r3
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	202c      	movs	r0, #44	; 0x2c
 800386c:	fb00 f303 	mul.w	r3, r0, r3
 8003870:	4413      	add	r3, r2
 8003872:	3360      	adds	r3, #96	; 0x60
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	461a      	mov	r2, r3
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f004 fe39 	bl	80084f0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800387e:	bf00      	nop
 8003880:	3720      	adds	r7, #32
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b08a      	sub	sp, #40	; 0x28
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003896:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	0c5b      	lsrs	r3, r3, #17
 80038ac:	f003 030f 	and.w	r3, r3, #15
 80038b0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	091b      	lsrs	r3, r3, #4
 80038b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038ba:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d004      	beq.n	80038cc <HCD_RXQLVL_IRQHandler+0x46>
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2b05      	cmp	r3, #5
 80038c6:	f000 80a9 	beq.w	8003a1c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80038ca:	e0aa      	b.n	8003a22 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f000 80a6 	beq.w	8003a20 <HCD_RXQLVL_IRQHandler+0x19a>
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	212c      	movs	r1, #44	; 0x2c
 80038da:	fb01 f303 	mul.w	r3, r1, r3
 80038de:	4413      	add	r3, r2
 80038e0:	3344      	adds	r3, #68	; 0x44
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 809b 	beq.w	8003a20 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	212c      	movs	r1, #44	; 0x2c
 80038f0:	fb01 f303 	mul.w	r3, r1, r3
 80038f4:	4413      	add	r3, r2
 80038f6:	3350      	adds	r3, #80	; 0x50
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	441a      	add	r2, r3
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	202c      	movs	r0, #44	; 0x2c
 8003904:	fb00 f303 	mul.w	r3, r0, r3
 8003908:	440b      	add	r3, r1
 800390a:	334c      	adds	r3, #76	; 0x4c
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	429a      	cmp	r2, r3
 8003910:	d87a      	bhi.n	8003a08 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6818      	ldr	r0, [r3, #0]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	212c      	movs	r1, #44	; 0x2c
 800391c:	fb01 f303 	mul.w	r3, r1, r3
 8003920:	4413      	add	r3, r2
 8003922:	3344      	adds	r3, #68	; 0x44
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	b292      	uxth	r2, r2
 800392a:	4619      	mov	r1, r3
 800392c:	f001 fe92 	bl	8005654 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	212c      	movs	r1, #44	; 0x2c
 8003936:	fb01 f303 	mul.w	r3, r1, r3
 800393a:	4413      	add	r3, r2
 800393c:	3344      	adds	r3, #68	; 0x44
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	441a      	add	r2, r3
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	202c      	movs	r0, #44	; 0x2c
 800394a:	fb00 f303 	mul.w	r3, r0, r3
 800394e:	440b      	add	r3, r1
 8003950:	3344      	adds	r3, #68	; 0x44
 8003952:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	212c      	movs	r1, #44	; 0x2c
 800395a:	fb01 f303 	mul.w	r3, r1, r3
 800395e:	4413      	add	r3, r2
 8003960:	3350      	adds	r3, #80	; 0x50
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	441a      	add	r2, r3
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	202c      	movs	r0, #44	; 0x2c
 800396e:	fb00 f303 	mul.w	r3, r0, r3
 8003972:	440b      	add	r3, r1
 8003974:	3350      	adds	r3, #80	; 0x50
 8003976:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	4413      	add	r3, r2
 8003980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	0cdb      	lsrs	r3, r3, #19
 8003988:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800398c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	212c      	movs	r1, #44	; 0x2c
 8003994:	fb01 f303 	mul.w	r3, r1, r3
 8003998:	4413      	add	r3, r2
 800399a:	3340      	adds	r3, #64	; 0x40
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	461a      	mov	r2, r3
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d13c      	bne.n	8003a20 <HCD_RXQLVL_IRQHandler+0x19a>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d039      	beq.n	8003a20 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	015a      	lsls	r2, r3, #5
 80039b0:	6a3b      	ldr	r3, [r7, #32]
 80039b2:	4413      	add	r3, r2
 80039b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80039c2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80039ca:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	6a3b      	ldr	r3, [r7, #32]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d8:	461a      	mov	r2, r3
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	212c      	movs	r1, #44	; 0x2c
 80039e4:	fb01 f303 	mul.w	r3, r1, r3
 80039e8:	4413      	add	r3, r2
 80039ea:	3354      	adds	r3, #84	; 0x54
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	f083 0301 	eor.w	r3, r3, #1
 80039f2:	b2d8      	uxtb	r0, r3
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	212c      	movs	r1, #44	; 0x2c
 80039fa:	fb01 f303 	mul.w	r3, r1, r3
 80039fe:	4413      	add	r3, r2
 8003a00:	3354      	adds	r3, #84	; 0x54
 8003a02:	4602      	mov	r2, r0
 8003a04:	701a      	strb	r2, [r3, #0]
      break;
 8003a06:	e00b      	b.n	8003a20 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	212c      	movs	r1, #44	; 0x2c
 8003a0e:	fb01 f303 	mul.w	r3, r1, r3
 8003a12:	4413      	add	r3, r2
 8003a14:	3360      	adds	r3, #96	; 0x60
 8003a16:	2204      	movs	r2, #4
 8003a18:	701a      	strb	r2, [r3, #0]
      break;
 8003a1a:	e001      	b.n	8003a20 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003a1c:	bf00      	nop
 8003a1e:	e000      	b.n	8003a22 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003a20:	bf00      	nop
  }
}
 8003a22:	bf00      	nop
 8003a24:	3728      	adds	r7, #40	; 0x28
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b086      	sub	sp, #24
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003a56:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d10b      	bne.n	8003a7a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d102      	bne.n	8003a72 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f004 fd23 	bl	80084b8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	f043 0302 	orr.w	r3, r3, #2
 8003a78:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f003 0308 	and.w	r3, r3, #8
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d132      	bne.n	8003aea <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	f043 0308 	orr.w	r3, r3, #8
 8003a8a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f003 0304 	and.w	r3, r3, #4
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d126      	bne.n	8003ae4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d113      	bne.n	8003ac6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003aa4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003aa8:	d106      	bne.n	8003ab8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2102      	movs	r1, #2
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f001 ff3d 	bl	8005930 <USB_InitFSLSPClkSel>
 8003ab6:	e011      	b.n	8003adc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2101      	movs	r1, #1
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f001 ff36 	bl	8005930 <USB_InitFSLSPClkSel>
 8003ac4:	e00a      	b.n	8003adc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d106      	bne.n	8003adc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003ada:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f004 fd15 	bl	800850c <HAL_HCD_PortEnabled_Callback>
 8003ae2:	e002      	b.n	8003aea <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f004 fd1f 	bl	8008528 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f003 0320 	and.w	r3, r3, #32
 8003af0:	2b20      	cmp	r3, #32
 8003af2:	d103      	bne.n	8003afc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	f043 0320 	orr.w	r3, r3, #32
 8003afa:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b02:	461a      	mov	r2, r3
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	6013      	str	r3, [r2, #0]
}
 8003b08:	bf00      	nop
 8003b0a:	3718      	adds	r7, #24
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e12b      	b.n	8003d7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d106      	bne.n	8003b3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7fd fc6a 	bl	8001410 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2224      	movs	r2, #36	; 0x24
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 0201 	bic.w	r2, r2, #1
 8003b52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b74:	f001 fa20 	bl	8004fb8 <HAL_RCC_GetPCLK1Freq>
 8003b78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	4a81      	ldr	r2, [pc, #516]	; (8003d84 <HAL_I2C_Init+0x274>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d807      	bhi.n	8003b94 <HAL_I2C_Init+0x84>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4a80      	ldr	r2, [pc, #512]	; (8003d88 <HAL_I2C_Init+0x278>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	bf94      	ite	ls
 8003b8c:	2301      	movls	r3, #1
 8003b8e:	2300      	movhi	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	e006      	b.n	8003ba2 <HAL_I2C_Init+0x92>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4a7d      	ldr	r2, [pc, #500]	; (8003d8c <HAL_I2C_Init+0x27c>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	bf94      	ite	ls
 8003b9c:	2301      	movls	r3, #1
 8003b9e:	2300      	movhi	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e0e7      	b.n	8003d7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	4a78      	ldr	r2, [pc, #480]	; (8003d90 <HAL_I2C_Init+0x280>)
 8003bae:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb2:	0c9b      	lsrs	r3, r3, #18
 8003bb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	4a6a      	ldr	r2, [pc, #424]	; (8003d84 <HAL_I2C_Init+0x274>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d802      	bhi.n	8003be4 <HAL_I2C_Init+0xd4>
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	3301      	adds	r3, #1
 8003be2:	e009      	b.n	8003bf8 <HAL_I2C_Init+0xe8>
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003bea:	fb02 f303 	mul.w	r3, r2, r3
 8003bee:	4a69      	ldr	r2, [pc, #420]	; (8003d94 <HAL_I2C_Init+0x284>)
 8003bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf4:	099b      	lsrs	r3, r3, #6
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6812      	ldr	r2, [r2, #0]
 8003bfc:	430b      	orrs	r3, r1
 8003bfe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	495c      	ldr	r1, [pc, #368]	; (8003d84 <HAL_I2C_Init+0x274>)
 8003c14:	428b      	cmp	r3, r1
 8003c16:	d819      	bhi.n	8003c4c <HAL_I2C_Init+0x13c>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	1e59      	subs	r1, r3, #1
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c26:	1c59      	adds	r1, r3, #1
 8003c28:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c2c:	400b      	ands	r3, r1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00a      	beq.n	8003c48 <HAL_I2C_Init+0x138>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	1e59      	subs	r1, r3, #1
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c40:	3301      	adds	r3, #1
 8003c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c46:	e051      	b.n	8003cec <HAL_I2C_Init+0x1dc>
 8003c48:	2304      	movs	r3, #4
 8003c4a:	e04f      	b.n	8003cec <HAL_I2C_Init+0x1dc>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d111      	bne.n	8003c78 <HAL_I2C_Init+0x168>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	1e58      	subs	r0, r3, #1
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6859      	ldr	r1, [r3, #4]
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	440b      	add	r3, r1
 8003c62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c66:	3301      	adds	r3, #1
 8003c68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	bf0c      	ite	eq
 8003c70:	2301      	moveq	r3, #1
 8003c72:	2300      	movne	r3, #0
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	e012      	b.n	8003c9e <HAL_I2C_Init+0x18e>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	1e58      	subs	r0, r3, #1
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6859      	ldr	r1, [r3, #4]
 8003c80:	460b      	mov	r3, r1
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	440b      	add	r3, r1
 8003c86:	0099      	lsls	r1, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c8e:	3301      	adds	r3, #1
 8003c90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	bf0c      	ite	eq
 8003c98:	2301      	moveq	r3, #1
 8003c9a:	2300      	movne	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <HAL_I2C_Init+0x196>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e022      	b.n	8003cec <HAL_I2C_Init+0x1dc>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10e      	bne.n	8003ccc <HAL_I2C_Init+0x1bc>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	1e58      	subs	r0, r3, #1
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6859      	ldr	r1, [r3, #4]
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	440b      	add	r3, r1
 8003cbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cca:	e00f      	b.n	8003cec <HAL_I2C_Init+0x1dc>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	1e58      	subs	r0, r3, #1
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6859      	ldr	r1, [r3, #4]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	440b      	add	r3, r1
 8003cda:	0099      	lsls	r1, r3, #2
 8003cdc:	440b      	add	r3, r1
 8003cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ce8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cec:	6879      	ldr	r1, [r7, #4]
 8003cee:	6809      	ldr	r1, [r1, #0]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	69da      	ldr	r2, [r3, #28]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	431a      	orrs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	6911      	ldr	r1, [r2, #16]
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	68d2      	ldr	r2, [r2, #12]
 8003d26:	4311      	orrs	r1, r2
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	6812      	ldr	r2, [r2, #0]
 8003d2c:	430b      	orrs	r3, r1
 8003d2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	695a      	ldr	r2, [r3, #20]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	431a      	orrs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f042 0201 	orr.w	r2, r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2220      	movs	r2, #32
 8003d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	000186a0 	.word	0x000186a0
 8003d88:	001e847f 	.word	0x001e847f
 8003d8c:	003d08ff 	.word	0x003d08ff
 8003d90:	431bde83 	.word	0x431bde83
 8003d94:	10624dd3 	.word	0x10624dd3

08003d98 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b088      	sub	sp, #32
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e128      	b.n	8003ffc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d109      	bne.n	8003dca <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a90      	ldr	r2, [pc, #576]	; (8004004 <HAL_I2S_Init+0x26c>)
 8003dc2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7fd fb6b 	bl	80014a0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2202      	movs	r2, #2
 8003dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6812      	ldr	r2, [r2, #0]
 8003ddc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003de0:	f023 030f 	bic.w	r3, r3, #15
 8003de4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2202      	movs	r2, #2
 8003dec:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d060      	beq.n	8003eb8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d102      	bne.n	8003e04 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003dfe:	2310      	movs	r3, #16
 8003e00:	617b      	str	r3, [r7, #20]
 8003e02:	e001      	b.n	8003e08 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003e04:	2320      	movs	r3, #32
 8003e06:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	2b20      	cmp	r3, #32
 8003e0e:	d802      	bhi.n	8003e16 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003e16:	2001      	movs	r0, #1
 8003e18:	f001 f9c4 	bl	80051a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003e1c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e26:	d125      	bne.n	8003e74 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d010      	beq.n	8003e52 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	461a      	mov	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4c:	3305      	adds	r3, #5
 8003e4e:	613b      	str	r3, [r7, #16]
 8003e50:	e01f      	b.n	8003e92 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	461a      	mov	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6e:	3305      	adds	r3, #5
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	e00e      	b.n	8003e92 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	461a      	mov	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8e:	3305      	adds	r3, #5
 8003e90:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	4a5c      	ldr	r2, [pc, #368]	; (8004008 <HAL_I2S_Init+0x270>)
 8003e96:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9a:	08db      	lsrs	r3, r3, #3
 8003e9c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	085b      	lsrs	r3, r3, #1
 8003eae:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	021b      	lsls	r3, r3, #8
 8003eb4:	61bb      	str	r3, [r7, #24]
 8003eb6:	e003      	b.n	8003ec0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003eb8:	2302      	movs	r3, #2
 8003eba:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d902      	bls.n	8003ecc <HAL_I2S_Init+0x134>
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	2bff      	cmp	r3, #255	; 0xff
 8003eca:	d907      	bls.n	8003edc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed0:	f043 0210 	orr.w	r2, r3, #16
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e08f      	b.n	8003ffc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691a      	ldr	r2, [r3, #16]
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	ea42 0103 	orr.w	r1, r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	69fa      	ldr	r2, [r7, #28]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003efa:	f023 030f 	bic.w	r3, r3, #15
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	6851      	ldr	r1, [r2, #4]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6892      	ldr	r2, [r2, #8]
 8003f06:	4311      	orrs	r1, r2
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	68d2      	ldr	r2, [r2, #12]
 8003f0c:	4311      	orrs	r1, r2
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6992      	ldr	r2, [r2, #24]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	431a      	orrs	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f1e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d161      	bne.n	8003fec <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a38      	ldr	r2, [pc, #224]	; (800400c <HAL_I2S_Init+0x274>)
 8003f2c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a37      	ldr	r2, [pc, #220]	; (8004010 <HAL_I2S_Init+0x278>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d101      	bne.n	8003f3c <HAL_I2S_Init+0x1a4>
 8003f38:	4b36      	ldr	r3, [pc, #216]	; (8004014 <HAL_I2S_Init+0x27c>)
 8003f3a:	e001      	b.n	8003f40 <HAL_I2S_Init+0x1a8>
 8003f3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6812      	ldr	r2, [r2, #0]
 8003f46:	4932      	ldr	r1, [pc, #200]	; (8004010 <HAL_I2S_Init+0x278>)
 8003f48:	428a      	cmp	r2, r1
 8003f4a:	d101      	bne.n	8003f50 <HAL_I2S_Init+0x1b8>
 8003f4c:	4a31      	ldr	r2, [pc, #196]	; (8004014 <HAL_I2S_Init+0x27c>)
 8003f4e:	e001      	b.n	8003f54 <HAL_I2S_Init+0x1bc>
 8003f50:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003f54:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003f58:	f023 030f 	bic.w	r3, r3, #15
 8003f5c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a2b      	ldr	r2, [pc, #172]	; (8004010 <HAL_I2S_Init+0x278>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d101      	bne.n	8003f6c <HAL_I2S_Init+0x1d4>
 8003f68:	4b2a      	ldr	r3, [pc, #168]	; (8004014 <HAL_I2S_Init+0x27c>)
 8003f6a:	e001      	b.n	8003f70 <HAL_I2S_Init+0x1d8>
 8003f6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f70:	2202      	movs	r2, #2
 8003f72:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a25      	ldr	r2, [pc, #148]	; (8004010 <HAL_I2S_Init+0x278>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d101      	bne.n	8003f82 <HAL_I2S_Init+0x1ea>
 8003f7e:	4b25      	ldr	r3, [pc, #148]	; (8004014 <HAL_I2S_Init+0x27c>)
 8003f80:	e001      	b.n	8003f86 <HAL_I2S_Init+0x1ee>
 8003f82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f92:	d003      	beq.n	8003f9c <HAL_I2S_Init+0x204>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d103      	bne.n	8003fa4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003f9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	e001      	b.n	8003fa8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	897b      	ldrh	r3, [r7, #10]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003fd4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a0d      	ldr	r2, [pc, #52]	; (8004010 <HAL_I2S_Init+0x278>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d101      	bne.n	8003fe4 <HAL_I2S_Init+0x24c>
 8003fe0:	4b0c      	ldr	r3, [pc, #48]	; (8004014 <HAL_I2S_Init+0x27c>)
 8003fe2:	e001      	b.n	8003fe8 <HAL_I2S_Init+0x250>
 8003fe4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fe8:	897a      	ldrh	r2, [r7, #10]
 8003fea:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3720      	adds	r7, #32
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	0800410f 	.word	0x0800410f
 8004008:	cccccccd 	.word	0xcccccccd
 800400c:	08004225 	.word	0x08004225
 8004010:	40003800 	.word	0x40003800
 8004014:	40003400 	.word	0x40003400

08004018 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	881a      	ldrh	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	1c9a      	adds	r2, r3, #2
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004076:	b29b      	uxth	r3, r3
 8004078:	3b01      	subs	r3, #1
 800407a:	b29a      	uxth	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004084:	b29b      	uxth	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10e      	bne.n	80040a8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004098:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7ff ffb8 	bl	8004018 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80040a8:	bf00      	nop
 80040aa:	3708      	adds	r7, #8
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68da      	ldr	r2, [r3, #12]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c2:	b292      	uxth	r2, r2
 80040c4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ca:	1c9a      	adds	r2, r3, #2
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	3b01      	subs	r3, #1
 80040d8:	b29a      	uxth	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10e      	bne.n	8004106 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040f6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7ff ff93 	bl	800402c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004106:	bf00      	nop
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b086      	sub	sp, #24
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b04      	cmp	r3, #4
 8004128:	d13a      	bne.n	80041a0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b01      	cmp	r3, #1
 8004132:	d109      	bne.n	8004148 <I2S_IRQHandler+0x3a>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413e:	2b40      	cmp	r3, #64	; 0x40
 8004140:	d102      	bne.n	8004148 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7ff ffb4 	bl	80040b0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414e:	2b40      	cmp	r3, #64	; 0x40
 8004150:	d126      	bne.n	80041a0 <I2S_IRQHandler+0x92>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f003 0320 	and.w	r3, r3, #32
 800415c:	2b20      	cmp	r3, #32
 800415e:	d11f      	bne.n	80041a0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685a      	ldr	r2, [r3, #4]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800416e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004170:	2300      	movs	r3, #0
 8004172:	613b      	str	r3, [r7, #16]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	613b      	str	r3, [r7, #16]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	613b      	str	r3, [r7, #16]
 8004184:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004192:	f043 0202 	orr.w	r2, r3, #2
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7ff ff50 	bl	8004040 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b03      	cmp	r3, #3
 80041aa:	d136      	bne.n	800421a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d109      	bne.n	80041ca <I2S_IRQHandler+0xbc>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c0:	2b80      	cmp	r3, #128	; 0x80
 80041c2:	d102      	bne.n	80041ca <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7ff ff45 	bl	8004054 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f003 0308 	and.w	r3, r3, #8
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d122      	bne.n	800421a <I2S_IRQHandler+0x10c>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f003 0320 	and.w	r3, r3, #32
 80041de:	2b20      	cmp	r3, #32
 80041e0:	d11b      	bne.n	800421a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041f0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80041f2:	2300      	movs	r3, #0
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420c:	f043 0204 	orr.w	r2, r3, #4
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7ff ff13 	bl	8004040 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800421a:	bf00      	nop
 800421c:	3718      	adds	r7, #24
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
	...

08004224 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b088      	sub	sp, #32
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a92      	ldr	r2, [pc, #584]	; (8004484 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d101      	bne.n	8004242 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800423e:	4b92      	ldr	r3, [pc, #584]	; (8004488 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004240:	e001      	b.n	8004246 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004242:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a8b      	ldr	r2, [pc, #556]	; (8004484 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d101      	bne.n	8004260 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800425c:	4b8a      	ldr	r3, [pc, #552]	; (8004488 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800425e:	e001      	b.n	8004264 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004260:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004270:	d004      	beq.n	800427c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	f040 8099 	bne.w	80043ae <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b02      	cmp	r3, #2
 8004284:	d107      	bne.n	8004296 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 f925 	bl	80044e0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b01      	cmp	r3, #1
 800429e:	d107      	bne.n	80042b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d002      	beq.n	80042b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f9c8 	bl	8004640 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b6:	2b40      	cmp	r3, #64	; 0x40
 80042b8:	d13a      	bne.n	8004330 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	f003 0320 	and.w	r3, r3, #32
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d035      	beq.n	8004330 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a6e      	ldr	r2, [pc, #440]	; (8004484 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d101      	bne.n	80042d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80042ce:	4b6e      	ldr	r3, [pc, #440]	; (8004488 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042d0:	e001      	b.n	80042d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80042d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4969      	ldr	r1, [pc, #420]	; (8004484 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042de:	428b      	cmp	r3, r1
 80042e0:	d101      	bne.n	80042e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80042e2:	4b69      	ldr	r3, [pc, #420]	; (8004488 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042e4:	e001      	b.n	80042ea <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80042e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042ee:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042fe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004300:	2300      	movs	r3, #0
 8004302:	60fb      	str	r3, [r7, #12]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	60fb      	str	r3, [r7, #12]
 8004314:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004322:	f043 0202 	orr.w	r2, r3, #2
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7ff fe88 	bl	8004040 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	f003 0308 	and.w	r3, r3, #8
 8004336:	2b08      	cmp	r3, #8
 8004338:	f040 80c3 	bne.w	80044c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	f003 0320 	and.w	r3, r3, #32
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 80bd 	beq.w	80044c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004356:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a49      	ldr	r2, [pc, #292]	; (8004484 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d101      	bne.n	8004366 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004362:	4b49      	ldr	r3, [pc, #292]	; (8004488 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004364:	e001      	b.n	800436a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004366:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4944      	ldr	r1, [pc, #272]	; (8004484 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004372:	428b      	cmp	r3, r1
 8004374:	d101      	bne.n	800437a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004376:	4b44      	ldr	r3, [pc, #272]	; (8004488 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004378:	e001      	b.n	800437e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800437a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800437e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004382:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004384:	2300      	movs	r3, #0
 8004386:	60bb      	str	r3, [r7, #8]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	60bb      	str	r3, [r7, #8]
 8004390:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439e:	f043 0204 	orr.w	r2, r3, #4
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7ff fe4a 	bl	8004040 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043ac:	e089      	b.n	80044c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d107      	bne.n	80043c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d002      	beq.n	80043c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f8be 	bl	8004544 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d107      	bne.n	80043e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d002      	beq.n	80043e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f8fd 	bl	80045dc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e8:	2b40      	cmp	r3, #64	; 0x40
 80043ea:	d12f      	bne.n	800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f003 0320 	and.w	r3, r3, #32
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d02a      	beq.n	800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004404:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a1e      	ldr	r2, [pc, #120]	; (8004484 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d101      	bne.n	8004414 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004410:	4b1d      	ldr	r3, [pc, #116]	; (8004488 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004412:	e001      	b.n	8004418 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004414:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4919      	ldr	r1, [pc, #100]	; (8004484 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004420:	428b      	cmp	r3, r1
 8004422:	d101      	bne.n	8004428 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004424:	4b18      	ldr	r3, [pc, #96]	; (8004488 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004426:	e001      	b.n	800442c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004428:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800442c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004430:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443e:	f043 0202 	orr.w	r2, r3, #2
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7ff fdfa 	bl	8004040 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	f003 0308 	and.w	r3, r3, #8
 8004452:	2b08      	cmp	r3, #8
 8004454:	d136      	bne.n	80044c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f003 0320 	and.w	r3, r3, #32
 800445c:	2b00      	cmp	r3, #0
 800445e:	d031      	beq.n	80044c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a07      	ldr	r2, [pc, #28]	; (8004484 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d101      	bne.n	800446e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800446a:	4b07      	ldr	r3, [pc, #28]	; (8004488 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800446c:	e001      	b.n	8004472 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800446e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4902      	ldr	r1, [pc, #8]	; (8004484 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800447a:	428b      	cmp	r3, r1
 800447c:	d106      	bne.n	800448c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800447e:	4b02      	ldr	r3, [pc, #8]	; (8004488 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004480:	e006      	b.n	8004490 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004482:	bf00      	nop
 8004484:	40003800 	.word	0x40003800
 8004488:	40003400 	.word	0x40003400
 800448c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004490:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004494:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044a4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b2:	f043 0204 	orr.w	r2, r3, #4
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7ff fdc0 	bl	8004040 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044c0:	e000      	b.n	80044c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80044c2:	bf00      	nop
}
 80044c4:	bf00      	nop
 80044c6:	3720      	adds	r7, #32
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ec:	1c99      	adds	r1, r3, #2
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	6251      	str	r1, [r2, #36]	; 0x24
 80044f2:	881a      	ldrh	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044fe:	b29b      	uxth	r3, r3
 8004500:	3b01      	subs	r3, #1
 8004502:	b29a      	uxth	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450c:	b29b      	uxth	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d113      	bne.n	800453a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004520:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004526:	b29b      	uxth	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	d106      	bne.n	800453a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f7ff ffc9 	bl	80044cc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800453a:	bf00      	nop
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
	...

08004544 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	1c99      	adds	r1, r3, #2
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	6251      	str	r1, [r2, #36]	; 0x24
 8004556:	8819      	ldrh	r1, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a1d      	ldr	r2, [pc, #116]	; (80045d4 <I2SEx_TxISR_I2SExt+0x90>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d101      	bne.n	8004566 <I2SEx_TxISR_I2SExt+0x22>
 8004562:	4b1d      	ldr	r3, [pc, #116]	; (80045d8 <I2SEx_TxISR_I2SExt+0x94>)
 8004564:	e001      	b.n	800456a <I2SEx_TxISR_I2SExt+0x26>
 8004566:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800456a:	460a      	mov	r2, r1
 800456c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004572:	b29b      	uxth	r3, r3
 8004574:	3b01      	subs	r3, #1
 8004576:	b29a      	uxth	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004580:	b29b      	uxth	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d121      	bne.n	80045ca <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a12      	ldr	r2, [pc, #72]	; (80045d4 <I2SEx_TxISR_I2SExt+0x90>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d101      	bne.n	8004594 <I2SEx_TxISR_I2SExt+0x50>
 8004590:	4b11      	ldr	r3, [pc, #68]	; (80045d8 <I2SEx_TxISR_I2SExt+0x94>)
 8004592:	e001      	b.n	8004598 <I2SEx_TxISR_I2SExt+0x54>
 8004594:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	490d      	ldr	r1, [pc, #52]	; (80045d4 <I2SEx_TxISR_I2SExt+0x90>)
 80045a0:	428b      	cmp	r3, r1
 80045a2:	d101      	bne.n	80045a8 <I2SEx_TxISR_I2SExt+0x64>
 80045a4:	4b0c      	ldr	r3, [pc, #48]	; (80045d8 <I2SEx_TxISR_I2SExt+0x94>)
 80045a6:	e001      	b.n	80045ac <I2SEx_TxISR_I2SExt+0x68>
 80045a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045b0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d106      	bne.n	80045ca <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7ff ff81 	bl	80044cc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045ca:	bf00      	nop
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	40003800 	.word	0x40003800
 80045d8:	40003400 	.word	0x40003400

080045dc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68d8      	ldr	r0, [r3, #12]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ee:	1c99      	adds	r1, r3, #2
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80045f4:	b282      	uxth	r2, r0
 80045f6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	3b01      	subs	r3, #1
 8004600:	b29a      	uxth	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800460a:	b29b      	uxth	r3, r3
 800460c:	2b00      	cmp	r3, #0
 800460e:	d113      	bne.n	8004638 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800461e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004624:	b29b      	uxth	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d106      	bne.n	8004638 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7ff ff4a 	bl	80044cc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004638:	bf00      	nop
 800463a:	3708      	adds	r7, #8
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a20      	ldr	r2, [pc, #128]	; (80046d0 <I2SEx_RxISR_I2SExt+0x90>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d101      	bne.n	8004656 <I2SEx_RxISR_I2SExt+0x16>
 8004652:	4b20      	ldr	r3, [pc, #128]	; (80046d4 <I2SEx_RxISR_I2SExt+0x94>)
 8004654:	e001      	b.n	800465a <I2SEx_RxISR_I2SExt+0x1a>
 8004656:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800465a:	68d8      	ldr	r0, [r3, #12]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004660:	1c99      	adds	r1, r3, #2
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004666:	b282      	uxth	r2, r0
 8004668:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800466e:	b29b      	uxth	r3, r3
 8004670:	3b01      	subs	r3, #1
 8004672:	b29a      	uxth	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800467c:	b29b      	uxth	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d121      	bne.n	80046c6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a12      	ldr	r2, [pc, #72]	; (80046d0 <I2SEx_RxISR_I2SExt+0x90>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d101      	bne.n	8004690 <I2SEx_RxISR_I2SExt+0x50>
 800468c:	4b11      	ldr	r3, [pc, #68]	; (80046d4 <I2SEx_RxISR_I2SExt+0x94>)
 800468e:	e001      	b.n	8004694 <I2SEx_RxISR_I2SExt+0x54>
 8004690:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	490d      	ldr	r1, [pc, #52]	; (80046d0 <I2SEx_RxISR_I2SExt+0x90>)
 800469c:	428b      	cmp	r3, r1
 800469e:	d101      	bne.n	80046a4 <I2SEx_RxISR_I2SExt+0x64>
 80046a0:	4b0c      	ldr	r3, [pc, #48]	; (80046d4 <I2SEx_RxISR_I2SExt+0x94>)
 80046a2:	e001      	b.n	80046a8 <I2SEx_RxISR_I2SExt+0x68>
 80046a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046a8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80046ac:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d106      	bne.n	80046c6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f7ff ff03 	bl	80044cc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80046c6:	bf00      	nop
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	40003800 	.word	0x40003800
 80046d4:	40003400 	.word	0x40003400

080046d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e267      	b.n	8004bba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d075      	beq.n	80047e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046f6:	4b88      	ldr	r3, [pc, #544]	; (8004918 <HAL_RCC_OscConfig+0x240>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 030c 	and.w	r3, r3, #12
 80046fe:	2b04      	cmp	r3, #4
 8004700:	d00c      	beq.n	800471c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004702:	4b85      	ldr	r3, [pc, #532]	; (8004918 <HAL_RCC_OscConfig+0x240>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800470a:	2b08      	cmp	r3, #8
 800470c:	d112      	bne.n	8004734 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800470e:	4b82      	ldr	r3, [pc, #520]	; (8004918 <HAL_RCC_OscConfig+0x240>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004716:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800471a:	d10b      	bne.n	8004734 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800471c:	4b7e      	ldr	r3, [pc, #504]	; (8004918 <HAL_RCC_OscConfig+0x240>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d05b      	beq.n	80047e0 <HAL_RCC_OscConfig+0x108>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d157      	bne.n	80047e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e242      	b.n	8004bba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800473c:	d106      	bne.n	800474c <HAL_RCC_OscConfig+0x74>
 800473e:	4b76      	ldr	r3, [pc, #472]	; (8004918 <HAL_RCC_OscConfig+0x240>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a75      	ldr	r2, [pc, #468]	; (8004918 <HAL_RCC_OscConfig+0x240>)
 8004744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004748:	6013      	str	r3, [r2, #0]
 800474a:	e01d      	b.n	8004788 <HAL_RCC_OscConfig+0xb0>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004754:	d10c      	bne.n	8004770 <HAL_RCC_OscConfig+0x98>
 8004756:	4b70      	ldr	r3, [pc, #448]	; (8004918 <HAL_RCC_OscConfig+0x240>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a6f      	ldr	r2, [pc, #444]	; (8004918 <HAL_RCC_OscConfig+0x240>)
 800475c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004760:	6013      	str	r3, [r2, #0]
 8004762:	4b6d      	ldr	r3, [pc, #436]	; (8004918 <HAL_RCC_OscConfig+0x240>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a6c      	ldr	r2, [pc, #432]	; (8004918 <HAL_RCC_OscConfig+0x240>)
 8004768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800476c:	6013      	str	r3, [r2, #0]
 800476e:	e00b      	b.n	8004788 <HAL_RCC_OscConfig+0xb0>
 8004770:	4b69      	ldr	r3, [pc, #420]	; (8004918 <HAL_RCC_OscConfig+0x240>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a68      	ldr	r2, [pc, #416]	; (8004918 <HAL_RCC_OscConfig+0x240>)
 8004776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800477a:	6013      	str	r3, [r2, #0]
 800477c:	4b66      	ldr	r3, [pc, #408]	; (8004918 <HAL_RCC_OscConfig+0x240>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a65      	ldr	r2, [pc, #404]	; (8004918 <HAL_RCC_OscConfig+0x240>)
 8004782:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004786:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d013      	beq.n	80047b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004790:	f7fd f85a 	bl	8001848 <HAL_GetTick>
 8004794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004796:	e008      	b.n	80047aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004798:	f7fd f856 	bl	8001848 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b64      	cmp	r3, #100	; 0x64
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e207      	b.n	8004bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047aa:	4b5b      	ldr	r3, [pc, #364]	; (8004918 <HAL_RCC_OscConfig+0x240>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d0f0      	beq.n	8004798 <HAL_RCC_OscConfig+0xc0>
 80047b6:	e014      	b.n	80047e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b8:	f7fd f846 	bl	8001848 <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047c0:	f7fd f842 	bl	8001848 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b64      	cmp	r3, #100	; 0x64
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e1f3      	b.n	8004bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047d2:	4b51      	ldr	r3, [pc, #324]	; (8004918 <HAL_RCC_OscConfig+0x240>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1f0      	bne.n	80047c0 <HAL_RCC_OscConfig+0xe8>
 80047de:	e000      	b.n	80047e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d063      	beq.n	80048b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047ee:	4b4a      	ldr	r3, [pc, #296]	; (8004918 <HAL_RCC_OscConfig+0x240>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f003 030c 	and.w	r3, r3, #12
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00b      	beq.n	8004812 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047fa:	4b47      	ldr	r3, [pc, #284]	; (8004918 <HAL_RCC_OscConfig+0x240>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004802:	2b08      	cmp	r3, #8
 8004804:	d11c      	bne.n	8004840 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004806:	4b44      	ldr	r3, [pc, #272]	; (8004918 <HAL_RCC_OscConfig+0x240>)
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d116      	bne.n	8004840 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004812:	4b41      	ldr	r3, [pc, #260]	; (8004918 <HAL_RCC_OscConfig+0x240>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d005      	beq.n	800482a <HAL_RCC_OscConfig+0x152>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d001      	beq.n	800482a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e1c7      	b.n	8004bba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800482a:	4b3b      	ldr	r3, [pc, #236]	; (8004918 <HAL_RCC_OscConfig+0x240>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	00db      	lsls	r3, r3, #3
 8004838:	4937      	ldr	r1, [pc, #220]	; (8004918 <HAL_RCC_OscConfig+0x240>)
 800483a:	4313      	orrs	r3, r2
 800483c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800483e:	e03a      	b.n	80048b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d020      	beq.n	800488a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004848:	4b34      	ldr	r3, [pc, #208]	; (800491c <HAL_RCC_OscConfig+0x244>)
 800484a:	2201      	movs	r2, #1
 800484c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484e:	f7fc fffb 	bl	8001848 <HAL_GetTick>
 8004852:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004854:	e008      	b.n	8004868 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004856:	f7fc fff7 	bl	8001848 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	2b02      	cmp	r3, #2
 8004862:	d901      	bls.n	8004868 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e1a8      	b.n	8004bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004868:	4b2b      	ldr	r3, [pc, #172]	; (8004918 <HAL_RCC_OscConfig+0x240>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d0f0      	beq.n	8004856 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004874:	4b28      	ldr	r3, [pc, #160]	; (8004918 <HAL_RCC_OscConfig+0x240>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	00db      	lsls	r3, r3, #3
 8004882:	4925      	ldr	r1, [pc, #148]	; (8004918 <HAL_RCC_OscConfig+0x240>)
 8004884:	4313      	orrs	r3, r2
 8004886:	600b      	str	r3, [r1, #0]
 8004888:	e015      	b.n	80048b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800488a:	4b24      	ldr	r3, [pc, #144]	; (800491c <HAL_RCC_OscConfig+0x244>)
 800488c:	2200      	movs	r2, #0
 800488e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004890:	f7fc ffda 	bl	8001848 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004898:	f7fc ffd6 	bl	8001848 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e187      	b.n	8004bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048aa:	4b1b      	ldr	r3, [pc, #108]	; (8004918 <HAL_RCC_OscConfig+0x240>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1f0      	bne.n	8004898 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0308 	and.w	r3, r3, #8
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d036      	beq.n	8004930 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d016      	beq.n	80048f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048ca:	4b15      	ldr	r3, [pc, #84]	; (8004920 <HAL_RCC_OscConfig+0x248>)
 80048cc:	2201      	movs	r2, #1
 80048ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d0:	f7fc ffba 	bl	8001848 <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048d8:	f7fc ffb6 	bl	8001848 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e167      	b.n	8004bba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ea:	4b0b      	ldr	r3, [pc, #44]	; (8004918 <HAL_RCC_OscConfig+0x240>)
 80048ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0f0      	beq.n	80048d8 <HAL_RCC_OscConfig+0x200>
 80048f6:	e01b      	b.n	8004930 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048f8:	4b09      	ldr	r3, [pc, #36]	; (8004920 <HAL_RCC_OscConfig+0x248>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048fe:	f7fc ffa3 	bl	8001848 <HAL_GetTick>
 8004902:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004904:	e00e      	b.n	8004924 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004906:	f7fc ff9f 	bl	8001848 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b02      	cmp	r3, #2
 8004912:	d907      	bls.n	8004924 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e150      	b.n	8004bba <HAL_RCC_OscConfig+0x4e2>
 8004918:	40023800 	.word	0x40023800
 800491c:	42470000 	.word	0x42470000
 8004920:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004924:	4b88      	ldr	r3, [pc, #544]	; (8004b48 <HAL_RCC_OscConfig+0x470>)
 8004926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1ea      	bne.n	8004906 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0304 	and.w	r3, r3, #4
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 8097 	beq.w	8004a6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800493e:	2300      	movs	r3, #0
 8004940:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004942:	4b81      	ldr	r3, [pc, #516]	; (8004b48 <HAL_RCC_OscConfig+0x470>)
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10f      	bne.n	800496e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800494e:	2300      	movs	r3, #0
 8004950:	60bb      	str	r3, [r7, #8]
 8004952:	4b7d      	ldr	r3, [pc, #500]	; (8004b48 <HAL_RCC_OscConfig+0x470>)
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	4a7c      	ldr	r2, [pc, #496]	; (8004b48 <HAL_RCC_OscConfig+0x470>)
 8004958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800495c:	6413      	str	r3, [r2, #64]	; 0x40
 800495e:	4b7a      	ldr	r3, [pc, #488]	; (8004b48 <HAL_RCC_OscConfig+0x470>)
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004966:	60bb      	str	r3, [r7, #8]
 8004968:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800496a:	2301      	movs	r3, #1
 800496c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800496e:	4b77      	ldr	r3, [pc, #476]	; (8004b4c <HAL_RCC_OscConfig+0x474>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004976:	2b00      	cmp	r3, #0
 8004978:	d118      	bne.n	80049ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800497a:	4b74      	ldr	r3, [pc, #464]	; (8004b4c <HAL_RCC_OscConfig+0x474>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a73      	ldr	r2, [pc, #460]	; (8004b4c <HAL_RCC_OscConfig+0x474>)
 8004980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004984:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004986:	f7fc ff5f 	bl	8001848 <HAL_GetTick>
 800498a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800498c:	e008      	b.n	80049a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800498e:	f7fc ff5b 	bl	8001848 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b02      	cmp	r3, #2
 800499a:	d901      	bls.n	80049a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e10c      	b.n	8004bba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a0:	4b6a      	ldr	r3, [pc, #424]	; (8004b4c <HAL_RCC_OscConfig+0x474>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d0f0      	beq.n	800498e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d106      	bne.n	80049c2 <HAL_RCC_OscConfig+0x2ea>
 80049b4:	4b64      	ldr	r3, [pc, #400]	; (8004b48 <HAL_RCC_OscConfig+0x470>)
 80049b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b8:	4a63      	ldr	r2, [pc, #396]	; (8004b48 <HAL_RCC_OscConfig+0x470>)
 80049ba:	f043 0301 	orr.w	r3, r3, #1
 80049be:	6713      	str	r3, [r2, #112]	; 0x70
 80049c0:	e01c      	b.n	80049fc <HAL_RCC_OscConfig+0x324>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	2b05      	cmp	r3, #5
 80049c8:	d10c      	bne.n	80049e4 <HAL_RCC_OscConfig+0x30c>
 80049ca:	4b5f      	ldr	r3, [pc, #380]	; (8004b48 <HAL_RCC_OscConfig+0x470>)
 80049cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ce:	4a5e      	ldr	r2, [pc, #376]	; (8004b48 <HAL_RCC_OscConfig+0x470>)
 80049d0:	f043 0304 	orr.w	r3, r3, #4
 80049d4:	6713      	str	r3, [r2, #112]	; 0x70
 80049d6:	4b5c      	ldr	r3, [pc, #368]	; (8004b48 <HAL_RCC_OscConfig+0x470>)
 80049d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049da:	4a5b      	ldr	r2, [pc, #364]	; (8004b48 <HAL_RCC_OscConfig+0x470>)
 80049dc:	f043 0301 	orr.w	r3, r3, #1
 80049e0:	6713      	str	r3, [r2, #112]	; 0x70
 80049e2:	e00b      	b.n	80049fc <HAL_RCC_OscConfig+0x324>
 80049e4:	4b58      	ldr	r3, [pc, #352]	; (8004b48 <HAL_RCC_OscConfig+0x470>)
 80049e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e8:	4a57      	ldr	r2, [pc, #348]	; (8004b48 <HAL_RCC_OscConfig+0x470>)
 80049ea:	f023 0301 	bic.w	r3, r3, #1
 80049ee:	6713      	str	r3, [r2, #112]	; 0x70
 80049f0:	4b55      	ldr	r3, [pc, #340]	; (8004b48 <HAL_RCC_OscConfig+0x470>)
 80049f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f4:	4a54      	ldr	r2, [pc, #336]	; (8004b48 <HAL_RCC_OscConfig+0x470>)
 80049f6:	f023 0304 	bic.w	r3, r3, #4
 80049fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d015      	beq.n	8004a30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a04:	f7fc ff20 	bl	8001848 <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a0a:	e00a      	b.n	8004a22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a0c:	f7fc ff1c 	bl	8001848 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e0cb      	b.n	8004bba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a22:	4b49      	ldr	r3, [pc, #292]	; (8004b48 <HAL_RCC_OscConfig+0x470>)
 8004a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d0ee      	beq.n	8004a0c <HAL_RCC_OscConfig+0x334>
 8004a2e:	e014      	b.n	8004a5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a30:	f7fc ff0a 	bl	8001848 <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a36:	e00a      	b.n	8004a4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a38:	f7fc ff06 	bl	8001848 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e0b5      	b.n	8004bba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a4e:	4b3e      	ldr	r3, [pc, #248]	; (8004b48 <HAL_RCC_OscConfig+0x470>)
 8004a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1ee      	bne.n	8004a38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a5a:	7dfb      	ldrb	r3, [r7, #23]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d105      	bne.n	8004a6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a60:	4b39      	ldr	r3, [pc, #228]	; (8004b48 <HAL_RCC_OscConfig+0x470>)
 8004a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a64:	4a38      	ldr	r2, [pc, #224]	; (8004b48 <HAL_RCC_OscConfig+0x470>)
 8004a66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 80a1 	beq.w	8004bb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a76:	4b34      	ldr	r3, [pc, #208]	; (8004b48 <HAL_RCC_OscConfig+0x470>)
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f003 030c 	and.w	r3, r3, #12
 8004a7e:	2b08      	cmp	r3, #8
 8004a80:	d05c      	beq.n	8004b3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d141      	bne.n	8004b0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a8a:	4b31      	ldr	r3, [pc, #196]	; (8004b50 <HAL_RCC_OscConfig+0x478>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a90:	f7fc feda 	bl	8001848 <HAL_GetTick>
 8004a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a96:	e008      	b.n	8004aaa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a98:	f7fc fed6 	bl	8001848 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e087      	b.n	8004bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aaa:	4b27      	ldr	r3, [pc, #156]	; (8004b48 <HAL_RCC_OscConfig+0x470>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1f0      	bne.n	8004a98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	69da      	ldr	r2, [r3, #28]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	019b      	lsls	r3, r3, #6
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004acc:	085b      	lsrs	r3, r3, #1
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	041b      	lsls	r3, r3, #16
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad8:	061b      	lsls	r3, r3, #24
 8004ada:	491b      	ldr	r1, [pc, #108]	; (8004b48 <HAL_RCC_OscConfig+0x470>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ae0:	4b1b      	ldr	r3, [pc, #108]	; (8004b50 <HAL_RCC_OscConfig+0x478>)
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae6:	f7fc feaf 	bl	8001848 <HAL_GetTick>
 8004aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aec:	e008      	b.n	8004b00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aee:	f7fc feab 	bl	8001848 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d901      	bls.n	8004b00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e05c      	b.n	8004bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b00:	4b11      	ldr	r3, [pc, #68]	; (8004b48 <HAL_RCC_OscConfig+0x470>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d0f0      	beq.n	8004aee <HAL_RCC_OscConfig+0x416>
 8004b0c:	e054      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b0e:	4b10      	ldr	r3, [pc, #64]	; (8004b50 <HAL_RCC_OscConfig+0x478>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b14:	f7fc fe98 	bl	8001848 <HAL_GetTick>
 8004b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b1a:	e008      	b.n	8004b2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b1c:	f7fc fe94 	bl	8001848 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e045      	b.n	8004bba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b2e:	4b06      	ldr	r3, [pc, #24]	; (8004b48 <HAL_RCC_OscConfig+0x470>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1f0      	bne.n	8004b1c <HAL_RCC_OscConfig+0x444>
 8004b3a:	e03d      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d107      	bne.n	8004b54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e038      	b.n	8004bba <HAL_RCC_OscConfig+0x4e2>
 8004b48:	40023800 	.word	0x40023800
 8004b4c:	40007000 	.word	0x40007000
 8004b50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b54:	4b1b      	ldr	r3, [pc, #108]	; (8004bc4 <HAL_RCC_OscConfig+0x4ec>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d028      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d121      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d11a      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b84:	4013      	ands	r3, r2
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d111      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9a:	085b      	lsrs	r3, r3, #1
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d107      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d001      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e000      	b.n	8004bba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3718      	adds	r7, #24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	40023800 	.word	0x40023800

08004bc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e0cc      	b.n	8004d76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bdc:	4b68      	ldr	r3, [pc, #416]	; (8004d80 <HAL_RCC_ClockConfig+0x1b8>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0307 	and.w	r3, r3, #7
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d90c      	bls.n	8004c04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bea:	4b65      	ldr	r3, [pc, #404]	; (8004d80 <HAL_RCC_ClockConfig+0x1b8>)
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	b2d2      	uxtb	r2, r2
 8004bf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bf2:	4b63      	ldr	r3, [pc, #396]	; (8004d80 <HAL_RCC_ClockConfig+0x1b8>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0307 	and.w	r3, r3, #7
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d001      	beq.n	8004c04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e0b8      	b.n	8004d76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d020      	beq.n	8004c52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0304 	and.w	r3, r3, #4
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d005      	beq.n	8004c28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c1c:	4b59      	ldr	r3, [pc, #356]	; (8004d84 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	4a58      	ldr	r2, [pc, #352]	; (8004d84 <HAL_RCC_ClockConfig+0x1bc>)
 8004c22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0308 	and.w	r3, r3, #8
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d005      	beq.n	8004c40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c34:	4b53      	ldr	r3, [pc, #332]	; (8004d84 <HAL_RCC_ClockConfig+0x1bc>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	4a52      	ldr	r2, [pc, #328]	; (8004d84 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c40:	4b50      	ldr	r3, [pc, #320]	; (8004d84 <HAL_RCC_ClockConfig+0x1bc>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	494d      	ldr	r1, [pc, #308]	; (8004d84 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d044      	beq.n	8004ce8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d107      	bne.n	8004c76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c66:	4b47      	ldr	r3, [pc, #284]	; (8004d84 <HAL_RCC_ClockConfig+0x1bc>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d119      	bne.n	8004ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e07f      	b.n	8004d76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d003      	beq.n	8004c86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c82:	2b03      	cmp	r3, #3
 8004c84:	d107      	bne.n	8004c96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c86:	4b3f      	ldr	r3, [pc, #252]	; (8004d84 <HAL_RCC_ClockConfig+0x1bc>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d109      	bne.n	8004ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e06f      	b.n	8004d76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c96:	4b3b      	ldr	r3, [pc, #236]	; (8004d84 <HAL_RCC_ClockConfig+0x1bc>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e067      	b.n	8004d76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ca6:	4b37      	ldr	r3, [pc, #220]	; (8004d84 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f023 0203 	bic.w	r2, r3, #3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	4934      	ldr	r1, [pc, #208]	; (8004d84 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cb8:	f7fc fdc6 	bl	8001848 <HAL_GetTick>
 8004cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cbe:	e00a      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cc0:	f7fc fdc2 	bl	8001848 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e04f      	b.n	8004d76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cd6:	4b2b      	ldr	r3, [pc, #172]	; (8004d84 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f003 020c 	and.w	r2, r3, #12
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d1eb      	bne.n	8004cc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ce8:	4b25      	ldr	r3, [pc, #148]	; (8004d80 <HAL_RCC_ClockConfig+0x1b8>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d20c      	bcs.n	8004d10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cf6:	4b22      	ldr	r3, [pc, #136]	; (8004d80 <HAL_RCC_ClockConfig+0x1b8>)
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	b2d2      	uxtb	r2, r2
 8004cfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cfe:	4b20      	ldr	r3, [pc, #128]	; (8004d80 <HAL_RCC_ClockConfig+0x1b8>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0307 	and.w	r3, r3, #7
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d001      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e032      	b.n	8004d76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0304 	and.w	r3, r3, #4
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d008      	beq.n	8004d2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d1c:	4b19      	ldr	r3, [pc, #100]	; (8004d84 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	4916      	ldr	r1, [pc, #88]	; (8004d84 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0308 	and.w	r3, r3, #8
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d009      	beq.n	8004d4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d3a:	4b12      	ldr	r3, [pc, #72]	; (8004d84 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	490e      	ldr	r1, [pc, #56]	; (8004d84 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d4e:	f000 f821 	bl	8004d94 <HAL_RCC_GetSysClockFreq>
 8004d52:	4602      	mov	r2, r0
 8004d54:	4b0b      	ldr	r3, [pc, #44]	; (8004d84 <HAL_RCC_ClockConfig+0x1bc>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	091b      	lsrs	r3, r3, #4
 8004d5a:	f003 030f 	and.w	r3, r3, #15
 8004d5e:	490a      	ldr	r1, [pc, #40]	; (8004d88 <HAL_RCC_ClockConfig+0x1c0>)
 8004d60:	5ccb      	ldrb	r3, [r1, r3]
 8004d62:	fa22 f303 	lsr.w	r3, r2, r3
 8004d66:	4a09      	ldr	r2, [pc, #36]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004d68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d6a:	4b09      	ldr	r3, [pc, #36]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7fc fd26 	bl	80017c0 <HAL_InitTick>

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	40023c00 	.word	0x40023c00
 8004d84:	40023800 	.word	0x40023800
 8004d88:	08008be0 	.word	0x08008be0
 8004d8c:	20000000 	.word	0x20000000
 8004d90:	20000004 	.word	0x20000004

08004d94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d98:	b094      	sub	sp, #80	; 0x50
 8004d9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	647b      	str	r3, [r7, #68]	; 0x44
 8004da0:	2300      	movs	r3, #0
 8004da2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004da4:	2300      	movs	r3, #0
 8004da6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004da8:	2300      	movs	r3, #0
 8004daa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dac:	4b79      	ldr	r3, [pc, #484]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f003 030c 	and.w	r3, r3, #12
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	d00d      	beq.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x40>
 8004db8:	2b08      	cmp	r3, #8
 8004dba:	f200 80e1 	bhi.w	8004f80 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d002      	beq.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x34>
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	d003      	beq.n	8004dce <HAL_RCC_GetSysClockFreq+0x3a>
 8004dc6:	e0db      	b.n	8004f80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004dc8:	4b73      	ldr	r3, [pc, #460]	; (8004f98 <HAL_RCC_GetSysClockFreq+0x204>)
 8004dca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004dcc:	e0db      	b.n	8004f86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dce:	4b73      	ldr	r3, [pc, #460]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x208>)
 8004dd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dd2:	e0d8      	b.n	8004f86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dd4:	4b6f      	ldr	r3, [pc, #444]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ddc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dde:	4b6d      	ldr	r3, [pc, #436]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d063      	beq.n	8004eb2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dea:	4b6a      	ldr	r3, [pc, #424]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	099b      	lsrs	r3, r3, #6
 8004df0:	2200      	movs	r2, #0
 8004df2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004df4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dfc:	633b      	str	r3, [r7, #48]	; 0x30
 8004dfe:	2300      	movs	r3, #0
 8004e00:	637b      	str	r3, [r7, #52]	; 0x34
 8004e02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004e06:	4622      	mov	r2, r4
 8004e08:	462b      	mov	r3, r5
 8004e0a:	f04f 0000 	mov.w	r0, #0
 8004e0e:	f04f 0100 	mov.w	r1, #0
 8004e12:	0159      	lsls	r1, r3, #5
 8004e14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e18:	0150      	lsls	r0, r2, #5
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	4621      	mov	r1, r4
 8004e20:	1a51      	subs	r1, r2, r1
 8004e22:	6139      	str	r1, [r7, #16]
 8004e24:	4629      	mov	r1, r5
 8004e26:	eb63 0301 	sbc.w	r3, r3, r1
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	f04f 0200 	mov.w	r2, #0
 8004e30:	f04f 0300 	mov.w	r3, #0
 8004e34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e38:	4659      	mov	r1, fp
 8004e3a:	018b      	lsls	r3, r1, #6
 8004e3c:	4651      	mov	r1, sl
 8004e3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e42:	4651      	mov	r1, sl
 8004e44:	018a      	lsls	r2, r1, #6
 8004e46:	4651      	mov	r1, sl
 8004e48:	ebb2 0801 	subs.w	r8, r2, r1
 8004e4c:	4659      	mov	r1, fp
 8004e4e:	eb63 0901 	sbc.w	r9, r3, r1
 8004e52:	f04f 0200 	mov.w	r2, #0
 8004e56:	f04f 0300 	mov.w	r3, #0
 8004e5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e66:	4690      	mov	r8, r2
 8004e68:	4699      	mov	r9, r3
 8004e6a:	4623      	mov	r3, r4
 8004e6c:	eb18 0303 	adds.w	r3, r8, r3
 8004e70:	60bb      	str	r3, [r7, #8]
 8004e72:	462b      	mov	r3, r5
 8004e74:	eb49 0303 	adc.w	r3, r9, r3
 8004e78:	60fb      	str	r3, [r7, #12]
 8004e7a:	f04f 0200 	mov.w	r2, #0
 8004e7e:	f04f 0300 	mov.w	r3, #0
 8004e82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e86:	4629      	mov	r1, r5
 8004e88:	024b      	lsls	r3, r1, #9
 8004e8a:	4621      	mov	r1, r4
 8004e8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e90:	4621      	mov	r1, r4
 8004e92:	024a      	lsls	r2, r1, #9
 8004e94:	4610      	mov	r0, r2
 8004e96:	4619      	mov	r1, r3
 8004e98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ea0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ea4:	f7fb fdae 	bl	8000a04 <__aeabi_uldivmod>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4613      	mov	r3, r2
 8004eae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004eb0:	e058      	b.n	8004f64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eb2:	4b38      	ldr	r3, [pc, #224]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	099b      	lsrs	r3, r3, #6
 8004eb8:	2200      	movs	r2, #0
 8004eba:	4618      	mov	r0, r3
 8004ebc:	4611      	mov	r1, r2
 8004ebe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ec2:	623b      	str	r3, [r7, #32]
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ec8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ecc:	4642      	mov	r2, r8
 8004ece:	464b      	mov	r3, r9
 8004ed0:	f04f 0000 	mov.w	r0, #0
 8004ed4:	f04f 0100 	mov.w	r1, #0
 8004ed8:	0159      	lsls	r1, r3, #5
 8004eda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ede:	0150      	lsls	r0, r2, #5
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4641      	mov	r1, r8
 8004ee6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004eea:	4649      	mov	r1, r9
 8004eec:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	f04f 0300 	mov.w	r3, #0
 8004ef8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004efc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f04:	ebb2 040a 	subs.w	r4, r2, sl
 8004f08:	eb63 050b 	sbc.w	r5, r3, fp
 8004f0c:	f04f 0200 	mov.w	r2, #0
 8004f10:	f04f 0300 	mov.w	r3, #0
 8004f14:	00eb      	lsls	r3, r5, #3
 8004f16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f1a:	00e2      	lsls	r2, r4, #3
 8004f1c:	4614      	mov	r4, r2
 8004f1e:	461d      	mov	r5, r3
 8004f20:	4643      	mov	r3, r8
 8004f22:	18e3      	adds	r3, r4, r3
 8004f24:	603b      	str	r3, [r7, #0]
 8004f26:	464b      	mov	r3, r9
 8004f28:	eb45 0303 	adc.w	r3, r5, r3
 8004f2c:	607b      	str	r3, [r7, #4]
 8004f2e:	f04f 0200 	mov.w	r2, #0
 8004f32:	f04f 0300 	mov.w	r3, #0
 8004f36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f3a:	4629      	mov	r1, r5
 8004f3c:	028b      	lsls	r3, r1, #10
 8004f3e:	4621      	mov	r1, r4
 8004f40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f44:	4621      	mov	r1, r4
 8004f46:	028a      	lsls	r2, r1, #10
 8004f48:	4610      	mov	r0, r2
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f4e:	2200      	movs	r2, #0
 8004f50:	61bb      	str	r3, [r7, #24]
 8004f52:	61fa      	str	r2, [r7, #28]
 8004f54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f58:	f7fb fd54 	bl	8000a04 <__aeabi_uldivmod>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	460b      	mov	r3, r1
 8004f60:	4613      	mov	r3, r2
 8004f62:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f64:	4b0b      	ldr	r3, [pc, #44]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	0c1b      	lsrs	r3, r3, #16
 8004f6a:	f003 0303 	and.w	r3, r3, #3
 8004f6e:	3301      	adds	r3, #1
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004f74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f7e:	e002      	b.n	8004f86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f80:	4b05      	ldr	r3, [pc, #20]	; (8004f98 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3750      	adds	r7, #80	; 0x50
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f92:	bf00      	nop
 8004f94:	40023800 	.word	0x40023800
 8004f98:	00f42400 	.word	0x00f42400
 8004f9c:	007a1200 	.word	0x007a1200

08004fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fa4:	4b03      	ldr	r3, [pc, #12]	; (8004fb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	20000000 	.word	0x20000000

08004fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004fbc:	f7ff fff0 	bl	8004fa0 <HAL_RCC_GetHCLKFreq>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	4b05      	ldr	r3, [pc, #20]	; (8004fd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	0a9b      	lsrs	r3, r3, #10
 8004fc8:	f003 0307 	and.w	r3, r3, #7
 8004fcc:	4903      	ldr	r1, [pc, #12]	; (8004fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fce:	5ccb      	ldrb	r3, [r1, r3]
 8004fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	40023800 	.word	0x40023800
 8004fdc:	08008bf0 	.word	0x08008bf0

08004fe0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004fec:	2300      	movs	r3, #0
 8004fee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d105      	bne.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005004:	2b00      	cmp	r3, #0
 8005006:	d035      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005008:	4b62      	ldr	r3, [pc, #392]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800500a:	2200      	movs	r2, #0
 800500c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800500e:	f7fc fc1b 	bl	8001848 <HAL_GetTick>
 8005012:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005014:	e008      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005016:	f7fc fc17 	bl	8001848 <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b02      	cmp	r3, #2
 8005022:	d901      	bls.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e0b0      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005028:	4b5b      	ldr	r3, [pc, #364]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1f0      	bne.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	019a      	lsls	r2, r3, #6
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	071b      	lsls	r3, r3, #28
 8005040:	4955      	ldr	r1, [pc, #340]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005042:	4313      	orrs	r3, r2
 8005044:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005048:	4b52      	ldr	r3, [pc, #328]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800504a:	2201      	movs	r2, #1
 800504c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800504e:	f7fc fbfb 	bl	8001848 <HAL_GetTick>
 8005052:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005054:	e008      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005056:	f7fc fbf7 	bl	8001848 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	2b02      	cmp	r3, #2
 8005062:	d901      	bls.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e090      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005068:	4b4b      	ldr	r3, [pc, #300]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d0f0      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0302 	and.w	r3, r3, #2
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 8083 	beq.w	8005188 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005082:	2300      	movs	r3, #0
 8005084:	60fb      	str	r3, [r7, #12]
 8005086:	4b44      	ldr	r3, [pc, #272]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508a:	4a43      	ldr	r2, [pc, #268]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800508c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005090:	6413      	str	r3, [r2, #64]	; 0x40
 8005092:	4b41      	ldr	r3, [pc, #260]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800509e:	4b3f      	ldr	r3, [pc, #252]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a3e      	ldr	r2, [pc, #248]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80050a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050a8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80050aa:	f7fc fbcd 	bl	8001848 <HAL_GetTick>
 80050ae:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80050b0:	e008      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80050b2:	f7fc fbc9 	bl	8001848 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d901      	bls.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e062      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80050c4:	4b35      	ldr	r3, [pc, #212]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0f0      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050d0:	4b31      	ldr	r3, [pc, #196]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050d8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d02f      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d028      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050ee:	4b2a      	ldr	r3, [pc, #168]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050f6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050f8:	4b29      	ldr	r3, [pc, #164]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80050fa:	2201      	movs	r2, #1
 80050fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050fe:	4b28      	ldr	r3, [pc, #160]	; (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005100:	2200      	movs	r2, #0
 8005102:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005104:	4a24      	ldr	r2, [pc, #144]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800510a:	4b23      	ldr	r3, [pc, #140]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800510c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b01      	cmp	r3, #1
 8005114:	d114      	bne.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005116:	f7fc fb97 	bl	8001848 <HAL_GetTick>
 800511a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800511c:	e00a      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800511e:	f7fc fb93 	bl	8001848 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	f241 3288 	movw	r2, #5000	; 0x1388
 800512c:	4293      	cmp	r3, r2
 800512e:	d901      	bls.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e02a      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005134:	4b18      	ldr	r3, [pc, #96]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0ee      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005148:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800514c:	d10d      	bne.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800514e:	4b12      	ldr	r3, [pc, #72]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800515e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005162:	490d      	ldr	r1, [pc, #52]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005164:	4313      	orrs	r3, r2
 8005166:	608b      	str	r3, [r1, #8]
 8005168:	e005      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800516a:	4b0b      	ldr	r3, [pc, #44]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	4a0a      	ldr	r2, [pc, #40]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005170:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005174:	6093      	str	r3, [r2, #8]
 8005176:	4b08      	ldr	r3, [pc, #32]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005178:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005182:	4905      	ldr	r1, [pc, #20]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005184:	4313      	orrs	r3, r2
 8005186:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3718      	adds	r7, #24
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	42470068 	.word	0x42470068
 8005198:	40023800 	.word	0x40023800
 800519c:	40007000 	.word	0x40007000
 80051a0:	42470e40 	.word	0x42470e40

080051a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b087      	sub	sp, #28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80051ac:	2300      	movs	r3, #0
 80051ae:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80051b0:	2300      	movs	r3, #0
 80051b2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80051b4:	2300      	movs	r3, #0
 80051b6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80051b8:	2300      	movs	r3, #0
 80051ba:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d13e      	bne.n	8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80051c2:	4b23      	ldr	r3, [pc, #140]	; (8005250 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d005      	beq.n	80051de <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d12f      	bne.n	8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80051d8:	4b1e      	ldr	r3, [pc, #120]	; (8005254 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80051da:	617b      	str	r3, [r7, #20]
          break;
 80051dc:	e02f      	b.n	800523e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80051de:	4b1c      	ldr	r3, [pc, #112]	; (8005250 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051ea:	d108      	bne.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80051ec:	4b18      	ldr	r3, [pc, #96]	; (8005250 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051f4:	4a18      	ldr	r2, [pc, #96]	; (8005258 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80051f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051fa:	613b      	str	r3, [r7, #16]
 80051fc:	e007      	b.n	800520e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80051fe:	4b14      	ldr	r3, [pc, #80]	; (8005250 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005206:	4a15      	ldr	r2, [pc, #84]	; (800525c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005208:	fbb2 f3f3 	udiv	r3, r2, r3
 800520c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800520e:	4b10      	ldr	r3, [pc, #64]	; (8005250 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005210:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005214:	099b      	lsrs	r3, r3, #6
 8005216:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	fb02 f303 	mul.w	r3, r2, r3
 8005220:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005222:	4b0b      	ldr	r3, [pc, #44]	; (8005250 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005228:	0f1b      	lsrs	r3, r3, #28
 800522a:	f003 0307 	and.w	r3, r3, #7
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	fbb2 f3f3 	udiv	r3, r2, r3
 8005234:	617b      	str	r3, [r7, #20]
          break;
 8005236:	e002      	b.n	800523e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005238:	2300      	movs	r3, #0
 800523a:	617b      	str	r3, [r7, #20]
          break;
 800523c:	bf00      	nop
        }
      }
      break;
 800523e:	bf00      	nop
    }
  }
  return frequency;
 8005240:	697b      	ldr	r3, [r7, #20]
}
 8005242:	4618      	mov	r0, r3
 8005244:	371c      	adds	r7, #28
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	40023800 	.word	0x40023800
 8005254:	00bb8000 	.word	0x00bb8000
 8005258:	007a1200 	.word	0x007a1200
 800525c:	00f42400 	.word	0x00f42400

08005260 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e07b      	b.n	800536a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005276:	2b00      	cmp	r3, #0
 8005278:	d108      	bne.n	800528c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005282:	d009      	beq.n	8005298 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	61da      	str	r2, [r3, #28]
 800528a:	e005      	b.n	8005298 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d106      	bne.n	80052b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7fc f974 	bl	80015a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2202      	movs	r2, #2
 80052bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80052e0:	431a      	orrs	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052ea:	431a      	orrs	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	f003 0302 	and.w	r3, r3, #2
 80052f4:	431a      	orrs	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	431a      	orrs	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005308:	431a      	orrs	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005312:	431a      	orrs	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800531c:	ea42 0103 	orr.w	r1, r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005324:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	430a      	orrs	r2, r1
 800532e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	0c1b      	lsrs	r3, r3, #16
 8005336:	f003 0104 	and.w	r1, r3, #4
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	f003 0210 	and.w	r2, r3, #16
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	69da      	ldr	r2, [r3, #28]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005358:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3708      	adds	r7, #8
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005372:	b084      	sub	sp, #16
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	f107 001c 	add.w	r0, r7, #28
 8005380:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005386:	2b01      	cmp	r3, #1
 8005388:	d122      	bne.n	80053d0 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800539e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80053b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d105      	bne.n	80053c4 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 f9bf 	bl	8005748 <USB_CoreReset>
 80053ca:	4603      	mov	r3, r0
 80053cc:	73fb      	strb	r3, [r7, #15]
 80053ce:	e01a      	b.n	8005406 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 f9b3 	bl	8005748 <USB_CoreReset>
 80053e2:	4603      	mov	r3, r0
 80053e4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80053e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d106      	bne.n	80053fa <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	639a      	str	r2, [r3, #56]	; 0x38
 80053f8:	e005      	b.n	8005406 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005408:	2b01      	cmp	r3, #1
 800540a:	d10b      	bne.n	8005424 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f043 0206 	orr.w	r2, r3, #6
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f043 0220 	orr.w	r2, r3, #32
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005424:	7bfb      	ldrb	r3, [r7, #15]
}
 8005426:	4618      	mov	r0, r3
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005430:	b004      	add	sp, #16
 8005432:	4770      	bx	lr

08005434 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f043 0201 	orr.w	r2, r3, #1
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005456:	b480      	push	{r7}
 8005458:	b083      	sub	sp, #12
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f023 0201 	bic.w	r2, r3, #1
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	460b      	mov	r3, r1
 8005482:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005484:	2300      	movs	r3, #0
 8005486:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005494:	78fb      	ldrb	r3, [r7, #3]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d115      	bne.n	80054c6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054a6:	2001      	movs	r0, #1
 80054a8:	f7fc f9da 	bl	8001860 <HAL_Delay>
      ms++;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	3301      	adds	r3, #1
 80054b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f939 	bl	800572a <USB_GetMode>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d01e      	beq.n	80054fc <USB_SetCurrentMode+0x84>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2b31      	cmp	r3, #49	; 0x31
 80054c2:	d9f0      	bls.n	80054a6 <USB_SetCurrentMode+0x2e>
 80054c4:	e01a      	b.n	80054fc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80054c6:	78fb      	ldrb	r3, [r7, #3]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d115      	bne.n	80054f8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054d8:	2001      	movs	r0, #1
 80054da:	f7fc f9c1 	bl	8001860 <HAL_Delay>
      ms++;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	3301      	adds	r3, #1
 80054e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 f920 	bl	800572a <USB_GetMode>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d005      	beq.n	80054fc <USB_SetCurrentMode+0x84>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2b31      	cmp	r3, #49	; 0x31
 80054f4:	d9f0      	bls.n	80054d8 <USB_SetCurrentMode+0x60>
 80054f6:	e001      	b.n	80054fc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e005      	b.n	8005508 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2b32      	cmp	r3, #50	; 0x32
 8005500:	d101      	bne.n	8005506 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e000      	b.n	8005508 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800551a:	2300      	movs	r3, #0
 800551c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	3301      	adds	r3, #1
 8005522:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4a13      	ldr	r2, [pc, #76]	; (8005574 <USB_FlushTxFifo+0x64>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d901      	bls.n	8005530 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e01b      	b.n	8005568 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	2b00      	cmp	r3, #0
 8005536:	daf2      	bge.n	800551e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005538:	2300      	movs	r3, #0
 800553a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	019b      	lsls	r3, r3, #6
 8005540:	f043 0220 	orr.w	r2, r3, #32
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	3301      	adds	r3, #1
 800554c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4a08      	ldr	r2, [pc, #32]	; (8005574 <USB_FlushTxFifo+0x64>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d901      	bls.n	800555a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e006      	b.n	8005568 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	f003 0320 	and.w	r3, r3, #32
 8005562:	2b20      	cmp	r3, #32
 8005564:	d0f0      	beq.n	8005548 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3714      	adds	r7, #20
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr
 8005574:	00030d40 	.word	0x00030d40

08005578 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005580:	2300      	movs	r3, #0
 8005582:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	3301      	adds	r3, #1
 8005588:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	4a11      	ldr	r2, [pc, #68]	; (80055d4 <USB_FlushRxFifo+0x5c>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d901      	bls.n	8005596 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e018      	b.n	80055c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	2b00      	cmp	r3, #0
 800559c:	daf2      	bge.n	8005584 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800559e:	2300      	movs	r3, #0
 80055a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2210      	movs	r2, #16
 80055a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	3301      	adds	r3, #1
 80055ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	4a08      	ldr	r2, [pc, #32]	; (80055d4 <USB_FlushRxFifo+0x5c>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d901      	bls.n	80055ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e006      	b.n	80055c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	f003 0310 	and.w	r3, r3, #16
 80055c2:	2b10      	cmp	r3, #16
 80055c4:	d0f0      	beq.n	80055a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	00030d40 	.word	0x00030d40

080055d8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80055d8:	b480      	push	{r7}
 80055da:	b089      	sub	sp, #36	; 0x24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	4611      	mov	r1, r2
 80055e4:	461a      	mov	r2, r3
 80055e6:	460b      	mov	r3, r1
 80055e8:	71fb      	strb	r3, [r7, #7]
 80055ea:	4613      	mov	r3, r2
 80055ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80055f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d123      	bne.n	8005646 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80055fe:	88bb      	ldrh	r3, [r7, #4]
 8005600:	3303      	adds	r3, #3
 8005602:	089b      	lsrs	r3, r3, #2
 8005604:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005606:	2300      	movs	r3, #0
 8005608:	61bb      	str	r3, [r7, #24]
 800560a:	e018      	b.n	800563e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800560c:	79fb      	ldrb	r3, [r7, #7]
 800560e:	031a      	lsls	r2, r3, #12
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	4413      	add	r3, r2
 8005614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005618:	461a      	mov	r2, r3
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	3301      	adds	r3, #1
 8005624:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	3301      	adds	r3, #1
 800562a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	3301      	adds	r3, #1
 8005630:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	3301      	adds	r3, #1
 8005636:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	3301      	adds	r3, #1
 800563c:	61bb      	str	r3, [r7, #24]
 800563e:	69ba      	ldr	r2, [r7, #24]
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	429a      	cmp	r2, r3
 8005644:	d3e2      	bcc.n	800560c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3724      	adds	r7, #36	; 0x24
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005654:	b480      	push	{r7}
 8005656:	b08b      	sub	sp, #44	; 0x2c
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	4613      	mov	r3, r2
 8005660:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800566a:	88fb      	ldrh	r3, [r7, #6]
 800566c:	089b      	lsrs	r3, r3, #2
 800566e:	b29b      	uxth	r3, r3
 8005670:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005672:	88fb      	ldrh	r3, [r7, #6]
 8005674:	f003 0303 	and.w	r3, r3, #3
 8005678:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800567a:	2300      	movs	r3, #0
 800567c:	623b      	str	r3, [r7, #32]
 800567e:	e014      	b.n	80056aa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568a:	601a      	str	r2, [r3, #0]
    pDest++;
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	3301      	adds	r3, #1
 8005690:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005694:	3301      	adds	r3, #1
 8005696:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569a:	3301      	adds	r3, #1
 800569c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	3301      	adds	r3, #1
 80056a2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80056a4:	6a3b      	ldr	r3, [r7, #32]
 80056a6:	3301      	adds	r3, #1
 80056a8:	623b      	str	r3, [r7, #32]
 80056aa:	6a3a      	ldr	r2, [r7, #32]
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d3e6      	bcc.n	8005680 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80056b2:	8bfb      	ldrh	r3, [r7, #30]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d01e      	beq.n	80056f6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80056b8:	2300      	movs	r3, #0
 80056ba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056c2:	461a      	mov	r2, r3
 80056c4:	f107 0310 	add.w	r3, r7, #16
 80056c8:	6812      	ldr	r2, [r2, #0]
 80056ca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	00db      	lsls	r3, r3, #3
 80056d4:	fa22 f303 	lsr.w	r3, r2, r3
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056dc:	701a      	strb	r2, [r3, #0]
      i++;
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	3301      	adds	r3, #1
 80056e2:	623b      	str	r3, [r7, #32]
      pDest++;
 80056e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e6:	3301      	adds	r3, #1
 80056e8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80056ea:	8bfb      	ldrh	r3, [r7, #30]
 80056ec:	3b01      	subs	r3, #1
 80056ee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80056f0:	8bfb      	ldrh	r3, [r7, #30]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1ea      	bne.n	80056cc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	372c      	adds	r7, #44	; 0x2c
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	695b      	ldr	r3, [r3, #20]
 8005710:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	4013      	ands	r3, r2
 800571a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800571c:	68fb      	ldr	r3, [r7, #12]
}
 800571e:	4618      	mov	r0, r3
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800572a:	b480      	push	{r7}
 800572c:	b083      	sub	sp, #12
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	f003 0301 	and.w	r3, r3, #1
}
 800573a:	4618      	mov	r0, r3
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
	...

08005748 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005750:	2300      	movs	r3, #0
 8005752:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	3301      	adds	r3, #1
 8005758:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	4a13      	ldr	r2, [pc, #76]	; (80057ac <USB_CoreReset+0x64>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d901      	bls.n	8005766 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e01b      	b.n	800579e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	2b00      	cmp	r3, #0
 800576c:	daf2      	bge.n	8005754 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800576e:	2300      	movs	r3, #0
 8005770:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	f043 0201 	orr.w	r2, r3, #1
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	3301      	adds	r3, #1
 8005782:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	4a09      	ldr	r2, [pc, #36]	; (80057ac <USB_CoreReset+0x64>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d901      	bls.n	8005790 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e006      	b.n	800579e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	2b01      	cmp	r3, #1
 800579a:	d0f0      	beq.n	800577e <USB_CoreReset+0x36>

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	00030d40 	.word	0x00030d40

080057b0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057b0:	b084      	sub	sp, #16
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b086      	sub	sp, #24
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
 80057ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80057be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80057c2:	2300      	movs	r3, #0
 80057c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80057d0:	461a      	mov	r2, r3
 80057d2:	2300      	movs	r3, #0
 80057d4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005802:	2b00      	cmp	r3, #0
 8005804:	d018      	beq.n	8005838 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005808:	2b01      	cmp	r3, #1
 800580a:	d10a      	bne.n	8005822 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800581a:	f043 0304 	orr.w	r3, r3, #4
 800581e:	6013      	str	r3, [r2, #0]
 8005820:	e014      	b.n	800584c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005830:	f023 0304 	bic.w	r3, r3, #4
 8005834:	6013      	str	r3, [r2, #0]
 8005836:	e009      	b.n	800584c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005846:	f023 0304 	bic.w	r3, r3, #4
 800584a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800584c:	2110      	movs	r1, #16
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7ff fe5e 	bl	8005510 <USB_FlushTxFifo>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f7ff fe8a 	bl	8005578 <USB_FlushRxFifo>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d001      	beq.n	800586e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800586e:	2300      	movs	r3, #0
 8005870:	613b      	str	r3, [r7, #16]
 8005872:	e015      	b.n	80058a0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4413      	add	r3, r2
 800587c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005880:	461a      	mov	r2, r3
 8005882:	f04f 33ff 	mov.w	r3, #4294967295
 8005886:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	4413      	add	r3, r2
 8005890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005894:	461a      	mov	r2, r3
 8005896:	2300      	movs	r3, #0
 8005898:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	3301      	adds	r3, #1
 800589e:	613b      	str	r3, [r7, #16]
 80058a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d3e5      	bcc.n	8005874 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f04f 32ff 	mov.w	r2, #4294967295
 80058b4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00b      	beq.n	80058da <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058c8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a13      	ldr	r2, [pc, #76]	; (800591c <USB_HostInit+0x16c>)
 80058ce:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a13      	ldr	r2, [pc, #76]	; (8005920 <USB_HostInit+0x170>)
 80058d4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80058d8:	e009      	b.n	80058ee <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2280      	movs	r2, #128	; 0x80
 80058de:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a10      	ldr	r2, [pc, #64]	; (8005924 <USB_HostInit+0x174>)
 80058e4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a0f      	ldr	r2, [pc, #60]	; (8005928 <USB_HostInit+0x178>)
 80058ea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80058ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d105      	bne.n	8005900 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	f043 0210 	orr.w	r2, r3, #16
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	699a      	ldr	r2, [r3, #24]
 8005904:	4b09      	ldr	r3, [pc, #36]	; (800592c <USB_HostInit+0x17c>)
 8005906:	4313      	orrs	r3, r2
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800590c:	7dfb      	ldrb	r3, [r7, #23]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3718      	adds	r7, #24
 8005912:	46bd      	mov	sp, r7
 8005914:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005918:	b004      	add	sp, #16
 800591a:	4770      	bx	lr
 800591c:	01000200 	.word	0x01000200
 8005920:	00e00300 	.word	0x00e00300
 8005924:	00600080 	.word	0x00600080
 8005928:	004000e0 	.word	0x004000e0
 800592c:	a3200008 	.word	0xa3200008

08005930 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	460b      	mov	r3, r1
 800593a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800594e:	f023 0303 	bic.w	r3, r3, #3
 8005952:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	78fb      	ldrb	r3, [r7, #3]
 800595e:	f003 0303 	and.w	r3, r3, #3
 8005962:	68f9      	ldr	r1, [r7, #12]
 8005964:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005968:	4313      	orrs	r3, r2
 800596a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800596c:	78fb      	ldrb	r3, [r7, #3]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d107      	bne.n	8005982 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005978:	461a      	mov	r2, r3
 800597a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800597e:	6053      	str	r3, [r2, #4]
 8005980:	e009      	b.n	8005996 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005982:	78fb      	ldrb	r3, [r7, #3]
 8005984:	2b02      	cmp	r3, #2
 8005986:	d106      	bne.n	8005996 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800598e:	461a      	mov	r2, r3
 8005990:	f241 7370 	movw	r3, #6000	; 0x1770
 8005994:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80059c4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80059ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059d2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80059d4:	2064      	movs	r0, #100	; 0x64
 80059d6:	f7fb ff43 	bl	8001860 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80059e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059e6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80059e8:	200a      	movs	r0, #10
 80059ea:	f7fb ff39 	bl	8001860 <HAL_Delay>

  return HAL_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3710      	adds	r7, #16
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	460b      	mov	r3, r1
 8005a02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005a1c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d109      	bne.n	8005a3c <USB_DriveVbus+0x44>
 8005a28:	78fb      	ldrb	r3, [r7, #3]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d106      	bne.n	8005a3c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005a36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a3a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a46:	d109      	bne.n	8005a5c <USB_DriveVbus+0x64>
 8005a48:	78fb      	ldrb	r3, [r7, #3]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d106      	bne.n	8005a5c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005a56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a5a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3714      	adds	r7, #20
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b085      	sub	sp, #20
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005a76:	2300      	movs	r3, #0
 8005a78:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	0c5b      	lsrs	r3, r3, #17
 8005a88:	f003 0303 	and.w	r3, r3, #3
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	b29b      	uxth	r3, r3
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3714      	adds	r7, #20
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
	...

08005abc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b088      	sub	sp, #32
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	4608      	mov	r0, r1
 8005ac6:	4611      	mov	r1, r2
 8005ac8:	461a      	mov	r2, r3
 8005aca:	4603      	mov	r3, r0
 8005acc:	70fb      	strb	r3, [r7, #3]
 8005ace:	460b      	mov	r3, r1
 8005ad0:	70bb      	strb	r3, [r7, #2]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005ade:	78fb      	ldrb	r3, [r7, #3]
 8005ae0:	015a      	lsls	r2, r3, #5
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aea:	461a      	mov	r2, r3
 8005aec:	f04f 33ff 	mov.w	r3, #4294967295
 8005af0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005af2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005af6:	2b03      	cmp	r3, #3
 8005af8:	d87e      	bhi.n	8005bf8 <USB_HC_Init+0x13c>
 8005afa:	a201      	add	r2, pc, #4	; (adr r2, 8005b00 <USB_HC_Init+0x44>)
 8005afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b00:	08005b11 	.word	0x08005b11
 8005b04:	08005bbb 	.word	0x08005bbb
 8005b08:	08005b11 	.word	0x08005b11
 8005b0c:	08005b7d 	.word	0x08005b7d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b10:	78fb      	ldrb	r3, [r7, #3]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005b22:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005b24:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	da10      	bge.n	8005b4e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005b2c:	78fb      	ldrb	r3, [r7, #3]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	78fa      	ldrb	r2, [r7, #3]
 8005b3c:	0151      	lsls	r1, r2, #5
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	440a      	add	r2, r1
 8005b42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b4a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005b4c:	e057      	b.n	8005bfe <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d051      	beq.n	8005bfe <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005b5a:	78fb      	ldrb	r3, [r7, #3]
 8005b5c:	015a      	lsls	r2, r3, #5
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	4413      	add	r3, r2
 8005b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	78fa      	ldrb	r2, [r7, #3]
 8005b6a:	0151      	lsls	r1, r2, #5
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	440a      	add	r2, r1
 8005b70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b74:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005b78:	60d3      	str	r3, [r2, #12]
      break;
 8005b7a:	e040      	b.n	8005bfe <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b7c:	78fb      	ldrb	r3, [r7, #3]
 8005b7e:	015a      	lsls	r2, r3, #5
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	4413      	add	r3, r2
 8005b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b88:	461a      	mov	r2, r3
 8005b8a:	f240 639d 	movw	r3, #1693	; 0x69d
 8005b8e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005b90:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	da34      	bge.n	8005c02 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005b98:	78fb      	ldrb	r3, [r7, #3]
 8005b9a:	015a      	lsls	r2, r3, #5
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	78fa      	ldrb	r2, [r7, #3]
 8005ba8:	0151      	lsls	r1, r2, #5
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	440a      	add	r2, r1
 8005bae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bb6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005bb8:	e023      	b.n	8005c02 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005bba:	78fb      	ldrb	r3, [r7, #3]
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	f240 2325 	movw	r3, #549	; 0x225
 8005bcc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005bce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	da17      	bge.n	8005c06 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005bd6:	78fb      	ldrb	r3, [r7, #3]
 8005bd8:	015a      	lsls	r2, r3, #5
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	78fa      	ldrb	r2, [r7, #3]
 8005be6:	0151      	lsls	r1, r2, #5
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	440a      	add	r2, r1
 8005bec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bf0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005bf4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005bf6:	e006      	b.n	8005c06 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	77fb      	strb	r3, [r7, #31]
      break;
 8005bfc:	e004      	b.n	8005c08 <USB_HC_Init+0x14c>
      break;
 8005bfe:	bf00      	nop
 8005c00:	e002      	b.n	8005c08 <USB_HC_Init+0x14c>
      break;
 8005c02:	bf00      	nop
 8005c04:	e000      	b.n	8005c08 <USB_HC_Init+0x14c>
      break;
 8005c06:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005c08:	78fb      	ldrb	r3, [r7, #3]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	78fa      	ldrb	r2, [r7, #3]
 8005c18:	0151      	lsls	r1, r2, #5
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	440a      	add	r2, r1
 8005c1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c22:	f043 0302 	orr.w	r3, r3, #2
 8005c26:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c2e:	699a      	ldr	r2, [r3, #24]
 8005c30:	78fb      	ldrb	r3, [r7, #3]
 8005c32:	f003 030f 	and.w	r3, r3, #15
 8005c36:	2101      	movs	r1, #1
 8005c38:	fa01 f303 	lsl.w	r3, r1, r3
 8005c3c:	6939      	ldr	r1, [r7, #16]
 8005c3e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005c42:	4313      	orrs	r3, r2
 8005c44:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005c52:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	da03      	bge.n	8005c62 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005c5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c5e:	61bb      	str	r3, [r7, #24]
 8005c60:	e001      	b.n	8005c66 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005c62:	2300      	movs	r3, #0
 8005c64:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f7ff feff 	bl	8005a6a <USB_GetHostSpeed>
 8005c6c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005c6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d106      	bne.n	8005c84 <USB_HC_Init+0x1c8>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d003      	beq.n	8005c84 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005c7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c80:	617b      	str	r3, [r7, #20]
 8005c82:	e001      	b.n	8005c88 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005c84:	2300      	movs	r3, #0
 8005c86:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c88:	787b      	ldrb	r3, [r7, #1]
 8005c8a:	059b      	lsls	r3, r3, #22
 8005c8c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005c90:	78bb      	ldrb	r3, [r7, #2]
 8005c92:	02db      	lsls	r3, r3, #11
 8005c94:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c98:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005c9a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005c9e:	049b      	lsls	r3, r3, #18
 8005ca0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005ca4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005ca6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005ca8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005cac:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005cb2:	78fb      	ldrb	r3, [r7, #3]
 8005cb4:	0159      	lsls	r1, r3, #5
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	440b      	add	r3, r1
 8005cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cbe:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005cc4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005cc6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005cca:	2b03      	cmp	r3, #3
 8005ccc:	d003      	beq.n	8005cd6 <USB_HC_Init+0x21a>
 8005cce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d10f      	bne.n	8005cf6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005cd6:	78fb      	ldrb	r3, [r7, #3]
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	78fa      	ldrb	r2, [r7, #3]
 8005ce6:	0151      	lsls	r1, r2, #5
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	440a      	add	r2, r1
 8005cec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cf0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005cf4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005cf6:	7ffb      	ldrb	r3, [r7, #31]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3720      	adds	r7, #32
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b08c      	sub	sp, #48	; 0x30
 8005d04:	af02      	add	r7, sp, #8
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	785b      	ldrb	r3, [r3, #1]
 8005d16:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005d18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d1c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d02d      	beq.n	8005d86 <USB_HC_StartXfer+0x86>
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	791b      	ldrb	r3, [r3, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d129      	bne.n	8005d86 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005d32:	79fb      	ldrb	r3, [r7, #7]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d117      	bne.n	8005d68 <USB_HC_StartXfer+0x68>
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	79db      	ldrb	r3, [r3, #7]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <USB_HC_StartXfer+0x48>
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	79db      	ldrb	r3, [r3, #7]
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d10f      	bne.n	8005d68 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	015a      	lsls	r2, r3, #5
 8005d4c:	6a3b      	ldr	r3, [r7, #32]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	69fa      	ldr	r2, [r7, #28]
 8005d58:	0151      	lsls	r1, r2, #5
 8005d5a:	6a3a      	ldr	r2, [r7, #32]
 8005d5c:	440a      	add	r2, r1
 8005d5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d66:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005d68:	79fb      	ldrb	r3, [r7, #7]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10b      	bne.n	8005d86 <USB_HC_StartXfer+0x86>
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	795b      	ldrb	r3, [r3, #5]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d107      	bne.n	8005d86 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	785b      	ldrb	r3, [r3, #1]
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 fa0f 	bl	80061a0 <USB_DoPing>
      return HAL_OK;
 8005d82:	2300      	movs	r3, #0
 8005d84:	e0f8      	b.n	8005f78 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d018      	beq.n	8005dc0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	8912      	ldrh	r2, [r2, #8]
 8005d96:	4413      	add	r3, r2
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	8912      	ldrh	r2, [r2, #8]
 8005d9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005da2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005da4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005da6:	8b7b      	ldrh	r3, [r7, #26]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d90b      	bls.n	8005dc4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005dac:	8b7b      	ldrh	r3, [r7, #26]
 8005dae:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005db0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	8912      	ldrh	r2, [r2, #8]
 8005db6:	fb03 f202 	mul.w	r2, r3, r2
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	611a      	str	r2, [r3, #16]
 8005dbe:	e001      	b.n	8005dc4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	78db      	ldrb	r3, [r3, #3]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d007      	beq.n	8005ddc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005dcc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	8912      	ldrh	r2, [r2, #8]
 8005dd2:	fb03 f202 	mul.w	r2, r3, r2
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	611a      	str	r2, [r3, #16]
 8005dda:	e003      	b.n	8005de4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	695a      	ldr	r2, [r3, #20]
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005dec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005dee:	04d9      	lsls	r1, r3, #19
 8005df0:	4b63      	ldr	r3, [pc, #396]	; (8005f80 <USB_HC_StartXfer+0x280>)
 8005df2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005df4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	7a9b      	ldrb	r3, [r3, #10]
 8005dfa:	075b      	lsls	r3, r3, #29
 8005dfc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e00:	69f9      	ldr	r1, [r7, #28]
 8005e02:	0148      	lsls	r0, r1, #5
 8005e04:	6a39      	ldr	r1, [r7, #32]
 8005e06:	4401      	add	r1, r0
 8005e08:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e0c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e0e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005e10:	79fb      	ldrb	r3, [r7, #7]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d009      	beq.n	8005e2a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	68d9      	ldr	r1, [r3, #12]
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	015a      	lsls	r2, r3, #5
 8005e1e:	6a3b      	ldr	r3, [r7, #32]
 8005e20:	4413      	add	r3, r2
 8005e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e26:	460a      	mov	r2, r1
 8005e28:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	bf0c      	ite	eq
 8005e3a:	2301      	moveq	r3, #1
 8005e3c:	2300      	movne	r3, #0
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	6a3b      	ldr	r3, [r7, #32]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	69fa      	ldr	r2, [r7, #28]
 8005e52:	0151      	lsls	r1, r2, #5
 8005e54:	6a3a      	ldr	r2, [r7, #32]
 8005e56:	440a      	add	r2, r1
 8005e58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e5c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005e60:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	6a3b      	ldr	r3, [r7, #32]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	7e7b      	ldrb	r3, [r7, #25]
 8005e72:	075b      	lsls	r3, r3, #29
 8005e74:	69f9      	ldr	r1, [r7, #28]
 8005e76:	0148      	lsls	r0, r1, #5
 8005e78:	6a39      	ldr	r1, [r7, #32]
 8005e7a:	4401      	add	r1, r0
 8005e7c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005e80:	4313      	orrs	r3, r2
 8005e82:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	6a3b      	ldr	r3, [r7, #32]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e9a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	78db      	ldrb	r3, [r3, #3]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d004      	beq.n	8005eae <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eaa:	613b      	str	r3, [r7, #16]
 8005eac:	e003      	b.n	8005eb6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005eb4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ebc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	015a      	lsls	r2, r3, #5
 8005ec2:	6a3b      	ldr	r3, [r7, #32]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eca:	461a      	mov	r2, r3
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005ed0:	79fb      	ldrb	r3, [r7, #7]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	e04e      	b.n	8005f78 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	78db      	ldrb	r3, [r3, #3]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d149      	bne.n	8005f76 <USB_HC_StartXfer+0x276>
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d045      	beq.n	8005f76 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	79db      	ldrb	r3, [r3, #7]
 8005eee:	2b03      	cmp	r3, #3
 8005ef0:	d830      	bhi.n	8005f54 <USB_HC_StartXfer+0x254>
 8005ef2:	a201      	add	r2, pc, #4	; (adr r2, 8005ef8 <USB_HC_StartXfer+0x1f8>)
 8005ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef8:	08005f09 	.word	0x08005f09
 8005efc:	08005f2d 	.word	0x08005f2d
 8005f00:	08005f09 	.word	0x08005f09
 8005f04:	08005f2d 	.word	0x08005f2d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	3303      	adds	r3, #3
 8005f0e:	089b      	lsrs	r3, r3, #2
 8005f10:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005f12:	8afa      	ldrh	r2, [r7, #22]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d91c      	bls.n	8005f58 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	f043 0220 	orr.w	r2, r3, #32
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	619a      	str	r2, [r3, #24]
        }
        break;
 8005f2a:	e015      	b.n	8005f58 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	695b      	ldr	r3, [r3, #20]
 8005f30:	3303      	adds	r3, #3
 8005f32:	089b      	lsrs	r3, r3, #2
 8005f34:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005f36:	8afa      	ldrh	r2, [r7, #22]
 8005f38:	6a3b      	ldr	r3, [r7, #32]
 8005f3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d90a      	bls.n	8005f5c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	619a      	str	r2, [r3, #24]
        }
        break;
 8005f52:	e003      	b.n	8005f5c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005f54:	bf00      	nop
 8005f56:	e002      	b.n	8005f5e <USB_HC_StartXfer+0x25e>
        break;
 8005f58:	bf00      	nop
 8005f5a:	e000      	b.n	8005f5e <USB_HC_StartXfer+0x25e>
        break;
 8005f5c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	68d9      	ldr	r1, [r3, #12]
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	785a      	ldrb	r2, [r3, #1]
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	2000      	movs	r0, #0
 8005f6e:	9000      	str	r0, [sp, #0]
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f7ff fb31 	bl	80055d8 <USB_WritePacket>
  }

  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3728      	adds	r7, #40	; 0x28
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	1ff80000 	.word	0x1ff80000

08005f84 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	b29b      	uxth	r3, r3
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3714      	adds	r7, #20
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b089      	sub	sp, #36	; 0x24
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
 8005fae:	460b      	mov	r3, r1
 8005fb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005fb6:	78fb      	ldrb	r3, [r7, #3]
 8005fb8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	0c9b      	lsrs	r3, r3, #18
 8005fce:	f003 0303 	and.w	r3, r3, #3
 8005fd2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	015a      	lsls	r2, r3, #5
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	0fdb      	lsrs	r3, r3, #31
 8005fe4:	f003 0301 	and.w	r3, r3, #1
 8005fe8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f003 0320 	and.w	r3, r3, #32
 8005ff2:	2b20      	cmp	r3, #32
 8005ff4:	d104      	bne.n	8006000 <USB_HC_Halt+0x5a>
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d101      	bne.n	8006000 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	e0c8      	b.n	8006192 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d002      	beq.n	800600c <USB_HC_Halt+0x66>
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	2b02      	cmp	r3, #2
 800600a:	d163      	bne.n	80060d4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	4413      	add	r3, r2
 8006014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	0151      	lsls	r1, r2, #5
 800601e:	69fa      	ldr	r2, [r7, #28]
 8006020:	440a      	add	r2, r1
 8006022:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006026:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800602a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f003 0320 	and.w	r3, r3, #32
 8006034:	2b00      	cmp	r3, #0
 8006036:	f040 80ab 	bne.w	8006190 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d133      	bne.n	80060ae <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	015a      	lsls	r2, r3, #5
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	4413      	add	r3, r2
 800604e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	69ba      	ldr	r2, [r7, #24]
 8006056:	0151      	lsls	r1, r2, #5
 8006058:	69fa      	ldr	r2, [r7, #28]
 800605a:	440a      	add	r2, r1
 800605c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006060:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006064:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	015a      	lsls	r2, r3, #5
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	4413      	add	r3, r2
 800606e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	69ba      	ldr	r2, [r7, #24]
 8006076:	0151      	lsls	r1, r2, #5
 8006078:	69fa      	ldr	r2, [r7, #28]
 800607a:	440a      	add	r2, r1
 800607c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006080:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006084:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	3301      	adds	r3, #1
 800608a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006092:	d81d      	bhi.n	80060d0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	4413      	add	r3, r2
 800609c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060aa:	d0ec      	beq.n	8006086 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80060ac:	e070      	b.n	8006190 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	015a      	lsls	r2, r3, #5
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	4413      	add	r3, r2
 80060b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	0151      	lsls	r1, r2, #5
 80060c0:	69fa      	ldr	r2, [r7, #28]
 80060c2:	440a      	add	r2, r1
 80060c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060cc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80060ce:	e05f      	b.n	8006190 <USB_HC_Halt+0x1ea>
            break;
 80060d0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80060d2:	e05d      	b.n	8006190 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	0151      	lsls	r1, r2, #5
 80060e6:	69fa      	ldr	r2, [r7, #28]
 80060e8:	440a      	add	r2, r1
 80060ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060f2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d133      	bne.n	800616c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	4413      	add	r3, r2
 800610c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	0151      	lsls	r1, r2, #5
 8006116:	69fa      	ldr	r2, [r7, #28]
 8006118:	440a      	add	r2, r1
 800611a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800611e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006122:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	4413      	add	r3, r2
 800612c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	69ba      	ldr	r2, [r7, #24]
 8006134:	0151      	lsls	r1, r2, #5
 8006136:	69fa      	ldr	r2, [r7, #28]
 8006138:	440a      	add	r2, r1
 800613a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800613e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006142:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	3301      	adds	r3, #1
 8006148:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006150:	d81d      	bhi.n	800618e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	4413      	add	r3, r2
 800615a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006164:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006168:	d0ec      	beq.n	8006144 <USB_HC_Halt+0x19e>
 800616a:	e011      	b.n	8006190 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	4413      	add	r3, r2
 8006174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	69ba      	ldr	r2, [r7, #24]
 800617c:	0151      	lsls	r1, r2, #5
 800617e:	69fa      	ldr	r2, [r7, #28]
 8006180:	440a      	add	r2, r1
 8006182:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006186:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800618a:	6013      	str	r3, [r2, #0]
 800618c:	e000      	b.n	8006190 <USB_HC_Halt+0x1ea>
          break;
 800618e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3724      	adds	r7, #36	; 0x24
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
	...

080061a0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b087      	sub	sp, #28
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	460b      	mov	r3, r1
 80061aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80061b0:	78fb      	ldrb	r3, [r7, #3]
 80061b2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80061b4:	2301      	movs	r3, #1
 80061b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	04da      	lsls	r2, r3, #19
 80061bc:	4b15      	ldr	r3, [pc, #84]	; (8006214 <USB_DoPing+0x74>)
 80061be:	4013      	ands	r3, r2
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	0151      	lsls	r1, r2, #5
 80061c4:	697a      	ldr	r2, [r7, #20]
 80061c6:	440a      	add	r2, r1
 80061c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061d0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	015a      	lsls	r2, r3, #5
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	4413      	add	r3, r2
 80061da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061e8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061f0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	015a      	lsls	r2, r3, #5
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061fe:	461a      	mov	r2, r3
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	371c      	adds	r7, #28
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	1ff80000 	.word	0x1ff80000

08006218 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b088      	sub	sp, #32
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006220:	2300      	movs	r3, #0
 8006222:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006228:	2300      	movs	r3, #0
 800622a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f7ff f912 	bl	8005456 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006232:	2110      	movs	r1, #16
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f7ff f96b 	bl	8005510 <USB_FlushTxFifo>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d001      	beq.n	8006244 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f7ff f997 	bl	8005578 <USB_FlushRxFifo>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d001      	beq.n	8006254 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006254:	2300      	movs	r3, #0
 8006256:	61bb      	str	r3, [r7, #24]
 8006258:	e01f      	b.n	800629a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	4413      	add	r3, r2
 8006262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006270:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006278:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006280:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	015a      	lsls	r2, r3, #5
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	4413      	add	r3, r2
 800628a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800628e:	461a      	mov	r2, r3
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	3301      	adds	r3, #1
 8006298:	61bb      	str	r3, [r7, #24]
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	2b0f      	cmp	r3, #15
 800629e:	d9dc      	bls.n	800625a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80062a0:	2300      	movs	r3, #0
 80062a2:	61bb      	str	r3, [r7, #24]
 80062a4:	e034      	b.n	8006310 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	015a      	lsls	r2, r3, #5
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	4413      	add	r3, r2
 80062ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062bc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062c4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062cc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	015a      	lsls	r2, r3, #5
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	4413      	add	r3, r2
 80062d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062da:	461a      	mov	r2, r3
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	3301      	adds	r3, #1
 80062e4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062ec:	d80c      	bhi.n	8006308 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006300:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006304:	d0ec      	beq.n	80062e0 <USB_StopHost+0xc8>
 8006306:	e000      	b.n	800630a <USB_StopHost+0xf2>
        break;
 8006308:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	3301      	adds	r3, #1
 800630e:	61bb      	str	r3, [r7, #24]
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	2b0f      	cmp	r3, #15
 8006314:	d9c7      	bls.n	80062a6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800631c:	461a      	mov	r2, r3
 800631e:	f04f 33ff 	mov.w	r3, #4294967295
 8006322:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f04f 32ff 	mov.w	r2, #4294967295
 800632a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f7ff f881 	bl	8005434 <USB_EnableGlobalInt>

  return ret;
 8006332:	7ffb      	ldrb	r3, [r7, #31]
}
 8006334:	4618      	mov	r0, r3
 8006336:	3720      	adds	r7, #32
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800633c:	b590      	push	{r4, r7, lr}
 800633e:	b089      	sub	sp, #36	; 0x24
 8006340:	af04      	add	r7, sp, #16
 8006342:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006344:	2301      	movs	r3, #1
 8006346:	2202      	movs	r2, #2
 8006348:	2102      	movs	r1, #2
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fc66 	bl	8006c1c <USBH_FindInterface>
 8006350:	4603      	mov	r3, r0
 8006352:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006354:	7bfb      	ldrb	r3, [r7, #15]
 8006356:	2bff      	cmp	r3, #255	; 0xff
 8006358:	d002      	beq.n	8006360 <USBH_CDC_InterfaceInit+0x24>
 800635a:	7bfb      	ldrb	r3, [r7, #15]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d901      	bls.n	8006364 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006360:	2302      	movs	r3, #2
 8006362:	e13d      	b.n	80065e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006364:	7bfb      	ldrb	r3, [r7, #15]
 8006366:	4619      	mov	r1, r3
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 fc3b 	bl	8006be4 <USBH_SelectInterface>
 800636e:	4603      	mov	r3, r0
 8006370:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006372:	7bbb      	ldrb	r3, [r7, #14]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d001      	beq.n	800637c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006378:	2302      	movs	r3, #2
 800637a:	e131      	b.n	80065e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006382:	2050      	movs	r0, #80	; 0x50
 8006384:	f002 fad2 	bl	800892c <malloc>
 8006388:	4603      	mov	r3, r0
 800638a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006392:	69db      	ldr	r3, [r3, #28]
 8006394:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d101      	bne.n	80063a0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800639c:	2302      	movs	r3, #2
 800639e:	e11f      	b.n	80065e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80063a0:	2250      	movs	r2, #80	; 0x50
 80063a2:	2100      	movs	r1, #0
 80063a4:	68b8      	ldr	r0, [r7, #8]
 80063a6:	f002 fb7d 	bl	8008aa4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80063aa:	7bfb      	ldrb	r3, [r7, #15]
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	211a      	movs	r1, #26
 80063b0:	fb01 f303 	mul.w	r3, r1, r3
 80063b4:	4413      	add	r3, r2
 80063b6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	b25b      	sxtb	r3, r3
 80063be:	2b00      	cmp	r3, #0
 80063c0:	da15      	bge.n	80063ee <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80063c2:	7bfb      	ldrb	r3, [r7, #15]
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	211a      	movs	r1, #26
 80063c8:	fb01 f303 	mul.w	r3, r1, r3
 80063cc:	4413      	add	r3, r2
 80063ce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80063d2:	781a      	ldrb	r2, [r3, #0]
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80063d8:	7bfb      	ldrb	r3, [r7, #15]
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	211a      	movs	r1, #26
 80063de:	fb01 f303 	mul.w	r3, r1, r3
 80063e2:	4413      	add	r3, r2
 80063e4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80063e8:	881a      	ldrh	r2, [r3, #0]
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	785b      	ldrb	r3, [r3, #1]
 80063f2:	4619      	mov	r1, r3
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f001 ff2e 	bl	8008256 <USBH_AllocPipe>
 80063fa:	4603      	mov	r3, r0
 80063fc:	461a      	mov	r2, r3
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	7819      	ldrb	r1, [r3, #0]
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	7858      	ldrb	r0, [r3, #1]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	8952      	ldrh	r2, [r2, #10]
 800641a:	9202      	str	r2, [sp, #8]
 800641c:	2203      	movs	r2, #3
 800641e:	9201      	str	r2, [sp, #4]
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	4623      	mov	r3, r4
 8006424:	4602      	mov	r2, r0
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f001 fee6 	bl	80081f8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	2200      	movs	r2, #0
 8006432:	4619      	mov	r1, r3
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f002 f9f5 	bl	8008824 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800643a:	2300      	movs	r3, #0
 800643c:	2200      	movs	r2, #0
 800643e:	210a      	movs	r1, #10
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 fbeb 	bl	8006c1c <USBH_FindInterface>
 8006446:	4603      	mov	r3, r0
 8006448:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800644a:	7bfb      	ldrb	r3, [r7, #15]
 800644c:	2bff      	cmp	r3, #255	; 0xff
 800644e:	d002      	beq.n	8006456 <USBH_CDC_InterfaceInit+0x11a>
 8006450:	7bfb      	ldrb	r3, [r7, #15]
 8006452:	2b01      	cmp	r3, #1
 8006454:	d901      	bls.n	800645a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006456:	2302      	movs	r3, #2
 8006458:	e0c2      	b.n	80065e0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800645a:	7bfb      	ldrb	r3, [r7, #15]
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	211a      	movs	r1, #26
 8006460:	fb01 f303 	mul.w	r3, r1, r3
 8006464:	4413      	add	r3, r2
 8006466:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	b25b      	sxtb	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	da16      	bge.n	80064a0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006472:	7bfb      	ldrb	r3, [r7, #15]
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	211a      	movs	r1, #26
 8006478:	fb01 f303 	mul.w	r3, r1, r3
 800647c:	4413      	add	r3, r2
 800647e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006482:	781a      	ldrb	r2, [r3, #0]
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006488:	7bfb      	ldrb	r3, [r7, #15]
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	211a      	movs	r1, #26
 800648e:	fb01 f303 	mul.w	r3, r1, r3
 8006492:	4413      	add	r3, r2
 8006494:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006498:	881a      	ldrh	r2, [r3, #0]
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	835a      	strh	r2, [r3, #26]
 800649e:	e015      	b.n	80064cc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80064a0:	7bfb      	ldrb	r3, [r7, #15]
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	211a      	movs	r1, #26
 80064a6:	fb01 f303 	mul.w	r3, r1, r3
 80064aa:	4413      	add	r3, r2
 80064ac:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80064b0:	781a      	ldrb	r2, [r3, #0]
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80064b6:	7bfb      	ldrb	r3, [r7, #15]
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	211a      	movs	r1, #26
 80064bc:	fb01 f303 	mul.w	r3, r1, r3
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80064c6:	881a      	ldrh	r2, [r3, #0]
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80064cc:	7bfb      	ldrb	r3, [r7, #15]
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	211a      	movs	r1, #26
 80064d2:	fb01 f303 	mul.w	r3, r1, r3
 80064d6:	4413      	add	r3, r2
 80064d8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	b25b      	sxtb	r3, r3
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	da16      	bge.n	8006512 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	211a      	movs	r1, #26
 80064ea:	fb01 f303 	mul.w	r3, r1, r3
 80064ee:	4413      	add	r3, r2
 80064f0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80064f4:	781a      	ldrb	r2, [r3, #0]
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80064fa:	7bfb      	ldrb	r3, [r7, #15]
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	211a      	movs	r1, #26
 8006500:	fb01 f303 	mul.w	r3, r1, r3
 8006504:	4413      	add	r3, r2
 8006506:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800650a:	881a      	ldrh	r2, [r3, #0]
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	835a      	strh	r2, [r3, #26]
 8006510:	e015      	b.n	800653e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006512:	7bfb      	ldrb	r3, [r7, #15]
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	211a      	movs	r1, #26
 8006518:	fb01 f303 	mul.w	r3, r1, r3
 800651c:	4413      	add	r3, r2
 800651e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006522:	781a      	ldrb	r2, [r3, #0]
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006528:	7bfb      	ldrb	r3, [r7, #15]
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	211a      	movs	r1, #26
 800652e:	fb01 f303 	mul.w	r3, r1, r3
 8006532:	4413      	add	r3, r2
 8006534:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006538:	881a      	ldrh	r2, [r3, #0]
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	7b9b      	ldrb	r3, [r3, #14]
 8006542:	4619      	mov	r1, r3
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f001 fe86 	bl	8008256 <USBH_AllocPipe>
 800654a:	4603      	mov	r3, r0
 800654c:	461a      	mov	r2, r3
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	7bdb      	ldrb	r3, [r3, #15]
 8006556:	4619      	mov	r1, r3
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f001 fe7c 	bl	8008256 <USBH_AllocPipe>
 800655e:	4603      	mov	r3, r0
 8006560:	461a      	mov	r2, r3
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	7b59      	ldrb	r1, [r3, #13]
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	7b98      	ldrb	r0, [r3, #14]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	8b12      	ldrh	r2, [r2, #24]
 800657e:	9202      	str	r2, [sp, #8]
 8006580:	2202      	movs	r2, #2
 8006582:	9201      	str	r2, [sp, #4]
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	4623      	mov	r3, r4
 8006588:	4602      	mov	r2, r0
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f001 fe34 	bl	80081f8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	7b19      	ldrb	r1, [r3, #12]
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	7bd8      	ldrb	r0, [r3, #15]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	8b52      	ldrh	r2, [r2, #26]
 80065a8:	9202      	str	r2, [sp, #8]
 80065aa:	2202      	movs	r2, #2
 80065ac:	9201      	str	r2, [sp, #4]
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	4623      	mov	r3, r4
 80065b2:	4602      	mov	r2, r0
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f001 fe1f 	bl	80081f8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	7b5b      	ldrb	r3, [r3, #13]
 80065c6:	2200      	movs	r2, #0
 80065c8:	4619      	mov	r1, r3
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f002 f92a 	bl	8008824 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	7b1b      	ldrb	r3, [r3, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	4619      	mov	r1, r3
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f002 f923 	bl	8008824 <USBH_LL_SetToggle>

  return USBH_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3714      	adds	r7, #20
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd90      	pop	{r4, r7, pc}

080065e8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065f6:	69db      	ldr	r3, [r3, #28]
 80065f8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00e      	beq.n	8006620 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	4619      	mov	r1, r3
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f001 fe14 	bl	8008236 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	4619      	mov	r1, r3
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f001 fe3f 	bl	8008298 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	7b1b      	ldrb	r3, [r3, #12]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00e      	beq.n	8006646 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	7b1b      	ldrb	r3, [r3, #12]
 800662c:	4619      	mov	r1, r3
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f001 fe01 	bl	8008236 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	7b1b      	ldrb	r3, [r3, #12]
 8006638:	4619      	mov	r1, r3
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f001 fe2c 	bl	8008298 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	7b5b      	ldrb	r3, [r3, #13]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00e      	beq.n	800666c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	7b5b      	ldrb	r3, [r3, #13]
 8006652:	4619      	mov	r1, r3
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f001 fdee 	bl	8008236 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	7b5b      	ldrb	r3, [r3, #13]
 800665e:	4619      	mov	r1, r3
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f001 fe19 	bl	8008298 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006672:	69db      	ldr	r3, [r3, #28]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00b      	beq.n	8006690 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800667e:	69db      	ldr	r3, [r3, #28]
 8006680:	4618      	mov	r0, r3
 8006682:	f002 f95b 	bl	800893c <free>
    phost->pActiveClass->pData = 0U;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800668c:	2200      	movs	r2, #0
 800668e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b084      	sub	sp, #16
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	3340      	adds	r3, #64	; 0x40
 80066b0:	4619      	mov	r1, r3
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f8b1 	bl	800681a <GetLineCoding>
 80066b8:	4603      	mov	r3, r0
 80066ba:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80066bc:	7afb      	ldrb	r3, [r7, #11]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d105      	bne.n	80066ce <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80066c8:	2102      	movs	r1, #2
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80066ce:	7afb      	ldrb	r3, [r7, #11]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80066e0:	2301      	movs	r3, #1
 80066e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80066e4:	2300      	movs	r3, #0
 80066e6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066ee:	69db      	ldr	r3, [r3, #28]
 80066f0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80066f8:	2b04      	cmp	r3, #4
 80066fa:	d877      	bhi.n	80067ec <USBH_CDC_Process+0x114>
 80066fc:	a201      	add	r2, pc, #4	; (adr r2, 8006704 <USBH_CDC_Process+0x2c>)
 80066fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006702:	bf00      	nop
 8006704:	08006719 	.word	0x08006719
 8006708:	0800671f 	.word	0x0800671f
 800670c:	0800674f 	.word	0x0800674f
 8006710:	080067c3 	.word	0x080067c3
 8006714:	080067d1 	.word	0x080067d1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006718:	2300      	movs	r3, #0
 800671a:	73fb      	strb	r3, [r7, #15]
      break;
 800671c:	e06d      	b.n	80067fa <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006722:	4619      	mov	r1, r3
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f897 	bl	8006858 <SetLineCoding>
 800672a:	4603      	mov	r3, r0
 800672c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800672e:	7bbb      	ldrb	r3, [r7, #14]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d104      	bne.n	800673e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	2202      	movs	r2, #2
 8006738:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800673c:	e058      	b.n	80067f0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800673e:	7bbb      	ldrb	r3, [r7, #14]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d055      	beq.n	80067f0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	2204      	movs	r2, #4
 8006748:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800674c:	e050      	b.n	80067f0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	3340      	adds	r3, #64	; 0x40
 8006752:	4619      	mov	r1, r3
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 f860 	bl	800681a <GetLineCoding>
 800675a:	4603      	mov	r3, r0
 800675c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800675e:	7bbb      	ldrb	r3, [r7, #14]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d126      	bne.n	80067b2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006776:	791b      	ldrb	r3, [r3, #4]
 8006778:	429a      	cmp	r2, r3
 800677a:	d13b      	bne.n	80067f4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006786:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006788:	429a      	cmp	r2, r3
 800678a:	d133      	bne.n	80067f4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006796:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006798:	429a      	cmp	r2, r3
 800679a:	d12b      	bne.n	80067f4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067a4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d124      	bne.n	80067f4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f958 	bl	8006a60 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80067b0:	e020      	b.n	80067f4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80067b2:	7bbb      	ldrb	r3, [r7, #14]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d01d      	beq.n	80067f4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	2204      	movs	r2, #4
 80067bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80067c0:	e018      	b.n	80067f4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f867 	bl	8006896 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 f8da 	bl	8006982 <CDC_ProcessReception>
      break;
 80067ce:	e014      	b.n	80067fa <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80067d0:	2100      	movs	r1, #0
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 ffef 	bl	80077b6 <USBH_ClrFeature>
 80067d8:	4603      	mov	r3, r0
 80067da:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80067dc:	7bbb      	ldrb	r3, [r7, #14]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10a      	bne.n	80067f8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80067ea:	e005      	b.n	80067f8 <USBH_CDC_Process+0x120>

    default:
      break;
 80067ec:	bf00      	nop
 80067ee:	e004      	b.n	80067fa <USBH_CDC_Process+0x122>
      break;
 80067f0:	bf00      	nop
 80067f2:	e002      	b.n	80067fa <USBH_CDC_Process+0x122>
      break;
 80067f4:	bf00      	nop
 80067f6:	e000      	b.n	80067fa <USBH_CDC_Process+0x122>
      break;
 80067f8:	bf00      	nop

  }

  return status;
 80067fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	370c      	adds	r7, #12
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr

0800681a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b082      	sub	sp, #8
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
 8006822:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	22a1      	movs	r2, #161	; 0xa1
 8006828:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2221      	movs	r2, #33	; 0x21
 800682e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2207      	movs	r2, #7
 8006840:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	2207      	movs	r2, #7
 8006846:	4619      	mov	r1, r3
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f001 fa83 	bl	8007d54 <USBH_CtlReq>
 800684e:	4603      	mov	r3, r0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3708      	adds	r7, #8
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2221      	movs	r2, #33	; 0x21
 8006866:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2220      	movs	r2, #32
 800686c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2207      	movs	r2, #7
 800687e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	2207      	movs	r2, #7
 8006884:	4619      	mov	r1, r3
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f001 fa64 	bl	8007d54 <USBH_CtlReq>
 800688c:	4603      	mov	r3, r0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b086      	sub	sp, #24
 800689a:	af02      	add	r7, sp, #8
 800689c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068a4:	69db      	ldr	r3, [r3, #28]
 80068a6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80068a8:	2300      	movs	r3, #0
 80068aa:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d002      	beq.n	80068bc <CDC_ProcessTransmission+0x26>
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d023      	beq.n	8006902 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80068ba:	e05e      	b.n	800697a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	8b12      	ldrh	r2, [r2, #24]
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d90b      	bls.n	80068e0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	69d9      	ldr	r1, [r3, #28]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	8b1a      	ldrh	r2, [r3, #24]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	7b5b      	ldrb	r3, [r3, #13]
 80068d4:	2001      	movs	r0, #1
 80068d6:	9000      	str	r0, [sp, #0]
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f001 fc4a 	bl	8008172 <USBH_BulkSendData>
 80068de:	e00b      	b.n	80068f8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	7b5b      	ldrb	r3, [r3, #13]
 80068ee:	2001      	movs	r0, #1
 80068f0:	9000      	str	r0, [sp, #0]
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f001 fc3d 	bl	8008172 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2202      	movs	r2, #2
 80068fc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006900:	e03b      	b.n	800697a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	7b5b      	ldrb	r3, [r3, #13]
 8006906:	4619      	mov	r1, r3
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f001 ff61 	bl	80087d0 <USBH_LL_GetURBState>
 800690e:	4603      	mov	r3, r0
 8006910:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006912:	7afb      	ldrb	r3, [r7, #11]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d128      	bne.n	800696a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	8b12      	ldrh	r2, [r2, #24]
 8006920:	4293      	cmp	r3, r2
 8006922:	d90e      	bls.n	8006942 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	8b12      	ldrh	r2, [r2, #24]
 800692c:	1a9a      	subs	r2, r3, r2
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	69db      	ldr	r3, [r3, #28]
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	8b12      	ldrh	r2, [r2, #24]
 800693a:	441a      	add	r2, r3
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	61da      	str	r2, [r3, #28]
 8006940:	e002      	b.n	8006948 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694c:	2b00      	cmp	r3, #0
 800694e:	d004      	beq.n	800695a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006958:	e00e      	b.n	8006978 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f868 	bl	8006a38 <USBH_CDC_TransmitCallback>
      break;
 8006968:	e006      	b.n	8006978 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800696a:	7afb      	ldrb	r3, [r7, #11]
 800696c:	2b02      	cmp	r3, #2
 800696e:	d103      	bne.n	8006978 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006978:	bf00      	nop
  }
}
 800697a:	bf00      	nop
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006982:	b580      	push	{r7, lr}
 8006984:	b086      	sub	sp, #24
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006990:	69db      	ldr	r3, [r3, #28]
 8006992:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006994:	2300      	movs	r3, #0
 8006996:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800699e:	2b03      	cmp	r3, #3
 80069a0:	d002      	beq.n	80069a8 <CDC_ProcessReception+0x26>
 80069a2:	2b04      	cmp	r3, #4
 80069a4:	d00e      	beq.n	80069c4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80069a6:	e043      	b.n	8006a30 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	6a19      	ldr	r1, [r3, #32]
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	8b5a      	ldrh	r2, [r3, #26]
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	7b1b      	ldrb	r3, [r3, #12]
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f001 fc01 	bl	80081bc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	2204      	movs	r2, #4
 80069be:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80069c2:	e035      	b.n	8006a30 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	7b1b      	ldrb	r3, [r3, #12]
 80069c8:	4619      	mov	r1, r3
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f001 ff00 	bl	80087d0 <USBH_LL_GetURBState>
 80069d0:	4603      	mov	r3, r0
 80069d2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80069d4:	7cfb      	ldrb	r3, [r7, #19]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d129      	bne.n	8006a2e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	7b1b      	ldrb	r3, [r3, #12]
 80069de:	4619      	mov	r1, r3
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f001 fe63 	bl	80086ac <USBH_LL_GetLastXferSize>
 80069e6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d016      	beq.n	8006a20 <CDC_ProcessReception+0x9e>
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	8b5b      	ldrh	r3, [r3, #26]
 80069f6:	461a      	mov	r2, r3
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d910      	bls.n	8006a20 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	1ad2      	subs	r2, r2, r3
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	6a1a      	ldr	r2, [r3, #32]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	441a      	add	r2, r3
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	2203      	movs	r2, #3
 8006a1a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006a1e:	e006      	b.n	8006a2e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 f80f 	bl	8006a4c <USBH_CDC_ReceiveCallback>
      break;
 8006a2e:	bf00      	nop
  }
}
 8006a30:	bf00      	nop
 8006a32:	3718      	adds	r7, #24
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	4613      	mov	r3, r2
 8006a80:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d101      	bne.n	8006a8c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006a88:	2302      	movs	r3, #2
 8006a8a:	e029      	b.n	8006ae0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	79fa      	ldrb	r2, [r7, #7]
 8006a90:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f000 f81f 	bl	8006ae8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d003      	beq.n	8006ad8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	68ba      	ldr	r2, [r7, #8]
 8006ad4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f001 fd33 	bl	8008544 <USBH_LL_Init>

  return USBH_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006af0:	2300      	movs	r3, #0
 8006af2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006af4:	2300      	movs	r3, #0
 8006af6:	60fb      	str	r3, [r7, #12]
 8006af8:	e009      	b.n	8006b0e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	33e0      	adds	r3, #224	; 0xe0
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	4413      	add	r3, r2
 8006b04:	2200      	movs	r2, #0
 8006b06:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	60fb      	str	r3, [r7, #12]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2b0f      	cmp	r3, #15
 8006b12:	d9f2      	bls.n	8006afa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006b14:	2300      	movs	r3, #0
 8006b16:	60fb      	str	r3, [r7, #12]
 8006b18:	e009      	b.n	8006b2e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	4413      	add	r3, r2
 8006b20:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006b24:	2200      	movs	r2, #0
 8006b26:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	60fb      	str	r3, [r7, #12]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b34:	d3f1      	bcc.n	8006b1a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2201      	movs	r2, #1
 8006b46:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2240      	movs	r2, #64	; 0x40
 8006b5a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3714      	adds	r7, #20
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d016      	beq.n	8006bd2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10e      	bne.n	8006bcc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006bb4:	1c59      	adds	r1, r3, #1
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	33de      	adds	r3, #222	; 0xde
 8006bc0:	6839      	ldr	r1, [r7, #0]
 8006bc2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	73fb      	strb	r3, [r7, #15]
 8006bca:	e004      	b.n	8006bd6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006bcc:	2302      	movs	r3, #2
 8006bce:	73fb      	strb	r3, [r7, #15]
 8006bd0:	e001      	b.n	8006bd6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006bd2:	2302      	movs	r3, #2
 8006bd4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3714      	adds	r7, #20
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	460b      	mov	r3, r1
 8006bee:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006bfa:	78fa      	ldrb	r2, [r7, #3]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d204      	bcs.n	8006c0a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	78fa      	ldrb	r2, [r7, #3]
 8006c04:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006c08:	e001      	b.n	8006c0e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006c0a:	2302      	movs	r3, #2
 8006c0c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3714      	adds	r7, #20
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b087      	sub	sp, #28
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	4608      	mov	r0, r1
 8006c26:	4611      	mov	r1, r2
 8006c28:	461a      	mov	r2, r3
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	70fb      	strb	r3, [r7, #3]
 8006c2e:	460b      	mov	r3, r1
 8006c30:	70bb      	strb	r3, [r7, #2]
 8006c32:	4613      	mov	r3, r2
 8006c34:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006c36:	2300      	movs	r3, #0
 8006c38:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006c44:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006c46:	e025      	b.n	8006c94 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006c48:	7dfb      	ldrb	r3, [r7, #23]
 8006c4a:	221a      	movs	r2, #26
 8006c4c:	fb02 f303 	mul.w	r3, r2, r3
 8006c50:	3308      	adds	r3, #8
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	4413      	add	r3, r2
 8006c56:	3302      	adds	r3, #2
 8006c58:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	795b      	ldrb	r3, [r3, #5]
 8006c5e:	78fa      	ldrb	r2, [r7, #3]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d002      	beq.n	8006c6a <USBH_FindInterface+0x4e>
 8006c64:	78fb      	ldrb	r3, [r7, #3]
 8006c66:	2bff      	cmp	r3, #255	; 0xff
 8006c68:	d111      	bne.n	8006c8e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006c6e:	78ba      	ldrb	r2, [r7, #2]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d002      	beq.n	8006c7a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c74:	78bb      	ldrb	r3, [r7, #2]
 8006c76:	2bff      	cmp	r3, #255	; 0xff
 8006c78:	d109      	bne.n	8006c8e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c7e:	787a      	ldrb	r2, [r7, #1]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d002      	beq.n	8006c8a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006c84:	787b      	ldrb	r3, [r7, #1]
 8006c86:	2bff      	cmp	r3, #255	; 0xff
 8006c88:	d101      	bne.n	8006c8e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006c8a:	7dfb      	ldrb	r3, [r7, #23]
 8006c8c:	e006      	b.n	8006c9c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006c8e:	7dfb      	ldrb	r3, [r7, #23]
 8006c90:	3301      	adds	r3, #1
 8006c92:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006c94:	7dfb      	ldrb	r3, [r7, #23]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d9d6      	bls.n	8006c48 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006c9a:	23ff      	movs	r3, #255	; 0xff
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	371c      	adds	r7, #28
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f001 fc83 	bl	80085bc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006cb6:	2101      	movs	r1, #1
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f001 fd9c 	bl	80087f6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b088      	sub	sp, #32
 8006ccc:	af04      	add	r7, sp, #16
 8006cce:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d102      	bne.n	8006cea <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2203      	movs	r2, #3
 8006ce8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	2b0b      	cmp	r3, #11
 8006cf2:	f200 81be 	bhi.w	8007072 <USBH_Process+0x3aa>
 8006cf6:	a201      	add	r2, pc, #4	; (adr r2, 8006cfc <USBH_Process+0x34>)
 8006cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfc:	08006d2d 	.word	0x08006d2d
 8006d00:	08006d5f 	.word	0x08006d5f
 8006d04:	08006dc7 	.word	0x08006dc7
 8006d08:	0800700d 	.word	0x0800700d
 8006d0c:	08007073 	.word	0x08007073
 8006d10:	08006e6b 	.word	0x08006e6b
 8006d14:	08006fb3 	.word	0x08006fb3
 8006d18:	08006ea1 	.word	0x08006ea1
 8006d1c:	08006ec1 	.word	0x08006ec1
 8006d20:	08006ee1 	.word	0x08006ee1
 8006d24:	08006f25 	.word	0x08006f25
 8006d28:	08006ff5 	.word	0x08006ff5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f000 819e 	beq.w	8007076 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006d40:	20c8      	movs	r0, #200	; 0xc8
 8006d42:	f001 fd9f 	bl	8008884 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f001 fc95 	bl	8008676 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006d5c:	e18b      	b.n	8007076 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d107      	bne.n	8006d78 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2202      	movs	r2, #2
 8006d74:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006d76:	e18d      	b.n	8007094 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006d7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d82:	d914      	bls.n	8006dae <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	b2da      	uxtb	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006d9a:	2b03      	cmp	r3, #3
 8006d9c:	d903      	bls.n	8006da6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	220d      	movs	r2, #13
 8006da2:	701a      	strb	r2, [r3, #0]
      break;
 8006da4:	e176      	b.n	8007094 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	701a      	strb	r2, [r3, #0]
      break;
 8006dac:	e172      	b.n	8007094 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006db4:	f103 020a 	add.w	r2, r3, #10
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006dbe:	200a      	movs	r0, #10
 8006dc0:	f001 fd60 	bl	8008884 <USBH_Delay>
      break;
 8006dc4:	e166      	b.n	8007094 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d005      	beq.n	8006ddc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006dd6:	2104      	movs	r1, #4
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006ddc:	2064      	movs	r0, #100	; 0x64
 8006dde:	f001 fd51 	bl	8008884 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f001 fc20 	bl	8008628 <USBH_LL_GetSpeed>
 8006de8:	4603      	mov	r3, r0
 8006dea:	461a      	mov	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2205      	movs	r2, #5
 8006df6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006df8:	2100      	movs	r1, #0
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f001 fa2b 	bl	8008256 <USBH_AllocPipe>
 8006e00:	4603      	mov	r3, r0
 8006e02:	461a      	mov	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006e08:	2180      	movs	r1, #128	; 0x80
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f001 fa23 	bl	8008256 <USBH_AllocPipe>
 8006e10:	4603      	mov	r3, r0
 8006e12:	461a      	mov	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	7919      	ldrb	r1, [r3, #4]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006e2c:	b292      	uxth	r2, r2
 8006e2e:	9202      	str	r2, [sp, #8]
 8006e30:	2200      	movs	r2, #0
 8006e32:	9201      	str	r2, [sp, #4]
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	4603      	mov	r3, r0
 8006e38:	2280      	movs	r2, #128	; 0x80
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f001 f9dc 	bl	80081f8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	7959      	ldrb	r1, [r3, #5]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006e54:	b292      	uxth	r2, r2
 8006e56:	9202      	str	r2, [sp, #8]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	9201      	str	r2, [sp, #4]
 8006e5c:	9300      	str	r3, [sp, #0]
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2200      	movs	r2, #0
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f001 f9c8 	bl	80081f8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e68:	e114      	b.n	8007094 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 f918 	bl	80070a0 <USBH_HandleEnum>
 8006e70:	4603      	mov	r3, r0
 8006e72:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006e74:	7bbb      	ldrb	r3, [r7, #14]
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f040 80fe 	bne.w	800707a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d103      	bne.n	8006e98 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2208      	movs	r2, #8
 8006e94:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006e96:	e0f0      	b.n	800707a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2207      	movs	r2, #7
 8006e9c:	701a      	strb	r2, [r3, #0]
      break;
 8006e9e:	e0ec      	b.n	800707a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	f000 80e9 	beq.w	800707e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006eb2:	2101      	movs	r1, #1
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2208      	movs	r2, #8
 8006ebc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006ebe:	e0de      	b.n	800707e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	4619      	mov	r1, r3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fc2c 	bl	8007728 <USBH_SetCfg>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f040 80d5 	bne.w	8007082 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2209      	movs	r2, #9
 8006edc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006ede:	e0d0      	b.n	8007082 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006ee6:	f003 0320 	and.w	r3, r3, #32
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d016      	beq.n	8006f1c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006eee:	2101      	movs	r1, #1
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 fc3c 	bl	800776e <USBH_SetFeature>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006efa:	7bbb      	ldrb	r3, [r7, #14]
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d103      	bne.n	8006f0a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	220a      	movs	r2, #10
 8006f06:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f08:	e0bd      	b.n	8007086 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006f0a:	7bbb      	ldrb	r3, [r7, #14]
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b03      	cmp	r3, #3
 8006f10:	f040 80b9 	bne.w	8007086 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	220a      	movs	r2, #10
 8006f18:	701a      	strb	r2, [r3, #0]
      break;
 8006f1a:	e0b4      	b.n	8007086 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	220a      	movs	r2, #10
 8006f20:	701a      	strb	r2, [r3, #0]
      break;
 8006f22:	e0b0      	b.n	8007086 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f000 80ad 	beq.w	800708a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006f38:	2300      	movs	r3, #0
 8006f3a:	73fb      	strb	r3, [r7, #15]
 8006f3c:	e016      	b.n	8006f6c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006f3e:	7bfa      	ldrb	r2, [r7, #15]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	32de      	adds	r2, #222	; 0xde
 8006f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f48:	791a      	ldrb	r2, [r3, #4]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d108      	bne.n	8006f66 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006f54:	7bfa      	ldrb	r2, [r7, #15]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	32de      	adds	r2, #222	; 0xde
 8006f5a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006f64:	e005      	b.n	8006f72 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006f66:	7bfb      	ldrb	r3, [r7, #15]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	73fb      	strb	r3, [r7, #15]
 8006f6c:	7bfb      	ldrb	r3, [r7, #15]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d0e5      	beq.n	8006f3e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d016      	beq.n	8006faa <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	4798      	blx	r3
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d109      	bne.n	8006fa2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2206      	movs	r2, #6
 8006f92:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f9a:	2103      	movs	r1, #3
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006fa0:	e073      	b.n	800708a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	220d      	movs	r2, #13
 8006fa6:	701a      	strb	r2, [r3, #0]
      break;
 8006fa8:	e06f      	b.n	800708a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	220d      	movs	r2, #13
 8006fae:	701a      	strb	r2, [r3, #0]
      break;
 8006fb0:	e06b      	b.n	800708a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d017      	beq.n	8006fec <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	4798      	blx	r3
 8006fc8:	4603      	mov	r3, r0
 8006fca:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006fcc:	7bbb      	ldrb	r3, [r7, #14]
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d103      	bne.n	8006fdc <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	220b      	movs	r2, #11
 8006fd8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006fda:	e058      	b.n	800708e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006fdc:	7bbb      	ldrb	r3, [r7, #14]
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	d154      	bne.n	800708e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	220d      	movs	r2, #13
 8006fe8:	701a      	strb	r2, [r3, #0]
      break;
 8006fea:	e050      	b.n	800708e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	220d      	movs	r2, #13
 8006ff0:	701a      	strb	r2, [r3, #0]
      break;
 8006ff2:	e04c      	b.n	800708e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d049      	beq.n	8007092 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007004:	695b      	ldr	r3, [r3, #20]
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	4798      	blx	r3
      }
      break;
 800700a:	e042      	b.n	8007092 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f7ff fd67 	bl	8006ae8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007020:	2b00      	cmp	r3, #0
 8007022:	d009      	beq.n	8007038 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800703e:	2b00      	cmp	r3, #0
 8007040:	d005      	beq.n	800704e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007048:	2105      	movs	r1, #5
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007054:	b2db      	uxtb	r3, r3
 8007056:	2b01      	cmp	r3, #1
 8007058:	d107      	bne.n	800706a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f7ff fe20 	bl	8006ca8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007068:	e014      	b.n	8007094 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f001 faa6 	bl	80085bc <USBH_LL_Start>
      break;
 8007070:	e010      	b.n	8007094 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007072:	bf00      	nop
 8007074:	e00e      	b.n	8007094 <USBH_Process+0x3cc>
      break;
 8007076:	bf00      	nop
 8007078:	e00c      	b.n	8007094 <USBH_Process+0x3cc>
      break;
 800707a:	bf00      	nop
 800707c:	e00a      	b.n	8007094 <USBH_Process+0x3cc>
    break;
 800707e:	bf00      	nop
 8007080:	e008      	b.n	8007094 <USBH_Process+0x3cc>
      break;
 8007082:	bf00      	nop
 8007084:	e006      	b.n	8007094 <USBH_Process+0x3cc>
      break;
 8007086:	bf00      	nop
 8007088:	e004      	b.n	8007094 <USBH_Process+0x3cc>
      break;
 800708a:	bf00      	nop
 800708c:	e002      	b.n	8007094 <USBH_Process+0x3cc>
      break;
 800708e:	bf00      	nop
 8007090:	e000      	b.n	8007094 <USBH_Process+0x3cc>
      break;
 8007092:	bf00      	nop
  }
  return USBH_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop

080070a0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b088      	sub	sp, #32
 80070a4:	af04      	add	r7, sp, #16
 80070a6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80070a8:	2301      	movs	r3, #1
 80070aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80070ac:	2301      	movs	r3, #1
 80070ae:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	785b      	ldrb	r3, [r3, #1]
 80070b4:	2b07      	cmp	r3, #7
 80070b6:	f200 81c1 	bhi.w	800743c <USBH_HandleEnum+0x39c>
 80070ba:	a201      	add	r2, pc, #4	; (adr r2, 80070c0 <USBH_HandleEnum+0x20>)
 80070bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c0:	080070e1 	.word	0x080070e1
 80070c4:	0800719f 	.word	0x0800719f
 80070c8:	08007209 	.word	0x08007209
 80070cc:	08007297 	.word	0x08007297
 80070d0:	08007301 	.word	0x08007301
 80070d4:	08007371 	.word	0x08007371
 80070d8:	080073b7 	.word	0x080073b7
 80070dc:	080073fd 	.word	0x080073fd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80070e0:	2108      	movs	r1, #8
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 fa50 	bl	8007588 <USBH_Get_DevDesc>
 80070e8:	4603      	mov	r3, r0
 80070ea:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80070ec:	7bbb      	ldrb	r3, [r7, #14]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d130      	bne.n	8007154 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	7919      	ldrb	r1, [r3, #4]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007116:	b292      	uxth	r2, r2
 8007118:	9202      	str	r2, [sp, #8]
 800711a:	2200      	movs	r2, #0
 800711c:	9201      	str	r2, [sp, #4]
 800711e:	9300      	str	r3, [sp, #0]
 8007120:	4603      	mov	r3, r0
 8007122:	2280      	movs	r2, #128	; 0x80
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f001 f867 	bl	80081f8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	7959      	ldrb	r1, [r3, #5]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800713e:	b292      	uxth	r2, r2
 8007140:	9202      	str	r2, [sp, #8]
 8007142:	2200      	movs	r2, #0
 8007144:	9201      	str	r2, [sp, #4]
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	4603      	mov	r3, r0
 800714a:	2200      	movs	r2, #0
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f001 f853 	bl	80081f8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007152:	e175      	b.n	8007440 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007154:	7bbb      	ldrb	r3, [r7, #14]
 8007156:	2b03      	cmp	r3, #3
 8007158:	f040 8172 	bne.w	8007440 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007162:	3301      	adds	r3, #1
 8007164:	b2da      	uxtb	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007172:	2b03      	cmp	r3, #3
 8007174:	d903      	bls.n	800717e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	220d      	movs	r2, #13
 800717a:	701a      	strb	r2, [r3, #0]
      break;
 800717c:	e160      	b.n	8007440 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	795b      	ldrb	r3, [r3, #5]
 8007182:	4619      	mov	r1, r3
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f001 f887 	bl	8008298 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	791b      	ldrb	r3, [r3, #4]
 800718e:	4619      	mov	r1, r3
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f001 f881 	bl	8008298 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	701a      	strb	r2, [r3, #0]
      break;
 800719c:	e150      	b.n	8007440 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800719e:	2112      	movs	r1, #18
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 f9f1 	bl	8007588 <USBH_Get_DevDesc>
 80071a6:	4603      	mov	r3, r0
 80071a8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80071aa:	7bbb      	ldrb	r3, [r7, #14]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d103      	bne.n	80071b8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2202      	movs	r2, #2
 80071b4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80071b6:	e145      	b.n	8007444 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071b8:	7bbb      	ldrb	r3, [r7, #14]
 80071ba:	2b03      	cmp	r3, #3
 80071bc:	f040 8142 	bne.w	8007444 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071c6:	3301      	adds	r3, #1
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071d6:	2b03      	cmp	r3, #3
 80071d8:	d903      	bls.n	80071e2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	220d      	movs	r2, #13
 80071de:	701a      	strb	r2, [r3, #0]
      break;
 80071e0:	e130      	b.n	8007444 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	795b      	ldrb	r3, [r3, #5]
 80071e6:	4619      	mov	r1, r3
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f001 f855 	bl	8008298 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	791b      	ldrb	r3, [r3, #4]
 80071f2:	4619      	mov	r1, r3
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f001 f84f 	bl	8008298 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	701a      	strb	r2, [r3, #0]
      break;
 8007206:	e11d      	b.n	8007444 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007208:	2101      	movs	r1, #1
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 fa68 	bl	80076e0 <USBH_SetAddress>
 8007210:	4603      	mov	r3, r0
 8007212:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007214:	7bbb      	ldrb	r3, [r7, #14]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d132      	bne.n	8007280 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800721a:	2002      	movs	r0, #2
 800721c:	f001 fb32 	bl	8008884 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2203      	movs	r2, #3
 800722c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	7919      	ldrb	r1, [r3, #4]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007242:	b292      	uxth	r2, r2
 8007244:	9202      	str	r2, [sp, #8]
 8007246:	2200      	movs	r2, #0
 8007248:	9201      	str	r2, [sp, #4]
 800724a:	9300      	str	r3, [sp, #0]
 800724c:	4603      	mov	r3, r0
 800724e:	2280      	movs	r2, #128	; 0x80
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 ffd1 	bl	80081f8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	7959      	ldrb	r1, [r3, #5]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800726a:	b292      	uxth	r2, r2
 800726c:	9202      	str	r2, [sp, #8]
 800726e:	2200      	movs	r2, #0
 8007270:	9201      	str	r2, [sp, #4]
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	4603      	mov	r3, r0
 8007276:	2200      	movs	r2, #0
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 ffbd 	bl	80081f8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800727e:	e0e3      	b.n	8007448 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007280:	7bbb      	ldrb	r3, [r7, #14]
 8007282:	2b03      	cmp	r3, #3
 8007284:	f040 80e0 	bne.w	8007448 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	220d      	movs	r2, #13
 800728c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	705a      	strb	r2, [r3, #1]
      break;
 8007294:	e0d8      	b.n	8007448 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007296:	2109      	movs	r1, #9
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 f99d 	bl	80075d8 <USBH_Get_CfgDesc>
 800729e:	4603      	mov	r3, r0
 80072a0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80072a2:	7bbb      	ldrb	r3, [r7, #14]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d103      	bne.n	80072b0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2204      	movs	r2, #4
 80072ac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80072ae:	e0cd      	b.n	800744c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072b0:	7bbb      	ldrb	r3, [r7, #14]
 80072b2:	2b03      	cmp	r3, #3
 80072b4:	f040 80ca 	bne.w	800744c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072be:	3301      	adds	r3, #1
 80072c0:	b2da      	uxtb	r2, r3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072ce:	2b03      	cmp	r3, #3
 80072d0:	d903      	bls.n	80072da <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	220d      	movs	r2, #13
 80072d6:	701a      	strb	r2, [r3, #0]
      break;
 80072d8:	e0b8      	b.n	800744c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	795b      	ldrb	r3, [r3, #5]
 80072de:	4619      	mov	r1, r3
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 ffd9 	bl	8008298 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	791b      	ldrb	r3, [r3, #4]
 80072ea:	4619      	mov	r1, r3
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 ffd3 	bl	8008298 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	701a      	strb	r2, [r3, #0]
      break;
 80072fe:	e0a5      	b.n	800744c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007306:	4619      	mov	r1, r3
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 f965 	bl	80075d8 <USBH_Get_CfgDesc>
 800730e:	4603      	mov	r3, r0
 8007310:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007312:	7bbb      	ldrb	r3, [r7, #14]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d103      	bne.n	8007320 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2205      	movs	r2, #5
 800731c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800731e:	e097      	b.n	8007450 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007320:	7bbb      	ldrb	r3, [r7, #14]
 8007322:	2b03      	cmp	r3, #3
 8007324:	f040 8094 	bne.w	8007450 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800732e:	3301      	adds	r3, #1
 8007330:	b2da      	uxtb	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800733e:	2b03      	cmp	r3, #3
 8007340:	d903      	bls.n	800734a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	220d      	movs	r2, #13
 8007346:	701a      	strb	r2, [r3, #0]
      break;
 8007348:	e082      	b.n	8007450 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	795b      	ldrb	r3, [r3, #5]
 800734e:	4619      	mov	r1, r3
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 ffa1 	bl	8008298 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	791b      	ldrb	r3, [r3, #4]
 800735a:	4619      	mov	r1, r3
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 ff9b 	bl	8008298 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	701a      	strb	r2, [r3, #0]
      break;
 800736e:	e06f      	b.n	8007450 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007376:	2b00      	cmp	r3, #0
 8007378:	d019      	beq.n	80073ae <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007386:	23ff      	movs	r3, #255	; 0xff
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 f949 	bl	8007620 <USBH_Get_StringDesc>
 800738e:	4603      	mov	r3, r0
 8007390:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007392:	7bbb      	ldrb	r3, [r7, #14]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d103      	bne.n	80073a0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2206      	movs	r2, #6
 800739c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800739e:	e059      	b.n	8007454 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073a0:	7bbb      	ldrb	r3, [r7, #14]
 80073a2:	2b03      	cmp	r3, #3
 80073a4:	d156      	bne.n	8007454 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2206      	movs	r2, #6
 80073aa:	705a      	strb	r2, [r3, #1]
      break;
 80073ac:	e052      	b.n	8007454 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2206      	movs	r2, #6
 80073b2:	705a      	strb	r2, [r3, #1]
      break;
 80073b4:	e04e      	b.n	8007454 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d019      	beq.n	80073f4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80073cc:	23ff      	movs	r3, #255	; 0xff
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 f926 	bl	8007620 <USBH_Get_StringDesc>
 80073d4:	4603      	mov	r3, r0
 80073d6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80073d8:	7bbb      	ldrb	r3, [r7, #14]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d103      	bne.n	80073e6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2207      	movs	r2, #7
 80073e2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80073e4:	e038      	b.n	8007458 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073e6:	7bbb      	ldrb	r3, [r7, #14]
 80073e8:	2b03      	cmp	r3, #3
 80073ea:	d135      	bne.n	8007458 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2207      	movs	r2, #7
 80073f0:	705a      	strb	r2, [r3, #1]
      break;
 80073f2:	e031      	b.n	8007458 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2207      	movs	r2, #7
 80073f8:	705a      	strb	r2, [r3, #1]
      break;
 80073fa:	e02d      	b.n	8007458 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007402:	2b00      	cmp	r3, #0
 8007404:	d017      	beq.n	8007436 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007412:	23ff      	movs	r3, #255	; 0xff
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 f903 	bl	8007620 <USBH_Get_StringDesc>
 800741a:	4603      	mov	r3, r0
 800741c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800741e:	7bbb      	ldrb	r3, [r7, #14]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d102      	bne.n	800742a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007424:	2300      	movs	r3, #0
 8007426:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007428:	e018      	b.n	800745c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800742a:	7bbb      	ldrb	r3, [r7, #14]
 800742c:	2b03      	cmp	r3, #3
 800742e:	d115      	bne.n	800745c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007430:	2300      	movs	r3, #0
 8007432:	73fb      	strb	r3, [r7, #15]
      break;
 8007434:	e012      	b.n	800745c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	73fb      	strb	r3, [r7, #15]
      break;
 800743a:	e00f      	b.n	800745c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800743c:	bf00      	nop
 800743e:	e00e      	b.n	800745e <USBH_HandleEnum+0x3be>
      break;
 8007440:	bf00      	nop
 8007442:	e00c      	b.n	800745e <USBH_HandleEnum+0x3be>
      break;
 8007444:	bf00      	nop
 8007446:	e00a      	b.n	800745e <USBH_HandleEnum+0x3be>
      break;
 8007448:	bf00      	nop
 800744a:	e008      	b.n	800745e <USBH_HandleEnum+0x3be>
      break;
 800744c:	bf00      	nop
 800744e:	e006      	b.n	800745e <USBH_HandleEnum+0x3be>
      break;
 8007450:	bf00      	nop
 8007452:	e004      	b.n	800745e <USBH_HandleEnum+0x3be>
      break;
 8007454:	bf00      	nop
 8007456:	e002      	b.n	800745e <USBH_HandleEnum+0x3be>
      break;
 8007458:	bf00      	nop
 800745a:	e000      	b.n	800745e <USBH_HandleEnum+0x3be>
      break;
 800745c:	bf00      	nop
  }
  return Status;
 800745e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007460:	4618      	mov	r0, r3
 8007462:	3710      	adds	r7, #16
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	683a      	ldr	r2, [r7, #0]
 8007476:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800747a:	bf00      	nop
 800747c:	370c      	adds	r7, #12
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr

08007486 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b082      	sub	sp, #8
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007494:	1c5a      	adds	r2, r3, #1
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 f804 	bl	80074aa <USBH_HandleSof>
}
 80074a2:	bf00      	nop
 80074a4:	3708      	adds	r7, #8
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b082      	sub	sp, #8
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b0b      	cmp	r3, #11
 80074ba:	d10a      	bne.n	80074d2 <USBH_HandleSof+0x28>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d005      	beq.n	80074d2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	4798      	blx	r3
  }
}
 80074d2:	bf00      	nop
 80074d4:	3708      	adds	r7, #8
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80074da:	b480      	push	{r7}
 80074dc:	b083      	sub	sp, #12
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80074ea:	bf00      	nop
}
 80074ec:	370c      	adds	r7, #12
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr

080074f6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80074f6:	b480      	push	{r7}
 80074f8:	b083      	sub	sp, #12
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007506:	bf00      	nop
}
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007512:	b480      	push	{r7}
 8007514:	b083      	sub	sp, #12
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f001 f846 	bl	80085f2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	791b      	ldrb	r3, [r3, #4]
 800756a:	4619      	mov	r1, r3
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 fe93 	bl	8008298 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	795b      	ldrb	r3, [r3, #5]
 8007576:	4619      	mov	r1, r3
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fe8d 	bl	8008298 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3708      	adds	r7, #8
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b086      	sub	sp, #24
 800758c:	af02      	add	r7, sp, #8
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	460b      	mov	r3, r1
 8007592:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800759a:	78fb      	ldrb	r3, [r7, #3]
 800759c:	b29b      	uxth	r3, r3
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	4613      	mov	r3, r2
 80075a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075a6:	2100      	movs	r1, #0
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 f864 	bl	8007676 <USBH_GetDescriptor>
 80075ae:	4603      	mov	r3, r0
 80075b0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80075b2:	7bfb      	ldrb	r3, [r7, #15]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d10a      	bne.n	80075ce <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f203 3026 	addw	r0, r3, #806	; 0x326
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80075c4:	78fa      	ldrb	r2, [r7, #3]
 80075c6:	b292      	uxth	r2, r2
 80075c8:	4619      	mov	r1, r3
 80075ca:	f000 f919 	bl	8007800 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80075ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b086      	sub	sp, #24
 80075dc:	af02      	add	r7, sp, #8
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	460b      	mov	r3, r1
 80075e2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	331c      	adds	r3, #28
 80075e8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80075ea:	887b      	ldrh	r3, [r7, #2]
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075f4:	2100      	movs	r1, #0
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 f83d 	bl	8007676 <USBH_GetDescriptor>
 80075fc:	4603      	mov	r3, r0
 80075fe:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007600:	7bfb      	ldrb	r3, [r7, #15]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d107      	bne.n	8007616 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007606:	887b      	ldrh	r3, [r7, #2]
 8007608:	461a      	mov	r2, r3
 800760a:	68b9      	ldr	r1, [r7, #8]
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 f989 	bl	8007924 <USBH_ParseCfgDesc>
 8007612:	4603      	mov	r3, r0
 8007614:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007616:	7bfb      	ldrb	r3, [r7, #15]
}
 8007618:	4618      	mov	r0, r3
 800761a:	3710      	adds	r7, #16
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b088      	sub	sp, #32
 8007624:	af02      	add	r7, sp, #8
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	607a      	str	r2, [r7, #4]
 800762a:	461a      	mov	r2, r3
 800762c:	460b      	mov	r3, r1
 800762e:	72fb      	strb	r3, [r7, #11]
 8007630:	4613      	mov	r3, r2
 8007632:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007634:	7afb      	ldrb	r3, [r7, #11]
 8007636:	b29b      	uxth	r3, r3
 8007638:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800763c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007644:	893b      	ldrh	r3, [r7, #8]
 8007646:	9300      	str	r3, [sp, #0]
 8007648:	460b      	mov	r3, r1
 800764a:	2100      	movs	r1, #0
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f000 f812 	bl	8007676 <USBH_GetDescriptor>
 8007652:	4603      	mov	r3, r0
 8007654:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007656:	7dfb      	ldrb	r3, [r7, #23]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d107      	bne.n	800766c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007662:	893a      	ldrh	r2, [r7, #8]
 8007664:	6879      	ldr	r1, [r7, #4]
 8007666:	4618      	mov	r0, r3
 8007668:	f000 fb26 	bl	8007cb8 <USBH_ParseStringDesc>
  }

  return status;
 800766c:	7dfb      	ldrb	r3, [r7, #23]
}
 800766e:	4618      	mov	r0, r3
 8007670:	3718      	adds	r7, #24
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b084      	sub	sp, #16
 800767a:	af00      	add	r7, sp, #0
 800767c:	60f8      	str	r0, [r7, #12]
 800767e:	607b      	str	r3, [r7, #4]
 8007680:	460b      	mov	r3, r1
 8007682:	72fb      	strb	r3, [r7, #11]
 8007684:	4613      	mov	r3, r2
 8007686:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	789b      	ldrb	r3, [r3, #2]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d11c      	bne.n	80076ca <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007690:	7afb      	ldrb	r3, [r7, #11]
 8007692:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007696:	b2da      	uxtb	r2, r3
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2206      	movs	r2, #6
 80076a0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	893a      	ldrh	r2, [r7, #8]
 80076a6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80076a8:	893b      	ldrh	r3, [r7, #8]
 80076aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80076ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076b2:	d104      	bne.n	80076be <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f240 4209 	movw	r2, #1033	; 0x409
 80076ba:	829a      	strh	r2, [r3, #20]
 80076bc:	e002      	b.n	80076c4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	8b3a      	ldrh	r2, [r7, #24]
 80076c8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80076ca:	8b3b      	ldrh	r3, [r7, #24]
 80076cc:	461a      	mov	r2, r3
 80076ce:	6879      	ldr	r1, [r7, #4]
 80076d0:	68f8      	ldr	r0, [r7, #12]
 80076d2:	f000 fb3f 	bl	8007d54 <USBH_CtlReq>
 80076d6:	4603      	mov	r3, r0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3710      	adds	r7, #16
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	460b      	mov	r3, r1
 80076ea:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	789b      	ldrb	r3, [r3, #2]
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d10f      	bne.n	8007714 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2205      	movs	r2, #5
 80076fe:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007700:	78fb      	ldrb	r3, [r7, #3]
 8007702:	b29a      	uxth	r2, r3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007714:	2200      	movs	r2, #0
 8007716:	2100      	movs	r1, #0
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 fb1b 	bl	8007d54 <USBH_CtlReq>
 800771e:	4603      	mov	r3, r0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3708      	adds	r7, #8
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	460b      	mov	r3, r1
 8007732:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	789b      	ldrb	r3, [r3, #2]
 8007738:	2b01      	cmp	r3, #1
 800773a:	d10e      	bne.n	800775a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2209      	movs	r2, #9
 8007746:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	887a      	ldrh	r2, [r7, #2]
 800774c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800775a:	2200      	movs	r2, #0
 800775c:	2100      	movs	r1, #0
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 faf8 	bl	8007d54 <USBH_CtlReq>
 8007764:	4603      	mov	r3, r0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3708      	adds	r7, #8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b082      	sub	sp, #8
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
 8007776:	460b      	mov	r3, r1
 8007778:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	789b      	ldrb	r3, [r3, #2]
 800777e:	2b01      	cmp	r3, #1
 8007780:	d10f      	bne.n	80077a2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2203      	movs	r2, #3
 800778c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800778e:	78fb      	ldrb	r3, [r7, #3]
 8007790:	b29a      	uxth	r2, r3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80077a2:	2200      	movs	r2, #0
 80077a4:	2100      	movs	r1, #0
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 fad4 	bl	8007d54 <USBH_CtlReq>
 80077ac:	4603      	mov	r3, r0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3708      	adds	r7, #8
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b082      	sub	sp, #8
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
 80077be:	460b      	mov	r3, r1
 80077c0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	789b      	ldrb	r3, [r3, #2]
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d10f      	bne.n	80077ea <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2202      	movs	r2, #2
 80077ce:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80077dc:	78fb      	ldrb	r3, [r7, #3]
 80077de:	b29a      	uxth	r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80077ea:	2200      	movs	r2, #0
 80077ec:	2100      	movs	r1, #0
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 fab0 	bl	8007d54 <USBH_CtlReq>
 80077f4:	4603      	mov	r3, r0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3708      	adds	r7, #8
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
	...

08007800 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	4613      	mov	r3, r2
 800780c:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	781a      	ldrb	r2, [r3, #0]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	785a      	ldrb	r2, [r3, #1]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	3302      	adds	r3, #2
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	b29a      	uxth	r2, r3
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	3303      	adds	r3, #3
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	b29b      	uxth	r3, r3
 800782e:	021b      	lsls	r3, r3, #8
 8007830:	b29b      	uxth	r3, r3
 8007832:	4313      	orrs	r3, r2
 8007834:	b29a      	uxth	r2, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	791a      	ldrb	r2, [r3, #4]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	795a      	ldrb	r2, [r3, #5]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	799a      	ldrb	r2, [r3, #6]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	79da      	ldrb	r2, [r3, #7]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	79db      	ldrb	r3, [r3, #7]
 800785e:	2b20      	cmp	r3, #32
 8007860:	dc0f      	bgt.n	8007882 <USBH_ParseDevDesc+0x82>
 8007862:	2b08      	cmp	r3, #8
 8007864:	db14      	blt.n	8007890 <USBH_ParseDevDesc+0x90>
 8007866:	3b08      	subs	r3, #8
 8007868:	4a2d      	ldr	r2, [pc, #180]	; (8007920 <USBH_ParseDevDesc+0x120>)
 800786a:	fa22 f303 	lsr.w	r3, r2, r3
 800786e:	f003 0301 	and.w	r3, r3, #1
 8007872:	2b00      	cmp	r3, #0
 8007874:	bf14      	ite	ne
 8007876:	2301      	movne	r3, #1
 8007878:	2300      	moveq	r3, #0
 800787a:	b2db      	uxtb	r3, r3
 800787c:	2b00      	cmp	r3, #0
 800787e:	d102      	bne.n	8007886 <USBH_ParseDevDesc+0x86>
 8007880:	e006      	b.n	8007890 <USBH_ParseDevDesc+0x90>
 8007882:	2b40      	cmp	r3, #64	; 0x40
 8007884:	d104      	bne.n	8007890 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	79da      	ldrb	r2, [r3, #7]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	71da      	strb	r2, [r3, #7]
      break;
 800788e:	e003      	b.n	8007898 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2240      	movs	r2, #64	; 0x40
 8007894:	71da      	strb	r2, [r3, #7]
      break;
 8007896:	bf00      	nop
  }

  if (length > 8U)
 8007898:	88fb      	ldrh	r3, [r7, #6]
 800789a:	2b08      	cmp	r3, #8
 800789c:	d939      	bls.n	8007912 <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	3308      	adds	r3, #8
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	3309      	adds	r3, #9
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	021b      	lsls	r3, r3, #8
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	4313      	orrs	r3, r2
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	330a      	adds	r3, #10
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	330b      	adds	r3, #11
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	021b      	lsls	r3, r3, #8
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	4313      	orrs	r3, r2
 80078d0:	b29a      	uxth	r2, r3
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	330c      	adds	r3, #12
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	b29a      	uxth	r2, r3
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	330d      	adds	r3, #13
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	021b      	lsls	r3, r3, #8
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	4313      	orrs	r3, r2
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	7b9a      	ldrb	r2, [r3, #14]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	7bda      	ldrb	r2, [r3, #15]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	7c1a      	ldrb	r2, [r3, #16]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	7c5a      	ldrb	r2, [r3, #17]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	745a      	strb	r2, [r3, #17]
  }
}
 8007912:	bf00      	nop
 8007914:	3714      	adds	r7, #20
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	01000101 	.word	0x01000101

08007924 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b08c      	sub	sp, #48	; 0x30
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	4613      	mov	r3, r2
 8007930:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007938:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800793a:	2300      	movs	r3, #0
 800793c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007944:	2300      	movs	r3, #0
 8007946:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800794a:	2300      	movs	r3, #0
 800794c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	781a      	ldrb	r2, [r3, #0]
 8007958:	6a3b      	ldr	r3, [r7, #32]
 800795a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	785a      	ldrb	r2, [r3, #1]
 8007960:	6a3b      	ldr	r3, [r7, #32]
 8007962:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	3302      	adds	r3, #2
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	b29a      	uxth	r2, r3
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	3303      	adds	r3, #3
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	b29b      	uxth	r3, r3
 8007974:	021b      	lsls	r3, r3, #8
 8007976:	b29b      	uxth	r3, r3
 8007978:	4313      	orrs	r3, r2
 800797a:	b29b      	uxth	r3, r3
 800797c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007980:	bf28      	it	cs
 8007982:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007986:	b29a      	uxth	r2, r3
 8007988:	6a3b      	ldr	r3, [r7, #32]
 800798a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	791a      	ldrb	r2, [r3, #4]
 8007990:	6a3b      	ldr	r3, [r7, #32]
 8007992:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	795a      	ldrb	r2, [r3, #5]
 8007998:	6a3b      	ldr	r3, [r7, #32]
 800799a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	799a      	ldrb	r2, [r3, #6]
 80079a0:	6a3b      	ldr	r3, [r7, #32]
 80079a2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	79da      	ldrb	r2, [r3, #7]
 80079a8:	6a3b      	ldr	r3, [r7, #32]
 80079aa:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	7a1a      	ldrb	r2, [r3, #8]
 80079b0:	6a3b      	ldr	r3, [r7, #32]
 80079b2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80079b4:	6a3b      	ldr	r3, [r7, #32]
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	2b09      	cmp	r3, #9
 80079ba:	d002      	beq.n	80079c2 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80079bc:	6a3b      	ldr	r3, [r7, #32]
 80079be:	2209      	movs	r2, #9
 80079c0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80079c2:	88fb      	ldrh	r3, [r7, #6]
 80079c4:	2b09      	cmp	r3, #9
 80079c6:	f240 809d 	bls.w	8007b04 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80079ca:	2309      	movs	r3, #9
 80079cc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80079ce:	2300      	movs	r3, #0
 80079d0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80079d2:	e081      	b.n	8007ad8 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80079d4:	f107 0316 	add.w	r3, r7, #22
 80079d8:	4619      	mov	r1, r3
 80079da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079dc:	f000 f99f 	bl	8007d1e <USBH_GetNextDesc>
 80079e0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80079e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e4:	785b      	ldrb	r3, [r3, #1]
 80079e6:	2b04      	cmp	r3, #4
 80079e8:	d176      	bne.n	8007ad8 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80079ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	2b09      	cmp	r3, #9
 80079f0:	d002      	beq.n	80079f8 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80079f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f4:	2209      	movs	r2, #9
 80079f6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80079f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079fc:	221a      	movs	r2, #26
 80079fe:	fb02 f303 	mul.w	r3, r2, r3
 8007a02:	3308      	adds	r3, #8
 8007a04:	6a3a      	ldr	r2, [r7, #32]
 8007a06:	4413      	add	r3, r2
 8007a08:	3302      	adds	r3, #2
 8007a0a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007a0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a0e:	69f8      	ldr	r0, [r7, #28]
 8007a10:	f000 f87e 	bl	8007b10 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007a14:	2300      	movs	r3, #0
 8007a16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007a1e:	e043      	b.n	8007aa8 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007a20:	f107 0316 	add.w	r3, r7, #22
 8007a24:	4619      	mov	r1, r3
 8007a26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a28:	f000 f979 	bl	8007d1e <USBH_GetNextDesc>
 8007a2c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a30:	785b      	ldrb	r3, [r3, #1]
 8007a32:	2b05      	cmp	r3, #5
 8007a34:	d138      	bne.n	8007aa8 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	795b      	ldrb	r3, [r3, #5]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d10f      	bne.n	8007a5e <USBH_ParseCfgDesc+0x13a>
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	799b      	ldrb	r3, [r3, #6]
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d10b      	bne.n	8007a5e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	79db      	ldrb	r3, [r3, #7]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d10f      	bne.n	8007a6e <USBH_ParseCfgDesc+0x14a>
 8007a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	2b09      	cmp	r3, #9
 8007a54:	d00b      	beq.n	8007a6e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a58:	2209      	movs	r2, #9
 8007a5a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007a5c:	e007      	b.n	8007a6e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	2b07      	cmp	r3, #7
 8007a64:	d004      	beq.n	8007a70 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a68:	2207      	movs	r2, #7
 8007a6a:	701a      	strb	r2, [r3, #0]
 8007a6c:	e000      	b.n	8007a70 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007a6e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007a70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a74:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007a78:	3201      	adds	r2, #1
 8007a7a:	00d2      	lsls	r2, r2, #3
 8007a7c:	211a      	movs	r1, #26
 8007a7e:	fb01 f303 	mul.w	r3, r1, r3
 8007a82:	4413      	add	r3, r2
 8007a84:	3308      	adds	r3, #8
 8007a86:	6a3a      	ldr	r2, [r7, #32]
 8007a88:	4413      	add	r3, r2
 8007a8a:	3304      	adds	r3, #4
 8007a8c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007a8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a90:	69b9      	ldr	r1, [r7, #24]
 8007a92:	68f8      	ldr	r0, [r7, #12]
 8007a94:	f000 f86b 	bl	8007b6e <USBH_ParseEPDesc>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007a9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	791b      	ldrb	r3, [r3, #4]
 8007aac:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d204      	bcs.n	8007abe <USBH_ParseCfgDesc+0x19a>
 8007ab4:	6a3b      	ldr	r3, [r7, #32]
 8007ab6:	885a      	ldrh	r2, [r3, #2]
 8007ab8:	8afb      	ldrh	r3, [r7, #22]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d8b0      	bhi.n	8007a20 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	791b      	ldrb	r3, [r3, #4]
 8007ac2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d201      	bcs.n	8007ace <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007aca:	2303      	movs	r3, #3
 8007acc:	e01c      	b.n	8007b08 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007ace:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007ad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d805      	bhi.n	8007aec <USBH_ParseCfgDesc+0x1c8>
 8007ae0:	6a3b      	ldr	r3, [r7, #32]
 8007ae2:	885a      	ldrh	r2, [r3, #2]
 8007ae4:	8afb      	ldrh	r3, [r7, #22]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	f63f af74 	bhi.w	80079d4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007aec:	6a3b      	ldr	r3, [r7, #32]
 8007aee:	791b      	ldrb	r3, [r3, #4]
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	bf28      	it	cs
 8007af4:	2302      	movcs	r3, #2
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d201      	bcs.n	8007b04 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007b00:	2303      	movs	r3, #3
 8007b02:	e001      	b.n	8007b08 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007b04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3730      	adds	r7, #48	; 0x30
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	781a      	ldrb	r2, [r3, #0]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	785a      	ldrb	r2, [r3, #1]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	789a      	ldrb	r2, [r3, #2]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	78da      	ldrb	r2, [r3, #3]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	791a      	ldrb	r2, [r3, #4]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	795a      	ldrb	r2, [r3, #5]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	799a      	ldrb	r2, [r3, #6]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	79da      	ldrb	r2, [r3, #7]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	7a1a      	ldrb	r2, [r3, #8]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	721a      	strb	r2, [r3, #8]
}
 8007b62:	bf00      	nop
 8007b64:	370c      	adds	r7, #12
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr

08007b6e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007b6e:	b480      	push	{r7}
 8007b70:	b087      	sub	sp, #28
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	60f8      	str	r0, [r7, #12]
 8007b76:	60b9      	str	r1, [r7, #8]
 8007b78:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	781a      	ldrb	r2, [r3, #0]
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	785a      	ldrb	r2, [r3, #1]
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	789a      	ldrb	r2, [r3, #2]
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	78da      	ldrb	r2, [r3, #3]
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	3304      	adds	r3, #4
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	b29a      	uxth	r2, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	3305      	adds	r3, #5
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	021b      	lsls	r3, r3, #8
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	b29a      	uxth	r2, r3
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	799a      	ldrb	r2, [r3, #6]
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	889b      	ldrh	r3, [r3, #4]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d102      	bne.n	8007bd0 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007bca:	2303      	movs	r3, #3
 8007bcc:	75fb      	strb	r3, [r7, #23]
 8007bce:	e033      	b.n	8007c38 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	889b      	ldrh	r3, [r3, #4]
 8007bd4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007bd8:	f023 0307 	bic.w	r3, r3, #7
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	889b      	ldrh	r3, [r3, #4]
 8007be6:	b21a      	sxth	r2, r3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	3304      	adds	r3, #4
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	b299      	uxth	r1, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	3305      	adds	r3, #5
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	021b      	lsls	r3, r3, #8
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	430b      	orrs	r3, r1
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d110      	bne.n	8007c2a <USBH_ParseEPDesc+0xbc>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	3304      	adds	r3, #4
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	b299      	uxth	r1, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	3305      	adds	r3, #5
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	021b      	lsls	r3, r3, #8
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	430b      	orrs	r3, r1
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	b21b      	sxth	r3, r3
 8007c22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c26:	b21b      	sxth	r3, r3
 8007c28:	e001      	b.n	8007c2e <USBH_ParseEPDesc+0xc0>
 8007c2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	b21b      	sxth	r3, r3
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d116      	bne.n	8007c70 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	78db      	ldrb	r3, [r3, #3]
 8007c46:	f003 0303 	and.w	r3, r3, #3
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d005      	beq.n	8007c5a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	78db      	ldrb	r3, [r3, #3]
 8007c52:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007c56:	2b03      	cmp	r3, #3
 8007c58:	d127      	bne.n	8007caa <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	799b      	ldrb	r3, [r3, #6]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d003      	beq.n	8007c6a <USBH_ParseEPDesc+0xfc>
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	799b      	ldrb	r3, [r3, #6]
 8007c66:	2b10      	cmp	r3, #16
 8007c68:	d91f      	bls.n	8007caa <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	75fb      	strb	r3, [r7, #23]
 8007c6e:	e01c      	b.n	8007caa <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	78db      	ldrb	r3, [r3, #3]
 8007c74:	f003 0303 	and.w	r3, r3, #3
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d10a      	bne.n	8007c92 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	799b      	ldrb	r3, [r3, #6]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d003      	beq.n	8007c8c <USBH_ParseEPDesc+0x11e>
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	799b      	ldrb	r3, [r3, #6]
 8007c88:	2b10      	cmp	r3, #16
 8007c8a:	d90e      	bls.n	8007caa <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	75fb      	strb	r3, [r7, #23]
 8007c90:	e00b      	b.n	8007caa <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	78db      	ldrb	r3, [r3, #3]
 8007c96:	f003 0303 	and.w	r3, r3, #3
 8007c9a:	2b03      	cmp	r3, #3
 8007c9c:	d105      	bne.n	8007caa <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	799b      	ldrb	r3, [r3, #6]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d101      	bne.n	8007caa <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	371c      	adds	r7, #28
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b087      	sub	sp, #28
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	3301      	adds	r3, #1
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	2b03      	cmp	r3, #3
 8007cce:	d120      	bne.n	8007d12 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	1e9a      	subs	r2, r3, #2
 8007cd6:	88fb      	ldrh	r3, [r7, #6]
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	bf28      	it	cs
 8007cdc:	4613      	movcs	r3, r2
 8007cde:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	3302      	adds	r3, #2
 8007ce4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	82fb      	strh	r3, [r7, #22]
 8007cea:	e00b      	b.n	8007d04 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007cec:	8afb      	ldrh	r3, [r7, #22]
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	781a      	ldrb	r2, [r3, #0]
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007cfe:	8afb      	ldrh	r3, [r7, #22]
 8007d00:	3302      	adds	r3, #2
 8007d02:	82fb      	strh	r3, [r7, #22]
 8007d04:	8afa      	ldrh	r2, [r7, #22]
 8007d06:	8abb      	ldrh	r3, [r7, #20]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d3ef      	bcc.n	8007cec <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	701a      	strb	r2, [r3, #0]
  }
}
 8007d12:	bf00      	nop
 8007d14:	371c      	adds	r7, #28
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr

08007d1e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b085      	sub	sp, #20
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
 8007d26:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	881a      	ldrh	r2, [r3, #0]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	4413      	add	r3, r2
 8007d34:	b29a      	uxth	r2, r3
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4413      	add	r3, r2
 8007d44:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007d46:	68fb      	ldr	r3, [r7, #12]
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3714      	adds	r7, #20
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b086      	sub	sp, #24
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	4613      	mov	r3, r2
 8007d60:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007d62:	2301      	movs	r3, #1
 8007d64:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	789b      	ldrb	r3, [r3, #2]
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d002      	beq.n	8007d74 <USBH_CtlReq+0x20>
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	d00f      	beq.n	8007d92 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007d72:	e027      	b.n	8007dc4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	88fa      	ldrh	r2, [r7, #6]
 8007d7e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2201      	movs	r2, #1
 8007d84:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2202      	movs	r2, #2
 8007d8a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	75fb      	strb	r3, [r7, #23]
      break;
 8007d90:	e018      	b.n	8007dc4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f000 f81c 	bl	8007dd0 <USBH_HandleControl>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007d9c:	7dfb      	ldrb	r3, [r7, #23]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d002      	beq.n	8007da8 <USBH_CtlReq+0x54>
 8007da2:	7dfb      	ldrb	r3, [r7, #23]
 8007da4:	2b03      	cmp	r3, #3
 8007da6:	d106      	bne.n	8007db6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2201      	movs	r2, #1
 8007dac:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2200      	movs	r2, #0
 8007db2:	761a      	strb	r2, [r3, #24]
      break;
 8007db4:	e005      	b.n	8007dc2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007db6:	7dfb      	ldrb	r3, [r7, #23]
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d102      	bne.n	8007dc2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	709a      	strb	r2, [r3, #2]
      break;
 8007dc2:	bf00      	nop
  }
  return status;
 8007dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3718      	adds	r7, #24
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
	...

08007dd0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b086      	sub	sp, #24
 8007dd4:	af02      	add	r7, sp, #8
 8007dd6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	7e1b      	ldrb	r3, [r3, #24]
 8007de4:	3b01      	subs	r3, #1
 8007de6:	2b0a      	cmp	r3, #10
 8007de8:	f200 8156 	bhi.w	8008098 <USBH_HandleControl+0x2c8>
 8007dec:	a201      	add	r2, pc, #4	; (adr r2, 8007df4 <USBH_HandleControl+0x24>)
 8007dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df2:	bf00      	nop
 8007df4:	08007e21 	.word	0x08007e21
 8007df8:	08007e3b 	.word	0x08007e3b
 8007dfc:	08007ea5 	.word	0x08007ea5
 8007e00:	08007ecb 	.word	0x08007ecb
 8007e04:	08007f03 	.word	0x08007f03
 8007e08:	08007f2d 	.word	0x08007f2d
 8007e0c:	08007f7f 	.word	0x08007f7f
 8007e10:	08007fa1 	.word	0x08007fa1
 8007e14:	08007fdd 	.word	0x08007fdd
 8007e18:	08008003 	.word	0x08008003
 8007e1c:	08008041 	.word	0x08008041
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f103 0110 	add.w	r1, r3, #16
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	795b      	ldrb	r3, [r3, #5]
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 f943 	bl	80080b8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2202      	movs	r2, #2
 8007e36:	761a      	strb	r2, [r3, #24]
      break;
 8007e38:	e139      	b.n	80080ae <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	795b      	ldrb	r3, [r3, #5]
 8007e3e:	4619      	mov	r1, r3
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 fcc5 	bl	80087d0 <USBH_LL_GetURBState>
 8007e46:	4603      	mov	r3, r0
 8007e48:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007e4a:	7bbb      	ldrb	r3, [r7, #14]
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d11e      	bne.n	8007e8e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	7c1b      	ldrb	r3, [r3, #16]
 8007e54:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e58:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	8adb      	ldrh	r3, [r3, #22]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d00a      	beq.n	8007e78 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007e62:	7b7b      	ldrb	r3, [r7, #13]
 8007e64:	2b80      	cmp	r3, #128	; 0x80
 8007e66:	d103      	bne.n	8007e70 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2203      	movs	r2, #3
 8007e6c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007e6e:	e115      	b.n	800809c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2205      	movs	r2, #5
 8007e74:	761a      	strb	r2, [r3, #24]
      break;
 8007e76:	e111      	b.n	800809c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007e78:	7b7b      	ldrb	r3, [r7, #13]
 8007e7a:	2b80      	cmp	r3, #128	; 0x80
 8007e7c:	d103      	bne.n	8007e86 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2209      	movs	r2, #9
 8007e82:	761a      	strb	r2, [r3, #24]
      break;
 8007e84:	e10a      	b.n	800809c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2207      	movs	r2, #7
 8007e8a:	761a      	strb	r2, [r3, #24]
      break;
 8007e8c:	e106      	b.n	800809c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007e8e:	7bbb      	ldrb	r3, [r7, #14]
 8007e90:	2b04      	cmp	r3, #4
 8007e92:	d003      	beq.n	8007e9c <USBH_HandleControl+0xcc>
 8007e94:	7bbb      	ldrb	r3, [r7, #14]
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	f040 8100 	bne.w	800809c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	220b      	movs	r2, #11
 8007ea0:	761a      	strb	r2, [r3, #24]
      break;
 8007ea2:	e0fb      	b.n	800809c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6899      	ldr	r1, [r3, #8]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	899a      	ldrh	r2, [r3, #12]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	791b      	ldrb	r3, [r3, #4]
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 f93a 	bl	8008136 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2204      	movs	r2, #4
 8007ec6:	761a      	strb	r2, [r3, #24]
      break;
 8007ec8:	e0f1      	b.n	80080ae <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	791b      	ldrb	r3, [r3, #4]
 8007ece:	4619      	mov	r1, r3
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 fc7d 	bl	80087d0 <USBH_LL_GetURBState>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007eda:	7bbb      	ldrb	r3, [r7, #14]
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d102      	bne.n	8007ee6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2209      	movs	r2, #9
 8007ee4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007ee6:	7bbb      	ldrb	r3, [r7, #14]
 8007ee8:	2b05      	cmp	r3, #5
 8007eea:	d102      	bne.n	8007ef2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007eec:	2303      	movs	r3, #3
 8007eee:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007ef0:	e0d6      	b.n	80080a0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007ef2:	7bbb      	ldrb	r3, [r7, #14]
 8007ef4:	2b04      	cmp	r3, #4
 8007ef6:	f040 80d3 	bne.w	80080a0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	220b      	movs	r2, #11
 8007efe:	761a      	strb	r2, [r3, #24]
      break;
 8007f00:	e0ce      	b.n	80080a0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6899      	ldr	r1, [r3, #8]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	899a      	ldrh	r2, [r3, #12]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	795b      	ldrb	r3, [r3, #5]
 8007f0e:	2001      	movs	r0, #1
 8007f10:	9000      	str	r0, [sp, #0]
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 f8ea 	bl	80080ec <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2206      	movs	r2, #6
 8007f28:	761a      	strb	r2, [r3, #24]
      break;
 8007f2a:	e0c0      	b.n	80080ae <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	795b      	ldrb	r3, [r3, #5]
 8007f30:	4619      	mov	r1, r3
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 fc4c 	bl	80087d0 <USBH_LL_GetURBState>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007f3c:	7bbb      	ldrb	r3, [r7, #14]
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d103      	bne.n	8007f4a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2207      	movs	r2, #7
 8007f46:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f48:	e0ac      	b.n	80080a4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007f4a:	7bbb      	ldrb	r3, [r7, #14]
 8007f4c:	2b05      	cmp	r3, #5
 8007f4e:	d105      	bne.n	8007f5c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	220c      	movs	r2, #12
 8007f54:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007f56:	2303      	movs	r3, #3
 8007f58:	73fb      	strb	r3, [r7, #15]
      break;
 8007f5a:	e0a3      	b.n	80080a4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007f5c:	7bbb      	ldrb	r3, [r7, #14]
 8007f5e:	2b02      	cmp	r3, #2
 8007f60:	d103      	bne.n	8007f6a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2205      	movs	r2, #5
 8007f66:	761a      	strb	r2, [r3, #24]
      break;
 8007f68:	e09c      	b.n	80080a4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007f6a:	7bbb      	ldrb	r3, [r7, #14]
 8007f6c:	2b04      	cmp	r3, #4
 8007f6e:	f040 8099 	bne.w	80080a4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	220b      	movs	r2, #11
 8007f76:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007f78:	2302      	movs	r3, #2
 8007f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f7c:	e092      	b.n	80080a4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	791b      	ldrb	r3, [r3, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	2100      	movs	r1, #0
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 f8d5 	bl	8008136 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f92:	b29a      	uxth	r2, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2208      	movs	r2, #8
 8007f9c:	761a      	strb	r2, [r3, #24]

      break;
 8007f9e:	e086      	b.n	80080ae <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	791b      	ldrb	r3, [r3, #4]
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 fc12 	bl	80087d0 <USBH_LL_GetURBState>
 8007fac:	4603      	mov	r3, r0
 8007fae:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007fb0:	7bbb      	ldrb	r3, [r7, #14]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d105      	bne.n	8007fc2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	220d      	movs	r2, #13
 8007fba:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007fc0:	e072      	b.n	80080a8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007fc2:	7bbb      	ldrb	r3, [r7, #14]
 8007fc4:	2b04      	cmp	r3, #4
 8007fc6:	d103      	bne.n	8007fd0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	220b      	movs	r2, #11
 8007fcc:	761a      	strb	r2, [r3, #24]
      break;
 8007fce:	e06b      	b.n	80080a8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007fd0:	7bbb      	ldrb	r3, [r7, #14]
 8007fd2:	2b05      	cmp	r3, #5
 8007fd4:	d168      	bne.n	80080a8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	73fb      	strb	r3, [r7, #15]
      break;
 8007fda:	e065      	b.n	80080a8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	795b      	ldrb	r3, [r3, #5]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	9200      	str	r2, [sp, #0]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	2100      	movs	r1, #0
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 f87f 	bl	80080ec <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ff4:	b29a      	uxth	r2, r3
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	220a      	movs	r2, #10
 8007ffe:	761a      	strb	r2, [r3, #24]
      break;
 8008000:	e055      	b.n	80080ae <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	795b      	ldrb	r3, [r3, #5]
 8008006:	4619      	mov	r1, r3
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 fbe1 	bl	80087d0 <USBH_LL_GetURBState>
 800800e:	4603      	mov	r3, r0
 8008010:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008012:	7bbb      	ldrb	r3, [r7, #14]
 8008014:	2b01      	cmp	r3, #1
 8008016:	d105      	bne.n	8008024 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008018:	2300      	movs	r3, #0
 800801a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	220d      	movs	r2, #13
 8008020:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008022:	e043      	b.n	80080ac <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008024:	7bbb      	ldrb	r3, [r7, #14]
 8008026:	2b02      	cmp	r3, #2
 8008028:	d103      	bne.n	8008032 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2209      	movs	r2, #9
 800802e:	761a      	strb	r2, [r3, #24]
      break;
 8008030:	e03c      	b.n	80080ac <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008032:	7bbb      	ldrb	r3, [r7, #14]
 8008034:	2b04      	cmp	r3, #4
 8008036:	d139      	bne.n	80080ac <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	220b      	movs	r2, #11
 800803c:	761a      	strb	r2, [r3, #24]
      break;
 800803e:	e035      	b.n	80080ac <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	7e5b      	ldrb	r3, [r3, #25]
 8008044:	3301      	adds	r3, #1
 8008046:	b2da      	uxtb	r2, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	765a      	strb	r2, [r3, #25]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	7e5b      	ldrb	r3, [r3, #25]
 8008050:	2b02      	cmp	r3, #2
 8008052:	d806      	bhi.n	8008062 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2201      	movs	r2, #1
 800805e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008060:	e025      	b.n	80080ae <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008068:	2106      	movs	r1, #6
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	795b      	ldrb	r3, [r3, #5]
 8008078:	4619      	mov	r1, r3
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f90c 	bl	8008298 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	791b      	ldrb	r3, [r3, #4]
 8008084:	4619      	mov	r1, r3
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 f906 	bl	8008298 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008092:	2302      	movs	r3, #2
 8008094:	73fb      	strb	r3, [r7, #15]
      break;
 8008096:	e00a      	b.n	80080ae <USBH_HandleControl+0x2de>

    default:
      break;
 8008098:	bf00      	nop
 800809a:	e008      	b.n	80080ae <USBH_HandleControl+0x2de>
      break;
 800809c:	bf00      	nop
 800809e:	e006      	b.n	80080ae <USBH_HandleControl+0x2de>
      break;
 80080a0:	bf00      	nop
 80080a2:	e004      	b.n	80080ae <USBH_HandleControl+0x2de>
      break;
 80080a4:	bf00      	nop
 80080a6:	e002      	b.n	80080ae <USBH_HandleControl+0x2de>
      break;
 80080a8:	bf00      	nop
 80080aa:	e000      	b.n	80080ae <USBH_HandleControl+0x2de>
      break;
 80080ac:	bf00      	nop
  }

  return status;
 80080ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3710      	adds	r7, #16
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b088      	sub	sp, #32
 80080bc:	af04      	add	r7, sp, #16
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	4613      	mov	r3, r2
 80080c4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80080c6:	79f9      	ldrb	r1, [r7, #7]
 80080c8:	2300      	movs	r3, #0
 80080ca:	9303      	str	r3, [sp, #12]
 80080cc:	2308      	movs	r3, #8
 80080ce:	9302      	str	r3, [sp, #8]
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	9301      	str	r3, [sp, #4]
 80080d4:	2300      	movs	r3, #0
 80080d6:	9300      	str	r3, [sp, #0]
 80080d8:	2300      	movs	r3, #0
 80080da:	2200      	movs	r2, #0
 80080dc:	68f8      	ldr	r0, [r7, #12]
 80080de:	f000 fb46 	bl	800876e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b088      	sub	sp, #32
 80080f0:	af04      	add	r7, sp, #16
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	4611      	mov	r1, r2
 80080f8:	461a      	mov	r2, r3
 80080fa:	460b      	mov	r3, r1
 80080fc:	80fb      	strh	r3, [r7, #6]
 80080fe:	4613      	mov	r3, r2
 8008100:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008108:	2b00      	cmp	r3, #0
 800810a:	d001      	beq.n	8008110 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800810c:	2300      	movs	r3, #0
 800810e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008110:	7979      	ldrb	r1, [r7, #5]
 8008112:	7e3b      	ldrb	r3, [r7, #24]
 8008114:	9303      	str	r3, [sp, #12]
 8008116:	88fb      	ldrh	r3, [r7, #6]
 8008118:	9302      	str	r3, [sp, #8]
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	9301      	str	r3, [sp, #4]
 800811e:	2301      	movs	r3, #1
 8008120:	9300      	str	r3, [sp, #0]
 8008122:	2300      	movs	r3, #0
 8008124:	2200      	movs	r2, #0
 8008126:	68f8      	ldr	r0, [r7, #12]
 8008128:	f000 fb21 	bl	800876e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b088      	sub	sp, #32
 800813a:	af04      	add	r7, sp, #16
 800813c:	60f8      	str	r0, [r7, #12]
 800813e:	60b9      	str	r1, [r7, #8]
 8008140:	4611      	mov	r1, r2
 8008142:	461a      	mov	r2, r3
 8008144:	460b      	mov	r3, r1
 8008146:	80fb      	strh	r3, [r7, #6]
 8008148:	4613      	mov	r3, r2
 800814a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800814c:	7979      	ldrb	r1, [r7, #5]
 800814e:	2300      	movs	r3, #0
 8008150:	9303      	str	r3, [sp, #12]
 8008152:	88fb      	ldrh	r3, [r7, #6]
 8008154:	9302      	str	r3, [sp, #8]
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	9301      	str	r3, [sp, #4]
 800815a:	2301      	movs	r3, #1
 800815c:	9300      	str	r3, [sp, #0]
 800815e:	2300      	movs	r3, #0
 8008160:	2201      	movs	r2, #1
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f000 fb03 	bl	800876e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008168:	2300      	movs	r3, #0

}
 800816a:	4618      	mov	r0, r3
 800816c:	3710      	adds	r7, #16
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008172:	b580      	push	{r7, lr}
 8008174:	b088      	sub	sp, #32
 8008176:	af04      	add	r7, sp, #16
 8008178:	60f8      	str	r0, [r7, #12]
 800817a:	60b9      	str	r1, [r7, #8]
 800817c:	4611      	mov	r1, r2
 800817e:	461a      	mov	r2, r3
 8008180:	460b      	mov	r3, r1
 8008182:	80fb      	strh	r3, [r7, #6]
 8008184:	4613      	mov	r3, r2
 8008186:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800818e:	2b00      	cmp	r3, #0
 8008190:	d001      	beq.n	8008196 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008192:	2300      	movs	r3, #0
 8008194:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008196:	7979      	ldrb	r1, [r7, #5]
 8008198:	7e3b      	ldrb	r3, [r7, #24]
 800819a:	9303      	str	r3, [sp, #12]
 800819c:	88fb      	ldrh	r3, [r7, #6]
 800819e:	9302      	str	r3, [sp, #8]
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	9301      	str	r3, [sp, #4]
 80081a4:	2301      	movs	r3, #1
 80081a6:	9300      	str	r3, [sp, #0]
 80081a8:	2302      	movs	r3, #2
 80081aa:	2200      	movs	r2, #0
 80081ac:	68f8      	ldr	r0, [r7, #12]
 80081ae:	f000 fade 	bl	800876e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3710      	adds	r7, #16
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b088      	sub	sp, #32
 80081c0:	af04      	add	r7, sp, #16
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	4611      	mov	r1, r2
 80081c8:	461a      	mov	r2, r3
 80081ca:	460b      	mov	r3, r1
 80081cc:	80fb      	strh	r3, [r7, #6]
 80081ce:	4613      	mov	r3, r2
 80081d0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80081d2:	7979      	ldrb	r1, [r7, #5]
 80081d4:	2300      	movs	r3, #0
 80081d6:	9303      	str	r3, [sp, #12]
 80081d8:	88fb      	ldrh	r3, [r7, #6]
 80081da:	9302      	str	r3, [sp, #8]
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	9301      	str	r3, [sp, #4]
 80081e0:	2301      	movs	r3, #1
 80081e2:	9300      	str	r3, [sp, #0]
 80081e4:	2302      	movs	r3, #2
 80081e6:	2201      	movs	r2, #1
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	f000 fac0 	bl	800876e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80081ee:	2300      	movs	r3, #0
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3710      	adds	r7, #16
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b086      	sub	sp, #24
 80081fc:	af04      	add	r7, sp, #16
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	4608      	mov	r0, r1
 8008202:	4611      	mov	r1, r2
 8008204:	461a      	mov	r2, r3
 8008206:	4603      	mov	r3, r0
 8008208:	70fb      	strb	r3, [r7, #3]
 800820a:	460b      	mov	r3, r1
 800820c:	70bb      	strb	r3, [r7, #2]
 800820e:	4613      	mov	r3, r2
 8008210:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008212:	7878      	ldrb	r0, [r7, #1]
 8008214:	78ba      	ldrb	r2, [r7, #2]
 8008216:	78f9      	ldrb	r1, [r7, #3]
 8008218:	8b3b      	ldrh	r3, [r7, #24]
 800821a:	9302      	str	r3, [sp, #8]
 800821c:	7d3b      	ldrb	r3, [r7, #20]
 800821e:	9301      	str	r3, [sp, #4]
 8008220:	7c3b      	ldrb	r3, [r7, #16]
 8008222:	9300      	str	r3, [sp, #0]
 8008224:	4603      	mov	r3, r0
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 fa53 	bl	80086d2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3708      	adds	r7, #8
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b082      	sub	sp, #8
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
 800823e:	460b      	mov	r3, r1
 8008240:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008242:	78fb      	ldrb	r3, [r7, #3]
 8008244:	4619      	mov	r1, r3
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 fa72 	bl	8008730 <USBH_LL_ClosePipe>

  return USBH_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	3708      	adds	r7, #8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b084      	sub	sp, #16
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
 800825e:	460b      	mov	r3, r1
 8008260:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f836 	bl	80082d4 <USBH_GetFreePipe>
 8008268:	4603      	mov	r3, r0
 800826a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800826c:	89fb      	ldrh	r3, [r7, #14]
 800826e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008272:	4293      	cmp	r3, r2
 8008274:	d00a      	beq.n	800828c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008276:	78fa      	ldrb	r2, [r7, #3]
 8008278:	89fb      	ldrh	r3, [r7, #14]
 800827a:	f003 030f 	and.w	r3, r3, #15
 800827e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008282:	6879      	ldr	r1, [r7, #4]
 8008284:	33e0      	adds	r3, #224	; 0xe0
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	440b      	add	r3, r1
 800828a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800828c:	89fb      	ldrh	r3, [r7, #14]
 800828e:	b2db      	uxtb	r3, r3
}
 8008290:	4618      	mov	r0, r3
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	460b      	mov	r3, r1
 80082a2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80082a4:	78fb      	ldrb	r3, [r7, #3]
 80082a6:	2b0f      	cmp	r3, #15
 80082a8:	d80d      	bhi.n	80082c6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80082aa:	78fb      	ldrb	r3, [r7, #3]
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	33e0      	adds	r3, #224	; 0xe0
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	4413      	add	r3, r2
 80082b4:	685a      	ldr	r2, [r3, #4]
 80082b6:	78fb      	ldrb	r3, [r7, #3]
 80082b8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80082bc:	6879      	ldr	r1, [r7, #4]
 80082be:	33e0      	adds	r3, #224	; 0xe0
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	440b      	add	r3, r1
 80082c4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80082dc:	2300      	movs	r3, #0
 80082de:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80082e0:	2300      	movs	r3, #0
 80082e2:	73fb      	strb	r3, [r7, #15]
 80082e4:	e00f      	b.n	8008306 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80082e6:	7bfb      	ldrb	r3, [r7, #15]
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	33e0      	adds	r3, #224	; 0xe0
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	4413      	add	r3, r2
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d102      	bne.n	8008300 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80082fa:	7bfb      	ldrb	r3, [r7, #15]
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	e007      	b.n	8008310 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008300:	7bfb      	ldrb	r3, [r7, #15]
 8008302:	3301      	adds	r3, #1
 8008304:	73fb      	strb	r3, [r7, #15]
 8008306:	7bfb      	ldrb	r3, [r7, #15]
 8008308:	2b0f      	cmp	r3, #15
 800830a:	d9ec      	bls.n	80082e6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800830c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008310:	4618      	mov	r0, r3
 8008312:	3714      	adds	r7, #20
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008320:	2201      	movs	r2, #1
 8008322:	490e      	ldr	r1, [pc, #56]	; (800835c <MX_USB_HOST_Init+0x40>)
 8008324:	480e      	ldr	r0, [pc, #56]	; (8008360 <MX_USB_HOST_Init+0x44>)
 8008326:	f7fe fba5 	bl	8006a74 <USBH_Init>
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d001      	beq.n	8008334 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008330:	f7f8 fffc 	bl	800132c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008334:	490b      	ldr	r1, [pc, #44]	; (8008364 <MX_USB_HOST_Init+0x48>)
 8008336:	480a      	ldr	r0, [pc, #40]	; (8008360 <MX_USB_HOST_Init+0x44>)
 8008338:	f7fe fc2a 	bl	8006b90 <USBH_RegisterClass>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d001      	beq.n	8008346 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008342:	f7f8 fff3 	bl	800132c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008346:	4806      	ldr	r0, [pc, #24]	; (8008360 <MX_USB_HOST_Init+0x44>)
 8008348:	f7fe fcae 	bl	8006ca8 <USBH_Start>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d001      	beq.n	8008356 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008352:	f7f8 ffeb 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008356:	bf00      	nop
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	0800837d 	.word	0x0800837d
 8008360:	200001dc 	.word	0x200001dc
 8008364:	2000000c 	.word	0x2000000c

08008368 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800836c:	4802      	ldr	r0, [pc, #8]	; (8008378 <MX_USB_HOST_Process+0x10>)
 800836e:	f7fe fcab 	bl	8006cc8 <USBH_Process>
}
 8008372:	bf00      	nop
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	200001dc 	.word	0x200001dc

0800837c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	460b      	mov	r3, r1
 8008386:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008388:	78fb      	ldrb	r3, [r7, #3]
 800838a:	3b01      	subs	r3, #1
 800838c:	2b04      	cmp	r3, #4
 800838e:	d819      	bhi.n	80083c4 <USBH_UserProcess+0x48>
 8008390:	a201      	add	r2, pc, #4	; (adr r2, 8008398 <USBH_UserProcess+0x1c>)
 8008392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008396:	bf00      	nop
 8008398:	080083c5 	.word	0x080083c5
 800839c:	080083b5 	.word	0x080083b5
 80083a0:	080083c5 	.word	0x080083c5
 80083a4:	080083bd 	.word	0x080083bd
 80083a8:	080083ad 	.word	0x080083ad
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80083ac:	4b09      	ldr	r3, [pc, #36]	; (80083d4 <USBH_UserProcess+0x58>)
 80083ae:	2203      	movs	r2, #3
 80083b0:	701a      	strb	r2, [r3, #0]
  break;
 80083b2:	e008      	b.n	80083c6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80083b4:	4b07      	ldr	r3, [pc, #28]	; (80083d4 <USBH_UserProcess+0x58>)
 80083b6:	2202      	movs	r2, #2
 80083b8:	701a      	strb	r2, [r3, #0]
  break;
 80083ba:	e004      	b.n	80083c6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80083bc:	4b05      	ldr	r3, [pc, #20]	; (80083d4 <USBH_UserProcess+0x58>)
 80083be:	2201      	movs	r2, #1
 80083c0:	701a      	strb	r2, [r3, #0]
  break;
 80083c2:	e000      	b.n	80083c6 <USBH_UserProcess+0x4a>

  default:
  break;
 80083c4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80083c6:	bf00      	nop
 80083c8:	370c      	adds	r7, #12
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop
 80083d4:	200005b4 	.word	0x200005b4

080083d8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b08a      	sub	sp, #40	; 0x28
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083e0:	f107 0314 	add.w	r3, r7, #20
 80083e4:	2200      	movs	r2, #0
 80083e6:	601a      	str	r2, [r3, #0]
 80083e8:	605a      	str	r2, [r3, #4]
 80083ea:	609a      	str	r2, [r3, #8]
 80083ec:	60da      	str	r2, [r3, #12]
 80083ee:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083f8:	d147      	bne.n	800848a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083fa:	2300      	movs	r3, #0
 80083fc:	613b      	str	r3, [r7, #16]
 80083fe:	4b25      	ldr	r3, [pc, #148]	; (8008494 <HAL_HCD_MspInit+0xbc>)
 8008400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008402:	4a24      	ldr	r2, [pc, #144]	; (8008494 <HAL_HCD_MspInit+0xbc>)
 8008404:	f043 0301 	orr.w	r3, r3, #1
 8008408:	6313      	str	r3, [r2, #48]	; 0x30
 800840a:	4b22      	ldr	r3, [pc, #136]	; (8008494 <HAL_HCD_MspInit+0xbc>)
 800840c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800840e:	f003 0301 	and.w	r3, r3, #1
 8008412:	613b      	str	r3, [r7, #16]
 8008414:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008416:	f44f 7300 	mov.w	r3, #512	; 0x200
 800841a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800841c:	2300      	movs	r3, #0
 800841e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008420:	2300      	movs	r3, #0
 8008422:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008424:	f107 0314 	add.w	r3, r7, #20
 8008428:	4619      	mov	r1, r3
 800842a:	481b      	ldr	r0, [pc, #108]	; (8008498 <HAL_HCD_MspInit+0xc0>)
 800842c:	f7f9 fdb0 	bl	8001f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008430:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008436:	2302      	movs	r3, #2
 8008438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800843a:	2300      	movs	r3, #0
 800843c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800843e:	2300      	movs	r3, #0
 8008440:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008442:	230a      	movs	r3, #10
 8008444:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008446:	f107 0314 	add.w	r3, r7, #20
 800844a:	4619      	mov	r1, r3
 800844c:	4812      	ldr	r0, [pc, #72]	; (8008498 <HAL_HCD_MspInit+0xc0>)
 800844e:	f7f9 fd9f 	bl	8001f90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008452:	4b10      	ldr	r3, [pc, #64]	; (8008494 <HAL_HCD_MspInit+0xbc>)
 8008454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008456:	4a0f      	ldr	r2, [pc, #60]	; (8008494 <HAL_HCD_MspInit+0xbc>)
 8008458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800845c:	6353      	str	r3, [r2, #52]	; 0x34
 800845e:	2300      	movs	r3, #0
 8008460:	60fb      	str	r3, [r7, #12]
 8008462:	4b0c      	ldr	r3, [pc, #48]	; (8008494 <HAL_HCD_MspInit+0xbc>)
 8008464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008466:	4a0b      	ldr	r2, [pc, #44]	; (8008494 <HAL_HCD_MspInit+0xbc>)
 8008468:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800846c:	6453      	str	r3, [r2, #68]	; 0x44
 800846e:	4b09      	ldr	r3, [pc, #36]	; (8008494 <HAL_HCD_MspInit+0xbc>)
 8008470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008476:	60fb      	str	r3, [r7, #12]
 8008478:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800847a:	2200      	movs	r2, #0
 800847c:	2100      	movs	r1, #0
 800847e:	2043      	movs	r0, #67	; 0x43
 8008480:	f7f9 fd4f 	bl	8001f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008484:	2043      	movs	r0, #67	; 0x43
 8008486:	f7f9 fd68 	bl	8001f5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800848a:	bf00      	nop
 800848c:	3728      	adds	r7, #40	; 0x28
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	40023800 	.word	0x40023800
 8008498:	40020000 	.word	0x40020000

0800849c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7fe ffeb 	bl	8007486 <USBH_LL_IncTimer>
}
 80084b0:	bf00      	nop
 80084b2:	3708      	adds	r7, #8
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7ff f823 	bl	8007512 <USBH_LL_Connect>
}
 80084cc:	bf00      	nop
 80084ce:	3708      	adds	r7, #8
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7ff f82c 	bl	8007540 <USBH_LL_Disconnect>
}
 80084e8:	bf00      	nop
 80084ea:	3708      	adds	r7, #8
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	460b      	mov	r3, r1
 80084fa:	70fb      	strb	r3, [r7, #3]
 80084fc:	4613      	mov	r3, r2
 80084fe:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008500:	bf00      	nop
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800851a:	4618      	mov	r0, r3
 800851c:	f7fe ffdd 	bl	80074da <USBH_LL_PortEnabled>
}
 8008520:	bf00      	nop
 8008522:	3708      	adds	r7, #8
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008536:	4618      	mov	r0, r3
 8008538:	f7fe ffdd 	bl	80074f6 <USBH_LL_PortDisabled>
}
 800853c:	bf00      	nop
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008552:	2b01      	cmp	r3, #1
 8008554:	d12a      	bne.n	80085ac <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008556:	4a18      	ldr	r2, [pc, #96]	; (80085b8 <USBH_LL_Init+0x74>)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4a15      	ldr	r2, [pc, #84]	; (80085b8 <USBH_LL_Init+0x74>)
 8008562:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008566:	4b14      	ldr	r3, [pc, #80]	; (80085b8 <USBH_LL_Init+0x74>)
 8008568:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800856c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800856e:	4b12      	ldr	r3, [pc, #72]	; (80085b8 <USBH_LL_Init+0x74>)
 8008570:	2208      	movs	r2, #8
 8008572:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008574:	4b10      	ldr	r3, [pc, #64]	; (80085b8 <USBH_LL_Init+0x74>)
 8008576:	2201      	movs	r2, #1
 8008578:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800857a:	4b0f      	ldr	r3, [pc, #60]	; (80085b8 <USBH_LL_Init+0x74>)
 800857c:	2200      	movs	r2, #0
 800857e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008580:	4b0d      	ldr	r3, [pc, #52]	; (80085b8 <USBH_LL_Init+0x74>)
 8008582:	2202      	movs	r2, #2
 8008584:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008586:	4b0c      	ldr	r3, [pc, #48]	; (80085b8 <USBH_LL_Init+0x74>)
 8008588:	2200      	movs	r2, #0
 800858a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800858c:	480a      	ldr	r0, [pc, #40]	; (80085b8 <USBH_LL_Init+0x74>)
 800858e:	f7f9 feb4 	bl	80022fa <HAL_HCD_Init>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d001      	beq.n	800859c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008598:	f7f8 fec8 	bl	800132c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800859c:	4806      	ldr	r0, [pc, #24]	; (80085b8 <USBH_LL_Init+0x74>)
 800859e:	f7fa fa98 	bl	8002ad2 <HAL_HCD_GetCurrentFrame>
 80085a2:	4603      	mov	r3, r0
 80085a4:	4619      	mov	r1, r3
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f7fe ff5e 	bl	8007468 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3708      	adds	r7, #8
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	200005b8 	.word	0x200005b8

080085bc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085c4:	2300      	movs	r3, #0
 80085c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085c8:	2300      	movs	r3, #0
 80085ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7fa fa07 	bl	80029e6 <HAL_HCD_Start>
 80085d8:	4603      	mov	r3, r0
 80085da:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80085dc:	7bfb      	ldrb	r3, [r7, #15]
 80085de:	4618      	mov	r0, r3
 80085e0:	f000 f95c 	bl	800889c <USBH_Get_USB_Status>
 80085e4:	4603      	mov	r3, r0
 80085e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b084      	sub	sp, #16
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085fa:	2300      	movs	r3, #0
 80085fc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085fe:	2300      	movs	r3, #0
 8008600:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008608:	4618      	mov	r0, r3
 800860a:	f7fa fa0f 	bl	8002a2c <HAL_HCD_Stop>
 800860e:	4603      	mov	r3, r0
 8008610:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008612:	7bfb      	ldrb	r3, [r7, #15]
 8008614:	4618      	mov	r0, r3
 8008616:	f000 f941 	bl	800889c <USBH_Get_USB_Status>
 800861a:	4603      	mov	r3, r0
 800861c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800861e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008620:	4618      	mov	r0, r3
 8008622:	3710      	adds	r7, #16
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008630:	2301      	movs	r3, #1
 8008632:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800863a:	4618      	mov	r0, r3
 800863c:	f7fa fa57 	bl	8002aee <HAL_HCD_GetCurrentSpeed>
 8008640:	4603      	mov	r3, r0
 8008642:	2b02      	cmp	r3, #2
 8008644:	d00c      	beq.n	8008660 <USBH_LL_GetSpeed+0x38>
 8008646:	2b02      	cmp	r3, #2
 8008648:	d80d      	bhi.n	8008666 <USBH_LL_GetSpeed+0x3e>
 800864a:	2b00      	cmp	r3, #0
 800864c:	d002      	beq.n	8008654 <USBH_LL_GetSpeed+0x2c>
 800864e:	2b01      	cmp	r3, #1
 8008650:	d003      	beq.n	800865a <USBH_LL_GetSpeed+0x32>
 8008652:	e008      	b.n	8008666 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008654:	2300      	movs	r3, #0
 8008656:	73fb      	strb	r3, [r7, #15]
    break;
 8008658:	e008      	b.n	800866c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800865a:	2301      	movs	r3, #1
 800865c:	73fb      	strb	r3, [r7, #15]
    break;
 800865e:	e005      	b.n	800866c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008660:	2302      	movs	r3, #2
 8008662:	73fb      	strb	r3, [r7, #15]
    break;
 8008664:	e002      	b.n	800866c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008666:	2301      	movs	r3, #1
 8008668:	73fb      	strb	r3, [r7, #15]
    break;
 800866a:	bf00      	nop
  }
  return  speed;
 800866c:	7bfb      	ldrb	r3, [r7, #15]
}
 800866e:	4618      	mov	r0, r3
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b084      	sub	sp, #16
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800867e:	2300      	movs	r3, #0
 8008680:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008682:	2300      	movs	r3, #0
 8008684:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800868c:	4618      	mov	r0, r3
 800868e:	f7fa f9ea 	bl	8002a66 <HAL_HCD_ResetPort>
 8008692:	4603      	mov	r3, r0
 8008694:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008696:	7bfb      	ldrb	r3, [r7, #15]
 8008698:	4618      	mov	r0, r3
 800869a:	f000 f8ff 	bl	800889c <USBH_Get_USB_Status>
 800869e:	4603      	mov	r3, r0
 80086a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3710      	adds	r7, #16
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	460b      	mov	r3, r1
 80086b6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80086be:	78fa      	ldrb	r2, [r7, #3]
 80086c0:	4611      	mov	r1, r2
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7fa f9f1 	bl	8002aaa <HAL_HCD_HC_GetXferCount>
 80086c8:	4603      	mov	r3, r0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3708      	adds	r7, #8
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}

080086d2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80086d2:	b590      	push	{r4, r7, lr}
 80086d4:	b089      	sub	sp, #36	; 0x24
 80086d6:	af04      	add	r7, sp, #16
 80086d8:	6078      	str	r0, [r7, #4]
 80086da:	4608      	mov	r0, r1
 80086dc:	4611      	mov	r1, r2
 80086de:	461a      	mov	r2, r3
 80086e0:	4603      	mov	r3, r0
 80086e2:	70fb      	strb	r3, [r7, #3]
 80086e4:	460b      	mov	r3, r1
 80086e6:	70bb      	strb	r3, [r7, #2]
 80086e8:	4613      	mov	r3, r2
 80086ea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086ec:	2300      	movs	r3, #0
 80086ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086f0:	2300      	movs	r3, #0
 80086f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80086fa:	787c      	ldrb	r4, [r7, #1]
 80086fc:	78ba      	ldrb	r2, [r7, #2]
 80086fe:	78f9      	ldrb	r1, [r7, #3]
 8008700:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008702:	9302      	str	r3, [sp, #8]
 8008704:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008708:	9301      	str	r3, [sp, #4]
 800870a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800870e:	9300      	str	r3, [sp, #0]
 8008710:	4623      	mov	r3, r4
 8008712:	f7f9 fe54 	bl	80023be <HAL_HCD_HC_Init>
 8008716:	4603      	mov	r3, r0
 8008718:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800871a:	7bfb      	ldrb	r3, [r7, #15]
 800871c:	4618      	mov	r0, r3
 800871e:	f000 f8bd 	bl	800889c <USBH_Get_USB_Status>
 8008722:	4603      	mov	r3, r0
 8008724:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008726:	7bbb      	ldrb	r3, [r7, #14]
}
 8008728:	4618      	mov	r0, r3
 800872a:	3714      	adds	r7, #20
 800872c:	46bd      	mov	sp, r7
 800872e:	bd90      	pop	{r4, r7, pc}

08008730 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	460b      	mov	r3, r1
 800873a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800873c:	2300      	movs	r3, #0
 800873e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008740:	2300      	movs	r3, #0
 8008742:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800874a:	78fa      	ldrb	r2, [r7, #3]
 800874c:	4611      	mov	r1, r2
 800874e:	4618      	mov	r0, r3
 8008750:	f7f9 fec4 	bl	80024dc <HAL_HCD_HC_Halt>
 8008754:	4603      	mov	r3, r0
 8008756:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008758:	7bfb      	ldrb	r3, [r7, #15]
 800875a:	4618      	mov	r0, r3
 800875c:	f000 f89e 	bl	800889c <USBH_Get_USB_Status>
 8008760:	4603      	mov	r3, r0
 8008762:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008764:	7bbb      	ldrb	r3, [r7, #14]
}
 8008766:	4618      	mov	r0, r3
 8008768:	3710      	adds	r7, #16
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}

0800876e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800876e:	b590      	push	{r4, r7, lr}
 8008770:	b089      	sub	sp, #36	; 0x24
 8008772:	af04      	add	r7, sp, #16
 8008774:	6078      	str	r0, [r7, #4]
 8008776:	4608      	mov	r0, r1
 8008778:	4611      	mov	r1, r2
 800877a:	461a      	mov	r2, r3
 800877c:	4603      	mov	r3, r0
 800877e:	70fb      	strb	r3, [r7, #3]
 8008780:	460b      	mov	r3, r1
 8008782:	70bb      	strb	r3, [r7, #2]
 8008784:	4613      	mov	r3, r2
 8008786:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008788:	2300      	movs	r3, #0
 800878a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800878c:	2300      	movs	r3, #0
 800878e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008796:	787c      	ldrb	r4, [r7, #1]
 8008798:	78ba      	ldrb	r2, [r7, #2]
 800879a:	78f9      	ldrb	r1, [r7, #3]
 800879c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80087a0:	9303      	str	r3, [sp, #12]
 80087a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80087a4:	9302      	str	r3, [sp, #8]
 80087a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a8:	9301      	str	r3, [sp, #4]
 80087aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80087ae:	9300      	str	r3, [sp, #0]
 80087b0:	4623      	mov	r3, r4
 80087b2:	f7f9 feb7 	bl	8002524 <HAL_HCD_HC_SubmitRequest>
 80087b6:	4603      	mov	r3, r0
 80087b8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80087ba:	7bfb      	ldrb	r3, [r7, #15]
 80087bc:	4618      	mov	r0, r3
 80087be:	f000 f86d 	bl	800889c <USBH_Get_USB_Status>
 80087c2:	4603      	mov	r3, r0
 80087c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3714      	adds	r7, #20
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd90      	pop	{r4, r7, pc}

080087d0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	460b      	mov	r3, r1
 80087da:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80087e2:	78fa      	ldrb	r2, [r7, #3]
 80087e4:	4611      	mov	r1, r2
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7fa f94b 	bl	8002a82 <HAL_HCD_HC_GetURBState>
 80087ec:	4603      	mov	r3, r0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3708      	adds	r7, #8
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b082      	sub	sp, #8
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
 80087fe:	460b      	mov	r3, r1
 8008800:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008808:	2b01      	cmp	r3, #1
 800880a:	d103      	bne.n	8008814 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800880c:	78fb      	ldrb	r3, [r7, #3]
 800880e:	4618      	mov	r0, r3
 8008810:	f000 f870 	bl	80088f4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008814:	20c8      	movs	r0, #200	; 0xc8
 8008816:	f7f9 f823 	bl	8001860 <HAL_Delay>
  return USBH_OK;
 800881a:	2300      	movs	r3, #0
}
 800881c:	4618      	mov	r0, r3
 800881e:	3708      	adds	r7, #8
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008824:	b480      	push	{r7}
 8008826:	b085      	sub	sp, #20
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	460b      	mov	r3, r1
 800882e:	70fb      	strb	r3, [r7, #3]
 8008830:	4613      	mov	r3, r2
 8008832:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800883a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800883c:	78fb      	ldrb	r3, [r7, #3]
 800883e:	68fa      	ldr	r2, [r7, #12]
 8008840:	212c      	movs	r1, #44	; 0x2c
 8008842:	fb01 f303 	mul.w	r3, r1, r3
 8008846:	4413      	add	r3, r2
 8008848:	333b      	adds	r3, #59	; 0x3b
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d009      	beq.n	8008864 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008850:	78fb      	ldrb	r3, [r7, #3]
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	212c      	movs	r1, #44	; 0x2c
 8008856:	fb01 f303 	mul.w	r3, r1, r3
 800885a:	4413      	add	r3, r2
 800885c:	3354      	adds	r3, #84	; 0x54
 800885e:	78ba      	ldrb	r2, [r7, #2]
 8008860:	701a      	strb	r2, [r3, #0]
 8008862:	e008      	b.n	8008876 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008864:	78fb      	ldrb	r3, [r7, #3]
 8008866:	68fa      	ldr	r2, [r7, #12]
 8008868:	212c      	movs	r1, #44	; 0x2c
 800886a:	fb01 f303 	mul.w	r3, r1, r3
 800886e:	4413      	add	r3, r2
 8008870:	3355      	adds	r3, #85	; 0x55
 8008872:	78ba      	ldrb	r2, [r7, #2]
 8008874:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3714      	adds	r7, #20
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f7f8 ffe7 	bl	8001860 <HAL_Delay>
}
 8008892:	bf00      	nop
 8008894:	3708      	adds	r7, #8
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
	...

0800889c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800889c:	b480      	push	{r7}
 800889e:	b085      	sub	sp, #20
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	4603      	mov	r3, r0
 80088a4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088a6:	2300      	movs	r3, #0
 80088a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80088aa:	79fb      	ldrb	r3, [r7, #7]
 80088ac:	2b03      	cmp	r3, #3
 80088ae:	d817      	bhi.n	80088e0 <USBH_Get_USB_Status+0x44>
 80088b0:	a201      	add	r2, pc, #4	; (adr r2, 80088b8 <USBH_Get_USB_Status+0x1c>)
 80088b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b6:	bf00      	nop
 80088b8:	080088c9 	.word	0x080088c9
 80088bc:	080088cf 	.word	0x080088cf
 80088c0:	080088d5 	.word	0x080088d5
 80088c4:	080088db 	.word	0x080088db
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80088c8:	2300      	movs	r3, #0
 80088ca:	73fb      	strb	r3, [r7, #15]
    break;
 80088cc:	e00b      	b.n	80088e6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80088ce:	2302      	movs	r3, #2
 80088d0:	73fb      	strb	r3, [r7, #15]
    break;
 80088d2:	e008      	b.n	80088e6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80088d4:	2301      	movs	r3, #1
 80088d6:	73fb      	strb	r3, [r7, #15]
    break;
 80088d8:	e005      	b.n	80088e6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80088da:	2302      	movs	r3, #2
 80088dc:	73fb      	strb	r3, [r7, #15]
    break;
 80088de:	e002      	b.n	80088e6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80088e0:	2302      	movs	r3, #2
 80088e2:	73fb      	strb	r3, [r7, #15]
    break;
 80088e4:	bf00      	nop
  }
  return usb_status;
 80088e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3714      	adds	r7, #20
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	4603      	mov	r3, r0
 80088fc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80088fe:	79fb      	ldrb	r3, [r7, #7]
 8008900:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008902:	79fb      	ldrb	r3, [r7, #7]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d102      	bne.n	800890e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008908:	2300      	movs	r3, #0
 800890a:	73fb      	strb	r3, [r7, #15]
 800890c:	e001      	b.n	8008912 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800890e:	2301      	movs	r3, #1
 8008910:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008912:	7bfb      	ldrb	r3, [r7, #15]
 8008914:	461a      	mov	r2, r3
 8008916:	2101      	movs	r1, #1
 8008918:	4803      	ldr	r0, [pc, #12]	; (8008928 <MX_DriverVbusFS+0x34>)
 800891a:	f7f9 fcd5 	bl	80022c8 <HAL_GPIO_WritePin>
}
 800891e:	bf00      	nop
 8008920:	3710      	adds	r7, #16
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	40020800 	.word	0x40020800

0800892c <malloc>:
 800892c:	4b02      	ldr	r3, [pc, #8]	; (8008938 <malloc+0xc>)
 800892e:	4601      	mov	r1, r0
 8008930:	6818      	ldr	r0, [r3, #0]
 8008932:	f000 b82b 	b.w	800898c <_malloc_r>
 8008936:	bf00      	nop
 8008938:	20000078 	.word	0x20000078

0800893c <free>:
 800893c:	4b02      	ldr	r3, [pc, #8]	; (8008948 <free+0xc>)
 800893e:	4601      	mov	r1, r0
 8008940:	6818      	ldr	r0, [r3, #0]
 8008942:	f000 b8f3 	b.w	8008b2c <_free_r>
 8008946:	bf00      	nop
 8008948:	20000078 	.word	0x20000078

0800894c <sbrk_aligned>:
 800894c:	b570      	push	{r4, r5, r6, lr}
 800894e:	4e0e      	ldr	r6, [pc, #56]	; (8008988 <sbrk_aligned+0x3c>)
 8008950:	460c      	mov	r4, r1
 8008952:	6831      	ldr	r1, [r6, #0]
 8008954:	4605      	mov	r5, r0
 8008956:	b911      	cbnz	r1, 800895e <sbrk_aligned+0x12>
 8008958:	f000 f8ac 	bl	8008ab4 <_sbrk_r>
 800895c:	6030      	str	r0, [r6, #0]
 800895e:	4621      	mov	r1, r4
 8008960:	4628      	mov	r0, r5
 8008962:	f000 f8a7 	bl	8008ab4 <_sbrk_r>
 8008966:	1c43      	adds	r3, r0, #1
 8008968:	d00a      	beq.n	8008980 <sbrk_aligned+0x34>
 800896a:	1cc4      	adds	r4, r0, #3
 800896c:	f024 0403 	bic.w	r4, r4, #3
 8008970:	42a0      	cmp	r0, r4
 8008972:	d007      	beq.n	8008984 <sbrk_aligned+0x38>
 8008974:	1a21      	subs	r1, r4, r0
 8008976:	4628      	mov	r0, r5
 8008978:	f000 f89c 	bl	8008ab4 <_sbrk_r>
 800897c:	3001      	adds	r0, #1
 800897e:	d101      	bne.n	8008984 <sbrk_aligned+0x38>
 8008980:	f04f 34ff 	mov.w	r4, #4294967295
 8008984:	4620      	mov	r0, r4
 8008986:	bd70      	pop	{r4, r5, r6, pc}
 8008988:	200008c0 	.word	0x200008c0

0800898c <_malloc_r>:
 800898c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008990:	1ccd      	adds	r5, r1, #3
 8008992:	f025 0503 	bic.w	r5, r5, #3
 8008996:	3508      	adds	r5, #8
 8008998:	2d0c      	cmp	r5, #12
 800899a:	bf38      	it	cc
 800899c:	250c      	movcc	r5, #12
 800899e:	2d00      	cmp	r5, #0
 80089a0:	4607      	mov	r7, r0
 80089a2:	db01      	blt.n	80089a8 <_malloc_r+0x1c>
 80089a4:	42a9      	cmp	r1, r5
 80089a6:	d905      	bls.n	80089b4 <_malloc_r+0x28>
 80089a8:	230c      	movs	r3, #12
 80089aa:	603b      	str	r3, [r7, #0]
 80089ac:	2600      	movs	r6, #0
 80089ae:	4630      	mov	r0, r6
 80089b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008a88 <_malloc_r+0xfc>
 80089b8:	f000 f868 	bl	8008a8c <__malloc_lock>
 80089bc:	f8d8 3000 	ldr.w	r3, [r8]
 80089c0:	461c      	mov	r4, r3
 80089c2:	bb5c      	cbnz	r4, 8008a1c <_malloc_r+0x90>
 80089c4:	4629      	mov	r1, r5
 80089c6:	4638      	mov	r0, r7
 80089c8:	f7ff ffc0 	bl	800894c <sbrk_aligned>
 80089cc:	1c43      	adds	r3, r0, #1
 80089ce:	4604      	mov	r4, r0
 80089d0:	d155      	bne.n	8008a7e <_malloc_r+0xf2>
 80089d2:	f8d8 4000 	ldr.w	r4, [r8]
 80089d6:	4626      	mov	r6, r4
 80089d8:	2e00      	cmp	r6, #0
 80089da:	d145      	bne.n	8008a68 <_malloc_r+0xdc>
 80089dc:	2c00      	cmp	r4, #0
 80089de:	d048      	beq.n	8008a72 <_malloc_r+0xe6>
 80089e0:	6823      	ldr	r3, [r4, #0]
 80089e2:	4631      	mov	r1, r6
 80089e4:	4638      	mov	r0, r7
 80089e6:	eb04 0903 	add.w	r9, r4, r3
 80089ea:	f000 f863 	bl	8008ab4 <_sbrk_r>
 80089ee:	4581      	cmp	r9, r0
 80089f0:	d13f      	bne.n	8008a72 <_malloc_r+0xe6>
 80089f2:	6821      	ldr	r1, [r4, #0]
 80089f4:	1a6d      	subs	r5, r5, r1
 80089f6:	4629      	mov	r1, r5
 80089f8:	4638      	mov	r0, r7
 80089fa:	f7ff ffa7 	bl	800894c <sbrk_aligned>
 80089fe:	3001      	adds	r0, #1
 8008a00:	d037      	beq.n	8008a72 <_malloc_r+0xe6>
 8008a02:	6823      	ldr	r3, [r4, #0]
 8008a04:	442b      	add	r3, r5
 8008a06:	6023      	str	r3, [r4, #0]
 8008a08:	f8d8 3000 	ldr.w	r3, [r8]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d038      	beq.n	8008a82 <_malloc_r+0xf6>
 8008a10:	685a      	ldr	r2, [r3, #4]
 8008a12:	42a2      	cmp	r2, r4
 8008a14:	d12b      	bne.n	8008a6e <_malloc_r+0xe2>
 8008a16:	2200      	movs	r2, #0
 8008a18:	605a      	str	r2, [r3, #4]
 8008a1a:	e00f      	b.n	8008a3c <_malloc_r+0xb0>
 8008a1c:	6822      	ldr	r2, [r4, #0]
 8008a1e:	1b52      	subs	r2, r2, r5
 8008a20:	d41f      	bmi.n	8008a62 <_malloc_r+0xd6>
 8008a22:	2a0b      	cmp	r2, #11
 8008a24:	d917      	bls.n	8008a56 <_malloc_r+0xca>
 8008a26:	1961      	adds	r1, r4, r5
 8008a28:	42a3      	cmp	r3, r4
 8008a2a:	6025      	str	r5, [r4, #0]
 8008a2c:	bf18      	it	ne
 8008a2e:	6059      	strne	r1, [r3, #4]
 8008a30:	6863      	ldr	r3, [r4, #4]
 8008a32:	bf08      	it	eq
 8008a34:	f8c8 1000 	streq.w	r1, [r8]
 8008a38:	5162      	str	r2, [r4, r5]
 8008a3a:	604b      	str	r3, [r1, #4]
 8008a3c:	4638      	mov	r0, r7
 8008a3e:	f104 060b 	add.w	r6, r4, #11
 8008a42:	f000 f829 	bl	8008a98 <__malloc_unlock>
 8008a46:	f026 0607 	bic.w	r6, r6, #7
 8008a4a:	1d23      	adds	r3, r4, #4
 8008a4c:	1af2      	subs	r2, r6, r3
 8008a4e:	d0ae      	beq.n	80089ae <_malloc_r+0x22>
 8008a50:	1b9b      	subs	r3, r3, r6
 8008a52:	50a3      	str	r3, [r4, r2]
 8008a54:	e7ab      	b.n	80089ae <_malloc_r+0x22>
 8008a56:	42a3      	cmp	r3, r4
 8008a58:	6862      	ldr	r2, [r4, #4]
 8008a5a:	d1dd      	bne.n	8008a18 <_malloc_r+0x8c>
 8008a5c:	f8c8 2000 	str.w	r2, [r8]
 8008a60:	e7ec      	b.n	8008a3c <_malloc_r+0xb0>
 8008a62:	4623      	mov	r3, r4
 8008a64:	6864      	ldr	r4, [r4, #4]
 8008a66:	e7ac      	b.n	80089c2 <_malloc_r+0x36>
 8008a68:	4634      	mov	r4, r6
 8008a6a:	6876      	ldr	r6, [r6, #4]
 8008a6c:	e7b4      	b.n	80089d8 <_malloc_r+0x4c>
 8008a6e:	4613      	mov	r3, r2
 8008a70:	e7cc      	b.n	8008a0c <_malloc_r+0x80>
 8008a72:	230c      	movs	r3, #12
 8008a74:	603b      	str	r3, [r7, #0]
 8008a76:	4638      	mov	r0, r7
 8008a78:	f000 f80e 	bl	8008a98 <__malloc_unlock>
 8008a7c:	e797      	b.n	80089ae <_malloc_r+0x22>
 8008a7e:	6025      	str	r5, [r4, #0]
 8008a80:	e7dc      	b.n	8008a3c <_malloc_r+0xb0>
 8008a82:	605b      	str	r3, [r3, #4]
 8008a84:	deff      	udf	#255	; 0xff
 8008a86:	bf00      	nop
 8008a88:	200008bc 	.word	0x200008bc

08008a8c <__malloc_lock>:
 8008a8c:	4801      	ldr	r0, [pc, #4]	; (8008a94 <__malloc_lock+0x8>)
 8008a8e:	f000 b84b 	b.w	8008b28 <__retarget_lock_acquire_recursive>
 8008a92:	bf00      	nop
 8008a94:	20000a00 	.word	0x20000a00

08008a98 <__malloc_unlock>:
 8008a98:	4801      	ldr	r0, [pc, #4]	; (8008aa0 <__malloc_unlock+0x8>)
 8008a9a:	f000 b846 	b.w	8008b2a <__retarget_lock_release_recursive>
 8008a9e:	bf00      	nop
 8008aa0:	20000a00 	.word	0x20000a00

08008aa4 <memset>:
 8008aa4:	4402      	add	r2, r0
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d100      	bne.n	8008aae <memset+0xa>
 8008aac:	4770      	bx	lr
 8008aae:	f803 1b01 	strb.w	r1, [r3], #1
 8008ab2:	e7f9      	b.n	8008aa8 <memset+0x4>

08008ab4 <_sbrk_r>:
 8008ab4:	b538      	push	{r3, r4, r5, lr}
 8008ab6:	4d06      	ldr	r5, [pc, #24]	; (8008ad0 <_sbrk_r+0x1c>)
 8008ab8:	2300      	movs	r3, #0
 8008aba:	4604      	mov	r4, r0
 8008abc:	4608      	mov	r0, r1
 8008abe:	602b      	str	r3, [r5, #0]
 8008ac0:	f7f8 fdea 	bl	8001698 <_sbrk>
 8008ac4:	1c43      	adds	r3, r0, #1
 8008ac6:	d102      	bne.n	8008ace <_sbrk_r+0x1a>
 8008ac8:	682b      	ldr	r3, [r5, #0]
 8008aca:	b103      	cbz	r3, 8008ace <_sbrk_r+0x1a>
 8008acc:	6023      	str	r3, [r4, #0]
 8008ace:	bd38      	pop	{r3, r4, r5, pc}
 8008ad0:	200009fc 	.word	0x200009fc

08008ad4 <__errno>:
 8008ad4:	4b01      	ldr	r3, [pc, #4]	; (8008adc <__errno+0x8>)
 8008ad6:	6818      	ldr	r0, [r3, #0]
 8008ad8:	4770      	bx	lr
 8008ada:	bf00      	nop
 8008adc:	20000078 	.word	0x20000078

08008ae0 <__libc_init_array>:
 8008ae0:	b570      	push	{r4, r5, r6, lr}
 8008ae2:	4d0d      	ldr	r5, [pc, #52]	; (8008b18 <__libc_init_array+0x38>)
 8008ae4:	4c0d      	ldr	r4, [pc, #52]	; (8008b1c <__libc_init_array+0x3c>)
 8008ae6:	1b64      	subs	r4, r4, r5
 8008ae8:	10a4      	asrs	r4, r4, #2
 8008aea:	2600      	movs	r6, #0
 8008aec:	42a6      	cmp	r6, r4
 8008aee:	d109      	bne.n	8008b04 <__libc_init_array+0x24>
 8008af0:	4d0b      	ldr	r5, [pc, #44]	; (8008b20 <__libc_init_array+0x40>)
 8008af2:	4c0c      	ldr	r4, [pc, #48]	; (8008b24 <__libc_init_array+0x44>)
 8008af4:	f000 f866 	bl	8008bc4 <_init>
 8008af8:	1b64      	subs	r4, r4, r5
 8008afa:	10a4      	asrs	r4, r4, #2
 8008afc:	2600      	movs	r6, #0
 8008afe:	42a6      	cmp	r6, r4
 8008b00:	d105      	bne.n	8008b0e <__libc_init_array+0x2e>
 8008b02:	bd70      	pop	{r4, r5, r6, pc}
 8008b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b08:	4798      	blx	r3
 8008b0a:	3601      	adds	r6, #1
 8008b0c:	e7ee      	b.n	8008aec <__libc_init_array+0xc>
 8008b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b12:	4798      	blx	r3
 8008b14:	3601      	adds	r6, #1
 8008b16:	e7f2      	b.n	8008afe <__libc_init_array+0x1e>
 8008b18:	08008c00 	.word	0x08008c00
 8008b1c:	08008c00 	.word	0x08008c00
 8008b20:	08008c00 	.word	0x08008c00
 8008b24:	08008c04 	.word	0x08008c04

08008b28 <__retarget_lock_acquire_recursive>:
 8008b28:	4770      	bx	lr

08008b2a <__retarget_lock_release_recursive>:
 8008b2a:	4770      	bx	lr

08008b2c <_free_r>:
 8008b2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b2e:	2900      	cmp	r1, #0
 8008b30:	d044      	beq.n	8008bbc <_free_r+0x90>
 8008b32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b36:	9001      	str	r0, [sp, #4]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f1a1 0404 	sub.w	r4, r1, #4
 8008b3e:	bfb8      	it	lt
 8008b40:	18e4      	addlt	r4, r4, r3
 8008b42:	f7ff ffa3 	bl	8008a8c <__malloc_lock>
 8008b46:	4a1e      	ldr	r2, [pc, #120]	; (8008bc0 <_free_r+0x94>)
 8008b48:	9801      	ldr	r0, [sp, #4]
 8008b4a:	6813      	ldr	r3, [r2, #0]
 8008b4c:	b933      	cbnz	r3, 8008b5c <_free_r+0x30>
 8008b4e:	6063      	str	r3, [r4, #4]
 8008b50:	6014      	str	r4, [r2, #0]
 8008b52:	b003      	add	sp, #12
 8008b54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b58:	f7ff bf9e 	b.w	8008a98 <__malloc_unlock>
 8008b5c:	42a3      	cmp	r3, r4
 8008b5e:	d908      	bls.n	8008b72 <_free_r+0x46>
 8008b60:	6825      	ldr	r5, [r4, #0]
 8008b62:	1961      	adds	r1, r4, r5
 8008b64:	428b      	cmp	r3, r1
 8008b66:	bf01      	itttt	eq
 8008b68:	6819      	ldreq	r1, [r3, #0]
 8008b6a:	685b      	ldreq	r3, [r3, #4]
 8008b6c:	1949      	addeq	r1, r1, r5
 8008b6e:	6021      	streq	r1, [r4, #0]
 8008b70:	e7ed      	b.n	8008b4e <_free_r+0x22>
 8008b72:	461a      	mov	r2, r3
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	b10b      	cbz	r3, 8008b7c <_free_r+0x50>
 8008b78:	42a3      	cmp	r3, r4
 8008b7a:	d9fa      	bls.n	8008b72 <_free_r+0x46>
 8008b7c:	6811      	ldr	r1, [r2, #0]
 8008b7e:	1855      	adds	r5, r2, r1
 8008b80:	42a5      	cmp	r5, r4
 8008b82:	d10b      	bne.n	8008b9c <_free_r+0x70>
 8008b84:	6824      	ldr	r4, [r4, #0]
 8008b86:	4421      	add	r1, r4
 8008b88:	1854      	adds	r4, r2, r1
 8008b8a:	42a3      	cmp	r3, r4
 8008b8c:	6011      	str	r1, [r2, #0]
 8008b8e:	d1e0      	bne.n	8008b52 <_free_r+0x26>
 8008b90:	681c      	ldr	r4, [r3, #0]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	6053      	str	r3, [r2, #4]
 8008b96:	440c      	add	r4, r1
 8008b98:	6014      	str	r4, [r2, #0]
 8008b9a:	e7da      	b.n	8008b52 <_free_r+0x26>
 8008b9c:	d902      	bls.n	8008ba4 <_free_r+0x78>
 8008b9e:	230c      	movs	r3, #12
 8008ba0:	6003      	str	r3, [r0, #0]
 8008ba2:	e7d6      	b.n	8008b52 <_free_r+0x26>
 8008ba4:	6825      	ldr	r5, [r4, #0]
 8008ba6:	1961      	adds	r1, r4, r5
 8008ba8:	428b      	cmp	r3, r1
 8008baa:	bf04      	itt	eq
 8008bac:	6819      	ldreq	r1, [r3, #0]
 8008bae:	685b      	ldreq	r3, [r3, #4]
 8008bb0:	6063      	str	r3, [r4, #4]
 8008bb2:	bf04      	itt	eq
 8008bb4:	1949      	addeq	r1, r1, r5
 8008bb6:	6021      	streq	r1, [r4, #0]
 8008bb8:	6054      	str	r4, [r2, #4]
 8008bba:	e7ca      	b.n	8008b52 <_free_r+0x26>
 8008bbc:	b003      	add	sp, #12
 8008bbe:	bd30      	pop	{r4, r5, pc}
 8008bc0:	200008bc 	.word	0x200008bc

08008bc4 <_init>:
 8008bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bc6:	bf00      	nop
 8008bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bca:	bc08      	pop	{r3}
 8008bcc:	469e      	mov	lr, r3
 8008bce:	4770      	bx	lr

08008bd0 <_fini>:
 8008bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd2:	bf00      	nop
 8008bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bd6:	bc08      	pop	{r3}
 8008bd8:	469e      	mov	lr, r3
 8008bda:	4770      	bx	lr
